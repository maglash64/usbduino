
stm32f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004418  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045b0  080045b0  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  080045b0  080045b0  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045b0  080045b0  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  080045b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f4  20000108  080046c0  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009fc  080046c0  000209fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016463  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003282  00000000  00000000  00036594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00008e91  00000000  00000000  00039816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ad0  00000000  00000000  000426a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dd8  00000000  00000000  00043178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a506  00000000  00000000  00043f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011578  00000000  00000000  0005e456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bf01  00000000  00000000  0006f9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000fb8cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000019d8  00000000  00000000  000fb924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000108 	.word	0x20000108
 8000128:	00000000 	.word	0x00000000
 800012c:	0800450c 	.word	0x0800450c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000010c 	.word	0x2000010c
 8000148:	0800450c 	.word	0x0800450c

0800014c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800014c:	b530      	push	{r4, r5, lr}
 800014e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000150:	2400      	movs	r4, #0
 8000152:	9404      	str	r4, [sp, #16]
 8000154:	9405      	str	r4, [sp, #20]
 8000156:	9406      	str	r4, [sp, #24]
 8000158:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800015a:	4b1d      	ldr	r3, [pc, #116]	; (80001d0 <MX_GPIO_Init+0x84>)
 800015c:	699a      	ldr	r2, [r3, #24]
 800015e:	f042 0210 	orr.w	r2, r2, #16
 8000162:	619a      	str	r2, [r3, #24]
 8000164:	699a      	ldr	r2, [r3, #24]
 8000166:	f002 0210 	and.w	r2, r2, #16
 800016a:	9200      	str	r2, [sp, #0]
 800016c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800016e:	699a      	ldr	r2, [r3, #24]
 8000170:	f042 0220 	orr.w	r2, r2, #32
 8000174:	619a      	str	r2, [r3, #24]
 8000176:	699a      	ldr	r2, [r3, #24]
 8000178:	f002 0220 	and.w	r2, r2, #32
 800017c:	9201      	str	r2, [sp, #4]
 800017e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000180:	699a      	ldr	r2, [r3, #24]
 8000182:	f042 0204 	orr.w	r2, r2, #4
 8000186:	619a      	str	r2, [r3, #24]
 8000188:	699a      	ldr	r2, [r3, #24]
 800018a:	f002 0204 	and.w	r2, r2, #4
 800018e:	9202      	str	r2, [sp, #8]
 8000190:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000192:	699a      	ldr	r2, [r3, #24]
 8000194:	f042 0208 	orr.w	r2, r2, #8
 8000198:	619a      	str	r2, [r3, #24]
 800019a:	699b      	ldr	r3, [r3, #24]
 800019c:	f003 0308 	and.w	r3, r3, #8
 80001a0:	9303      	str	r3, [sp, #12]
 80001a2:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001a4:	4d0b      	ldr	r5, [pc, #44]	; (80001d4 <MX_GPIO_Init+0x88>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ac:	4628      	mov	r0, r5
 80001ae:	f001 ff02 	bl	8001fb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001b6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001b8:	2301      	movs	r3, #1
 80001ba:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001bc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001be:	2302      	movs	r3, #2
 80001c0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001c2:	a904      	add	r1, sp, #16
 80001c4:	4628      	mov	r0, r5
 80001c6:	f001 fddf 	bl	8001d88 <HAL_GPIO_Init>

}
 80001ca:	b009      	add	sp, #36	; 0x24
 80001cc:	bd30      	pop	{r4, r5, pc}
 80001ce:	bf00      	nop
 80001d0:	40021000 	.word	0x40021000
 80001d4:	40011000 	.word	0x40011000

080001d8 <mapGpioPort>:
	switch(port)
 80001d8:	3802      	subs	r0, #2
 80001da:	2803      	cmp	r0, #3
 80001dc:	d803      	bhi.n	80001e6 <mapGpioPort+0xe>
 80001de:	e8df f000 	tbb	[pc, r0]
 80001e2:	040a      	.short	0x040a
 80001e4:	0806      	.short	0x0806
		ret = GPIOD;
 80001e6:	4805      	ldr	r0, [pc, #20]	; (80001fc <mapGpioPort+0x24>)
 80001e8:	4770      	bx	lr
		ret = GPIOC;
 80001ea:	4805      	ldr	r0, [pc, #20]	; (8000200 <mapGpioPort+0x28>)
		break;
 80001ec:	4770      	bx	lr
		ret = GPIOD;
 80001ee:	4805      	ldr	r0, [pc, #20]	; (8000204 <mapGpioPort+0x2c>)
		break;
 80001f0:	4770      	bx	lr
		ret = GPIOE;
 80001f2:	4805      	ldr	r0, [pc, #20]	; (8000208 <mapGpioPort+0x30>)
		break;
 80001f4:	4770      	bx	lr
		ret = GPIOB;
 80001f6:	4805      	ldr	r0, [pc, #20]	; (800020c <mapGpioPort+0x34>)
}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40011000 	.word	0x40011000
 8000204:	40011400 	.word	0x40011400
 8000208:	40011800 	.word	0x40011800
 800020c:	40010c00 	.word	0x40010c00

08000210 <mapGpioPin>:
	switch(pin)
 8000210:	3801      	subs	r0, #1
 8000212:	280f      	cmp	r0, #15
 8000214:	d809      	bhi.n	800022a <mapGpioPin+0x1a>
 8000216:	e8df f000 	tbb	[pc, r0]
 800021a:	0a31      	.short	0x0a31
 800021c:	12100e0c 	.word	0x12100e0c
 8000220:	1c191614 	.word	0x1c191614
 8000224:	2825221f 	.word	0x2825221f
 8000228:	2e2b      	.short	0x2e2b
		ret = GPIO_PIN_15;
 800022a:	2001      	movs	r0, #1
 800022c:	4770      	bx	lr
		ret = GPIO_PIN_2;
 800022e:	2004      	movs	r0, #4
		break;
 8000230:	4770      	bx	lr
		ret = GPIO_PIN_3;
 8000232:	2008      	movs	r0, #8
		break;
 8000234:	4770      	bx	lr
		ret = GPIO_PIN_4;
 8000236:	2010      	movs	r0, #16
		break;
 8000238:	4770      	bx	lr
		ret = GPIO_PIN_5;
 800023a:	2020      	movs	r0, #32
		break;
 800023c:	4770      	bx	lr
		ret = GPIO_PIN_6;
 800023e:	2040      	movs	r0, #64	; 0x40
		break;
 8000240:	4770      	bx	lr
		ret = GPIO_PIN_7;
 8000242:	2080      	movs	r0, #128	; 0x80
		break;
 8000244:	4770      	bx	lr
		ret = GPIO_PIN_8;
 8000246:	f44f 7080 	mov.w	r0, #256	; 0x100
		break;
 800024a:	4770      	bx	lr
		ret = GPIO_PIN_9;
 800024c:	f44f 7000 	mov.w	r0, #512	; 0x200
		break;
 8000250:	4770      	bx	lr
		ret = GPIO_PIN_10;
 8000252:	f44f 6080 	mov.w	r0, #1024	; 0x400
		break;
 8000256:	4770      	bx	lr
		ret = GPIO_PIN_11;
 8000258:	f44f 6000 	mov.w	r0, #2048	; 0x800
		break;
 800025c:	4770      	bx	lr
		ret = GPIO_PIN_12;
 800025e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
		break;
 8000262:	4770      	bx	lr
		ret = GPIO_PIN_13;
 8000264:	f44f 5000 	mov.w	r0, #8192	; 0x2000
		break;
 8000268:	4770      	bx	lr
		ret = GPIO_PIN_14;
 800026a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
		break;
 800026e:	4770      	bx	lr
		ret = GPIO_PIN_15;
 8000270:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		break;
 8000274:	4770      	bx	lr
		ret = GPIO_PIN_All;
 8000276:	f64f 70ff 	movw	r0, #65535	; 0xffff
		break;
 800027a:	4770      	bx	lr
		ret = GPIO_PIN_1;
 800027c:	2002      	movs	r0, #2
}
 800027e:	4770      	bx	lr

08000280 <mapGpioDir>:
	switch(pin_config->dir)
 8000280:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <mapGpioDir+0x30>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	3b01      	subs	r3, #1
 8000288:	2b05      	cmp	r3, #5
 800028a:	d80e      	bhi.n	80002aa <mapGpioDir+0x2a>
 800028c:	e8df f003 	tbb	[pc, r3]
 8000290:	07050d03 	.word	0x07050d03
 8000294:	0b09      	.short	0x0b09
 8000296:	2000      	movs	r0, #0
 8000298:	4770      	bx	lr
		ret = GPIO_MODE_OUTPUT_OD;
 800029a:	2011      	movs	r0, #17
		break;
 800029c:	4770      	bx	lr
		ret = GPIO_MODE_AF_PP;
 800029e:	2002      	movs	r0, #2
		break;
 80002a0:	4770      	bx	lr
		ret = GPIO_MODE_AF_OD;
 80002a2:	2012      	movs	r0, #18
		break;
 80002a4:	4770      	bx	lr
		ret = GPIO_MODE_ANALOG;
 80002a6:	2003      	movs	r0, #3
		break;
 80002a8:	4770      	bx	lr
		ret = GPIO_MODE_OUTPUT_PP;
 80002aa:	2001      	movs	r0, #1
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000238 	.word	0x20000238

080002b4 <mapAdcPin>:
	switch(pin)
 80002b4:	3802      	subs	r0, #2
 80002b6:	2808      	cmp	r0, #8
 80002b8:	d806      	bhi.n	80002c8 <mapAdcPin+0x14>
 80002ba:	e8df f000 	tbb	[pc, r0]
 80002be:	0717      	.short	0x0717
 80002c0:	0f0d0b09 	.word	0x0f0d0b09
 80002c4:	1311      	.short	0x1311
 80002c6:	15          	.byte	0x15
 80002c7:	00          	.byte	0x00
		ret = ADC_CHANNEL_8;
 80002c8:	2000      	movs	r0, #0
 80002ca:	4770      	bx	lr
		ret = ADC_CHANNEL_2;
 80002cc:	2002      	movs	r0, #2
		break;
 80002ce:	4770      	bx	lr
		ret = ADC_CHANNEL_3;
 80002d0:	2003      	movs	r0, #3
		break;
 80002d2:	4770      	bx	lr
		ret = ADC_CHANNEL_4;
 80002d4:	2004      	movs	r0, #4
		break;
 80002d6:	4770      	bx	lr
		ret = ADC_CHANNEL_5;
 80002d8:	2005      	movs	r0, #5
		break;
 80002da:	4770      	bx	lr
		ret = ADC_CHANNEL_6;
 80002dc:	2006      	movs	r0, #6
		break;
 80002de:	4770      	bx	lr
		ret = ADC_CHANNEL_7;
 80002e0:	2007      	movs	r0, #7
		break;
 80002e2:	4770      	bx	lr
		ret = ADC_CHANNEL_8;
 80002e4:	2008      	movs	r0, #8
		break;
 80002e6:	4770      	bx	lr
		ret = ADC_CHANNEL_9;
 80002e8:	2009      	movs	r0, #9
		break;
 80002ea:	4770      	bx	lr
		ret = ADC_CHANNEL_1;
 80002ec:	2001      	movs	r0, #1
}
 80002ee:	4770      	bx	lr

080002f0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80002f2:	e7fe      	b.n	80002f2 <Error_Handler+0x2>

080002f4 <MX_ADC1_Init>:
{
 80002f4:	b508      	push	{r3, lr}
  hadc1.Instance = ADC1;
 80002f6:	4809      	ldr	r0, [pc, #36]	; (800031c <MX_ADC1_Init+0x28>)
 80002f8:	4b09      	ldr	r3, [pc, #36]	; (8000320 <MX_ADC1_Init+0x2c>)
 80002fa:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fc:	2300      	movs	r3, #0
 80002fe:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000300:	2201      	movs	r2, #1
 8000302:	7302      	strb	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000304:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000306:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800030a:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030c:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 800030e:	6102      	str	r2, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000310:	f001 fc32 	bl	8001b78 <HAL_ADC_Init>
 8000314:	b900      	cbnz	r0, 8000318 <MX_ADC1_Init+0x24>
}
 8000316:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000318:	f7ff ffea 	bl	80002f0 <Error_Handler>
 800031c:	20000208 	.word	0x20000208
 8000320:	40012400 	.word	0x40012400

08000324 <MX_ADC2_Init>:
{
 8000324:	b508      	push	{r3, lr}
  hadc2.Instance = ADC2;
 8000326:	4809      	ldr	r0, [pc, #36]	; (800034c <MX_ADC2_Init+0x28>)
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <MX_ADC2_Init+0x2c>)
 800032a:	6003      	str	r3, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032c:	2300      	movs	r3, #0
 800032e:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000330:	2201      	movs	r2, #1
 8000332:	7302      	strb	r2, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000334:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000336:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
 800033a:	61c1      	str	r1, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800033c:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 800033e:	6102      	str	r2, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000340:	f001 fc1a 	bl	8001b78 <HAL_ADC_Init>
 8000344:	b900      	cbnz	r0, 8000348 <MX_ADC2_Init+0x24>
}
 8000346:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000348:	f7ff ffd2 	bl	80002f0 <Error_Handler>
 800034c:	20000140 	.word	0x20000140
 8000350:	40012800 	.word	0x40012800

08000354 <SystemClock_Config>:
{
 8000354:	b500      	push	{lr}
 8000356:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000358:	2300      	movs	r3, #0
 800035a:	930d      	str	r3, [sp, #52]	; 0x34
 800035c:	930f      	str	r3, [sp, #60]	; 0x3c
 800035e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	9305      	str	r3, [sp, #20]
 8000362:	9306      	str	r3, [sp, #24]
 8000364:	9307      	str	r3, [sp, #28]
 8000366:	9308      	str	r3, [sp, #32]
 8000368:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800036a:	9301      	str	r3, [sp, #4]
 800036c:	9302      	str	r3, [sp, #8]
 800036e:	9303      	str	r3, [sp, #12]
 8000370:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000372:	2101      	movs	r1, #1
 8000374:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000376:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800037a:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800037c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037e:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000380:	2302      	movs	r3, #2
 8000382:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000384:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000386:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800038a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038c:	a80a      	add	r0, sp, #40	; 0x28
 800038e:	f002 fd99 	bl	8002ec4 <HAL_RCC_OscConfig>
 8000392:	b9e8      	cbnz	r0, 80003d0 <SystemClock_Config+0x7c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000394:	230f      	movs	r3, #15
 8000396:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000398:	2102      	movs	r1, #2
 800039a:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003a4:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a8:	a805      	add	r0, sp, #20
 80003aa:	f002 ffcf 	bl	800334c <HAL_RCC_ClockConfig>
 80003ae:	b988      	cbnz	r0, 80003d4 <SystemClock_Config+0x80>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80003b0:	2312      	movs	r3, #18
 80003b2:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003b8:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003ba:	2300      	movs	r3, #0
 80003bc:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003be:	a801      	add	r0, sp, #4
 80003c0:	f003 f8a4 	bl	800350c <HAL_RCCEx_PeriphCLKConfig>
 80003c4:	b940      	cbnz	r0, 80003d8 <SystemClock_Config+0x84>
  HAL_RCC_EnableCSS();
 80003c6:	f002 ff85 	bl	80032d4 <HAL_RCC_EnableCSS>
}
 80003ca:	b015      	add	sp, #84	; 0x54
 80003cc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80003d0:	f7ff ff8e 	bl	80002f0 <Error_Handler>
    Error_Handler();
 80003d4:	f7ff ff8c 	bl	80002f0 <Error_Handler>
    Error_Handler();
 80003d8:	f7ff ff8a 	bl	80002f0 <Error_Handler>

080003dc <main>:
{
 80003dc:	b500      	push	{lr}
 80003de:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80003e0:	f001 f960 	bl	80016a4 <HAL_Init>
  SystemClock_Config();
 80003e4:	f7ff ffb6 	bl	8000354 <SystemClock_Config>
  MX_GPIO_Init();
 80003e8:	f7ff feb0 	bl	800014c <MX_GPIO_Init>
  MX_ADC1_Init();
 80003ec:	f7ff ff82 	bl	80002f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80003f0:	f7ff ff98 	bl	8000324 <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 80003f4:	f000 f992 	bl	800071c <MX_USB_DEVICE_Init>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	2300      	movs	r3, #0
 80003fa:	9304      	str	r3, [sp, #16]
 80003fc:	9305      	str	r3, [sp, #20]
 80003fe:	9306      	str	r3, [sp, #24]
 8000400:	9307      	str	r3, [sp, #28]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000402:	9301      	str	r3, [sp, #4]
 8000404:	9302      	str	r3, [sp, #8]
 8000406:	9303      	str	r3, [sp, #12]
 8000408:	e00b      	b.n	8000422 <main+0x46>
					packet->length = 2;
 800040a:	4b85      	ldr	r3, [pc, #532]	; (8000620 <main+0x244>)
 800040c:	2202      	movs	r2, #2
 800040e:	709a      	strb	r2, [r3, #2]
 8000410:	2200      	movs	r2, #0
 8000412:	70da      	strb	r2, [r3, #3]
					packet->data[0] = 0xFF;
 8000414:	22ff      	movs	r2, #255	; 0xff
 8000416:	719a      	strb	r2, [r3, #6]
					packet->data[1] = 0x11;
 8000418:	2211      	movs	r2, #17
 800041a:	71da      	strb	r2, [r3, #7]
			usb_rx_ready = 0;
 800041c:	4b81      	ldr	r3, [pc, #516]	; (8000624 <main+0x248>)
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
		if(usb_rx_ready)
 8000422:	4b80      	ldr	r3, [pc, #512]	; (8000624 <main+0x248>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d0fb      	beq.n	8000422 <main+0x46>
			packet = (struct PacketTypeDef*)usb_buffer;
 800042a:	4b7d      	ldr	r3, [pc, #500]	; (8000620 <main+0x244>)
 800042c:	4a7e      	ldr	r2, [pc, #504]	; (8000628 <main+0x24c>)
 800042e:	6013      	str	r3, [r2, #0]
			switch(packet->pid)
 8000430:	881b      	ldrh	r3, [r3, #0]
 8000432:	3b02      	subs	r3, #2
 8000434:	2b05      	cmp	r3, #5
 8000436:	f200 80ea 	bhi.w	800060e <main+0x232>
 800043a:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <main+0x64>)
 800043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000440:	0800040b 	.word	0x0800040b
 8000444:	08000459 	.word	0x08000459
 8000448:	080004a3 	.word	0x080004a3
 800044c:	080004e1 	.word	0x080004e1
 8000450:	0800060f 	.word	0x0800060f
 8000454:	0800051d 	.word	0x0800051d
					pin_config = (struct PinTypeDef*) packet->data;
 8000458:	4b74      	ldr	r3, [pc, #464]	; (800062c <main+0x250>)
 800045a:	4a75      	ldr	r2, [pc, #468]	; (8000630 <main+0x254>)
 800045c:	6013      	str	r3, [r2, #0]
					GPIO_InitStruct.Mode = mapGpioDir(pin_config->dir);
 800045e:	1f9c      	subs	r4, r3, #6
 8000460:	6898      	ldr	r0, [r3, #8]
 8000462:	f7ff ff0d 	bl	8000280 <mapGpioDir>
 8000466:	9005      	str	r0, [sp, #20]
					GPIO_InitStruct.Pin = mapGpioPin(pin_config->pin);
 8000468:	f8d4 000a 	ldr.w	r0, [r4, #10]
 800046c:	f7ff fed0 	bl	8000210 <mapGpioPin>
 8000470:	9004      	str	r0, [sp, #16]
					GPIO_InitStruct.Pull = pin_config->pull;
 8000472:	f8d4 3012 	ldr.w	r3, [r4, #18]
 8000476:	9306      	str	r3, [sp, #24]
					GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000478:	2302      	movs	r3, #2
 800047a:	9307      	str	r3, [sp, #28]
					HAL_GPIO_Init((GPIO_TypeDef*)mapGpioPort(pin_config->port), &GPIO_InitStruct);
 800047c:	f8d4 0006 	ldr.w	r0, [r4, #6]
 8000480:	f7ff feaa 	bl	80001d8 <mapGpioPort>
 8000484:	a904      	add	r1, sp, #16
 8000486:	f001 fc7f 	bl	8001d88 <HAL_GPIO_Init>
					packet->pid = PID_OK;
 800048a:	4b67      	ldr	r3, [pc, #412]	; (8000628 <main+0x24c>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	2101      	movs	r1, #1
 8000490:	7011      	strb	r1, [r2, #0]
 8000492:	2100      	movs	r1, #0
 8000494:	7051      	strb	r1, [r2, #1]
					USBD_Transmit(&hUsbDeviceFS, (uint8_t*)packet, 0x40);
 8000496:	2240      	movs	r2, #64	; 0x40
 8000498:	6819      	ldr	r1, [r3, #0]
 800049a:	4866      	ldr	r0, [pc, #408]	; (8000634 <main+0x258>)
 800049c:	f000 fa3e 	bl	800091c <USBD_Transmit>
				}break;
 80004a0:	e7bc      	b.n	800041c <main+0x40>
					pin_config = (struct PinTypeDef*) packet->data;
 80004a2:	4c62      	ldr	r4, [pc, #392]	; (800062c <main+0x250>)
 80004a4:	4b62      	ldr	r3, [pc, #392]	; (8000630 <main+0x254>)
 80004a6:	601c      	str	r4, [r3, #0]
					HAL_GPIO_WritePin(mapGpioPort(pin_config->port), mapGpioPin(pin_config->pin), pin_config->val);
 80004a8:	f854 0906 	ldr.w	r0, [r4], #-6
 80004ac:	f7ff fe94 	bl	80001d8 <mapGpioPort>
 80004b0:	4605      	mov	r5, r0
 80004b2:	f8d4 000a 	ldr.w	r0, [r4, #10]
 80004b6:	f7ff feab 	bl	8000210 <mapGpioPin>
 80004ba:	4601      	mov	r1, r0
 80004bc:	f8d4 2016 	ldr.w	r2, [r4, #22]
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	4628      	mov	r0, r5
 80004c4:	f001 fd77 	bl	8001fb6 <HAL_GPIO_WritePin>
					packet->pid = PID_OK;
 80004c8:	4b57      	ldr	r3, [pc, #348]	; (8000628 <main+0x24c>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	2101      	movs	r1, #1
 80004ce:	7011      	strb	r1, [r2, #0]
 80004d0:	2100      	movs	r1, #0
 80004d2:	7051      	strb	r1, [r2, #1]
					USBD_Transmit(&hUsbDeviceFS, (uint8_t*)packet, 0x40);
 80004d4:	2240      	movs	r2, #64	; 0x40
 80004d6:	6819      	ldr	r1, [r3, #0]
 80004d8:	4856      	ldr	r0, [pc, #344]	; (8000634 <main+0x258>)
 80004da:	f000 fa1f 	bl	800091c <USBD_Transmit>
				}break;
 80004de:	e79d      	b.n	800041c <main+0x40>
					pin_config = (struct PinTypeDef*) packet->data;
 80004e0:	4e53      	ldr	r6, [pc, #332]	; (8000630 <main+0x254>)
 80004e2:	4c52      	ldr	r4, [pc, #328]	; (800062c <main+0x250>)
 80004e4:	6034      	str	r4, [r6, #0]
					pin_config->val = HAL_GPIO_ReadPin(mapGpioPort(pin_config->port), mapGpioPin(pin_config->pin));
 80004e6:	f854 0906 	ldr.w	r0, [r4], #-6
 80004ea:	f7ff fe75 	bl	80001d8 <mapGpioPort>
 80004ee:	4605      	mov	r5, r0
 80004f0:	f8d4 000a 	ldr.w	r0, [r4, #10]
 80004f4:	f7ff fe8c 	bl	8000210 <mapGpioPin>
 80004f8:	4601      	mov	r1, r0
 80004fa:	4628      	mov	r0, r5
 80004fc:	f001 fd54 	bl	8001fa8 <HAL_GPIO_ReadPin>
 8000500:	6833      	ldr	r3, [r6, #0]
 8000502:	6118      	str	r0, [r3, #16]
					packet->pid = PID_OK;
 8000504:	4b48      	ldr	r3, [pc, #288]	; (8000628 <main+0x24c>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	2101      	movs	r1, #1
 800050a:	7011      	strb	r1, [r2, #0]
 800050c:	2100      	movs	r1, #0
 800050e:	7051      	strb	r1, [r2, #1]
					USBD_Transmit(&hUsbDeviceFS, (uint8_t*)packet, 0x40);
 8000510:	2240      	movs	r2, #64	; 0x40
 8000512:	6819      	ldr	r1, [r3, #0]
 8000514:	4847      	ldr	r0, [pc, #284]	; (8000634 <main+0x258>)
 8000516:	f000 fa01 	bl	800091c <USBD_Transmit>
				}break;
 800051a:	e77f      	b.n	800041c <main+0x40>
					pin_config = (struct PinTypeDef*) packet->data;
 800051c:	4b43      	ldr	r3, [pc, #268]	; (800062c <main+0x250>)
 800051e:	4a44      	ldr	r2, [pc, #272]	; (8000630 <main+0x254>)
 8000520:	6013      	str	r3, [r2, #0]
					packet->pid = PID_OK;
 8000522:	2500      	movs	r5, #0
 8000524:	2101      	movs	r1, #1
 8000526:	f803 1c06 	strb.w	r1, [r3, #-6]
 800052a:	f803 5c05 	strb.w	r5, [r3, #-5]
					sConfig.Channel = mapAdcPin(pin_config->pin);
 800052e:	685c      	ldr	r4, [r3, #4]
 8000530:	4620      	mov	r0, r4
 8000532:	f7ff febf 	bl	80002b4 <mapAdcPin>
 8000536:	9001      	str	r0, [sp, #4]
					sConfig.Rank = ADC_REGULAR_RANK_1;
 8000538:	2301      	movs	r3, #1
 800053a:	9302      	str	r3, [sp, #8]
					sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800053c:	9503      	str	r5, [sp, #12]
					if(pin_config->pin % 2 == 0)
 800053e:	f014 0f01 	tst.w	r4, #1
 8000542:	d134      	bne.n	80005ae <main+0x1d2>
						if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000544:	a901      	add	r1, sp, #4
 8000546:	483c      	ldr	r0, [pc, #240]	; (8000638 <main+0x25c>)
 8000548:	f001 f996 	bl	8001878 <HAL_ADC_ConfigChannel>
 800054c:	b9b8      	cbnz	r0, 800057e <main+0x1a2>
						HAL_ADC_Start(&hadc1);
 800054e:	4c3a      	ldr	r4, [pc, #232]	; (8000638 <main+0x25c>)
 8000550:	4620      	mov	r0, r4
 8000552:	f001 fa71 	bl	8001a38 <HAL_ADC_Start>
						HAL_ADC_PollForConversion(&hadc1, 1);
 8000556:	2101      	movs	r1, #1
 8000558:	4620      	mov	r0, r4
 800055a:	f001 f8c7 	bl	80016ec <HAL_ADC_PollForConversion>
						pin_config->val =  HAL_ADC_GetValue(&hadc1);
 800055e:	4b34      	ldr	r3, [pc, #208]	; (8000630 <main+0x254>)
 8000560:	681d      	ldr	r5, [r3, #0]
 8000562:	4620      	mov	r0, r4
 8000564:	f001 f984 	bl	8001870 <HAL_ADC_GetValue>
 8000568:	6128      	str	r0, [r5, #16]
						HAL_ADC_Stop(&hadc1);
 800056a:	4620      	mov	r0, r4
 800056c:	f001 fb88 	bl	8001c80 <HAL_ADC_Stop>
					USBD_Transmit(&hUsbDeviceFS, (uint8_t*)packet, 0x40);
 8000570:	2240      	movs	r2, #64	; 0x40
 8000572:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <main+0x24c>)
 8000574:	6819      	ldr	r1, [r3, #0]
 8000576:	482f      	ldr	r0, [pc, #188]	; (8000634 <main+0x258>)
 8000578:	f000 f9d0 	bl	800091c <USBD_Transmit>
				}break;
 800057c:	e74e      	b.n	800041c <main+0x40>
							packet->pid = PID_ERROR;
 800057e:	4b2a      	ldr	r3, [pc, #168]	; (8000628 <main+0x24c>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	7015      	strb	r5, [r2, #0]
 8000584:	7055      	strb	r5, [r2, #1]
							error = (struct ErrorTypeDef*) packet->data;
 8000586:	681d      	ldr	r5, [r3, #0]
 8000588:	1daa      	adds	r2, r5, #6
 800058a:	4b2c      	ldr	r3, [pc, #176]	; (800063c <main+0x260>)
 800058c:	601a      	str	r2, [r3, #0]
							sprintf((char*)error->str,"Cannot Configure ADC channel!\n");
 800058e:	4c2c      	ldr	r4, [pc, #176]	; (8000640 <main+0x264>)
 8000590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000592:	60a8      	str	r0, [r5, #8]
 8000594:	60e9      	str	r1, [r5, #12]
 8000596:	612a      	str	r2, [r5, #16]
 8000598:	616b      	str	r3, [r5, #20]
 800059a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800059c:	61a8      	str	r0, [r5, #24]
 800059e:	61e9      	str	r1, [r5, #28]
 80005a0:	622a      	str	r2, [r5, #32]
 80005a2:	8822      	ldrh	r2, [r4, #0]
 80005a4:	78a3      	ldrb	r3, [r4, #2]
 80005a6:	84aa      	strh	r2, [r5, #36]	; 0x24
 80005a8:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
 80005ac:	e7cf      	b.n	800054e <main+0x172>
						if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005ae:	a901      	add	r1, sp, #4
 80005b0:	4824      	ldr	r0, [pc, #144]	; (8000644 <main+0x268>)
 80005b2:	f001 f961 	bl	8001878 <HAL_ADC_ConfigChannel>
 80005b6:	b988      	cbnz	r0, 80005dc <main+0x200>
						HAL_ADC_Start(&hadc2);
 80005b8:	4c22      	ldr	r4, [pc, #136]	; (8000644 <main+0x268>)
 80005ba:	4620      	mov	r0, r4
 80005bc:	f001 fa3c 	bl	8001a38 <HAL_ADC_Start>
						HAL_ADC_PollForConversion(&hadc2, 1);
 80005c0:	2101      	movs	r1, #1
 80005c2:	4620      	mov	r0, r4
 80005c4:	f001 f892 	bl	80016ec <HAL_ADC_PollForConversion>
						pin_config->val =  HAL_ADC_GetValue(&hadc2);
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <main+0x254>)
 80005ca:	681d      	ldr	r5, [r3, #0]
 80005cc:	4620      	mov	r0, r4
 80005ce:	f001 f94f 	bl	8001870 <HAL_ADC_GetValue>
 80005d2:	6128      	str	r0, [r5, #16]
						HAL_ADC_Stop(&hadc2);
 80005d4:	4620      	mov	r0, r4
 80005d6:	f001 fb53 	bl	8001c80 <HAL_ADC_Stop>
 80005da:	e7c9      	b.n	8000570 <main+0x194>
							packet->pid = PID_ERROR;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <main+0x24c>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	2100      	movs	r1, #0
 80005e2:	7011      	strb	r1, [r2, #0]
 80005e4:	7051      	strb	r1, [r2, #1]
							error = (struct ErrorTypeDef*) packet->data;
 80005e6:	681d      	ldr	r5, [r3, #0]
 80005e8:	1daa      	adds	r2, r5, #6
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <main+0x260>)
 80005ec:	601a      	str	r2, [r3, #0]
							sprintf((char*)error->str,"Cannot Configure ADC channel!\n");
 80005ee:	4c14      	ldr	r4, [pc, #80]	; (8000640 <main+0x264>)
 80005f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005f2:	60a8      	str	r0, [r5, #8]
 80005f4:	60e9      	str	r1, [r5, #12]
 80005f6:	612a      	str	r2, [r5, #16]
 80005f8:	616b      	str	r3, [r5, #20]
 80005fa:	cc07      	ldmia	r4!, {r0, r1, r2}
 80005fc:	61a8      	str	r0, [r5, #24]
 80005fe:	61e9      	str	r1, [r5, #28]
 8000600:	622a      	str	r2, [r5, #32]
 8000602:	8822      	ldrh	r2, [r4, #0]
 8000604:	78a3      	ldrb	r3, [r4, #2]
 8000606:	84aa      	strh	r2, [r5, #36]	; 0x24
 8000608:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
 800060c:	e7d4      	b.n	80005b8 <main+0x1dc>
					packet->pid = PID_ERROR;
 800060e:	4904      	ldr	r1, [pc, #16]	; (8000620 <main+0x244>)
 8000610:	2300      	movs	r3, #0
 8000612:	700b      	strb	r3, [r1, #0]
 8000614:	704b      	strb	r3, [r1, #1]
					USBD_Transmit(&hUsbDeviceFS, (uint8_t*)packet, 0x40);
 8000616:	2240      	movs	r2, #64	; 0x40
 8000618:	4806      	ldr	r0, [pc, #24]	; (8000634 <main+0x258>)
 800061a:	f000 f97f 	bl	800091c <USBD_Transmit>
				}break;
 800061e:	e6fd      	b.n	800041c <main+0x40>
 8000620:	200001c4 	.word	0x200001c4
 8000624:	20000204 	.word	0x20000204
 8000628:	2000013c 	.word	0x2000013c
 800062c:	200001ca 	.word	0x200001ca
 8000630:	20000238 	.word	0x20000238
 8000634:	20000248 	.word	0x20000248
 8000638:	20000208 	.word	0x20000208
 800063c:	2000023c 	.word	0x2000023c
 8000640:	08004524 	.word	0x08004524
 8000644:	20000140 	.word	0x20000140

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <HAL_MspInit+0x3c>)
 800064c:	699a      	ldr	r2, [r3, #24]
 800064e:	f042 0201 	orr.w	r2, r2, #1
 8000652:	619a      	str	r2, [r3, #24]
 8000654:	699a      	ldr	r2, [r3, #24]
 8000656:	f002 0201 	and.w	r2, r2, #1
 800065a:	9200      	str	r2, [sp, #0]
 800065c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	69da      	ldr	r2, [r3, #28]
 8000660:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000664:	61da      	str	r2, [r3, #28]
 8000666:	69db      	ldr	r3, [r3, #28]
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000670:	4a05      	ldr	r2, [pc, #20]	; (8000688 <HAL_MspInit+0x40>)
 8000672:	6853      	ldr	r3, [r2, #4]
 8000674:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000678:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	b002      	add	sp, #8
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000
 8000688:	40010000 	.word	0x40010000

0800068c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800068c:	b082      	sub	sp, #8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800068e:	6803      	ldr	r3, [r0, #0]
 8000690:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <HAL_ADC_MspInit+0x40>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d004      	beq.n	80006a0 <HAL_ADC_MspInit+0x14>
    __HAL_RCC_ADC1_CLK_ENABLE();
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8000696:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <HAL_ADC_MspInit+0x44>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d00c      	beq.n	80006b6 <HAL_ADC_MspInit+0x2a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800069c:	b002      	add	sp, #8
 800069e:	4770      	bx	lr
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_ADC_MspInit+0x48>)
 80006a2:	699a      	ldr	r2, [r3, #24]
 80006a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006a8:	619a      	str	r2, [r3, #24]
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	9b00      	ldr	r3, [sp, #0]
 80006b4:	e7f2      	b.n	800069c <HAL_ADC_MspInit+0x10>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <HAL_ADC_MspInit+0x48>)
 80006b8:	699a      	ldr	r2, [r3, #24]
 80006ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80006be:	619a      	str	r2, [r3, #24]
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	9b01      	ldr	r3, [sp, #4]
}
 80006ca:	e7e7      	b.n	800069c <HAL_ADC_MspInit+0x10>
 80006cc:	40012400 	.word	0x40012400
 80006d0:	40012800 	.word	0x40012800
 80006d4:	40021000 	.word	0x40021000

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80006da:	f002 ff05 	bl	80034e8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006de:	e7fe      	b.n	80006de <NMI_Handler+0x6>

080006e0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <HardFault_Handler>

080006e2 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <MemManage_Handler>

080006e4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <BusFault_Handler>

080006e6 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <UsageFault_Handler>

080006e8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e8:	4770      	bx	lr

080006ea <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ea:	4770      	bx	lr

080006ec <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ec:	4770      	bx	lr

080006ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ee:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f0:	f000 ffea 	bl	80016c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f4:	bd08      	pop	{r3, pc}
	...

080006f8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80006f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006fa:	4802      	ldr	r0, [pc, #8]	; (8000704 <USB_HP_CAN1_TX_IRQHandler+0xc>)
 80006fc:	f002 f9cf 	bl	8002a9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000700:	bd08      	pop	{r3, pc}
 8000702:	bf00      	nop
 8000704:	2000050c 	.word	0x2000050c

08000708 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000708:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800070a:	4802      	ldr	r0, [pc, #8]	; (8000714 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 800070c:	f002 f9c7 	bl	8002a9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000710:	bd08      	pop	{r3, pc}
 8000712:	bf00      	nop
 8000714:	2000050c 	.word	0x2000050c

08000718 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000718:	4770      	bx	lr
	...

0800071c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800071c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800071e:	2200      	movs	r2, #0
 8000720:	490b      	ldr	r1, [pc, #44]	; (8000750 <MX_USB_DEVICE_Init+0x34>)
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <MX_USB_DEVICE_Init+0x38>)
 8000724:	f000 fa1c 	bl	8000b60 <USBD_Init>
 8000728:	b948      	cbnz	r0, 800073e <MX_USB_DEVICE_Init+0x22>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DEV) != USBD_OK)
 800072a:	490b      	ldr	r1, [pc, #44]	; (8000758 <MX_USB_DEVICE_Init+0x3c>)
 800072c:	4809      	ldr	r0, [pc, #36]	; (8000754 <MX_USB_DEVICE_Init+0x38>)
 800072e:	f000 fa2e 	bl	8000b8e <USBD_RegisterClass>
 8000732:	b938      	cbnz	r0, 8000744 <MX_USB_DEVICE_Init+0x28>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <MX_USB_DEVICE_Init+0x38>)
 8000736:	f000 fa31 	bl	8000b9c <USBD_Start>
 800073a:	b930      	cbnz	r0, 800074a <MX_USB_DEVICE_Init+0x2e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800073c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800073e:	f7ff fdd7 	bl	80002f0 <Error_Handler>
 8000742:	e7f2      	b.n	800072a <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 8000744:	f7ff fdd4 	bl	80002f0 <Error_Handler>
 8000748:	e7f4      	b.n	8000734 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800074a:	f7ff fdd1 	bl	80002f0 <Error_Handler>
}
 800074e:	e7f5      	b.n	800073c <MX_USB_DEVICE_Init+0x20>
 8000750:	200000b4 	.word	0x200000b4
 8000754:	20000248 	.word	0x20000248
 8000758:	20000044 	.word	0x20000044

0800075c <USBD_DEV_GetFSCfgDesc>:



static uint8_t  *USBD_DEV_GetFSCfgDesc(uint16_t *length)
{
	*length = sizeof(USBD_DEV_CfgFSDesc);
 800075c:	2320      	movs	r3, #32
 800075e:	8003      	strh	r3, [r0, #0]
	return USBD_DEV_CfgFSDesc;
}
 8000760:	4800      	ldr	r0, [pc, #0]	; (8000764 <USBD_DEV_GetFSCfgDesc+0x8>)
 8000762:	4770      	bx	lr
 8000764:	2000007c 	.word	0x2000007c

08000768 <USBD_DEV_DataIn>:



static uint8_t  USBD_DEV_DataIn(USBD_HandleTypeDef *pdev,uint8_t epnum)
{
	usb_tx_ready = 1;
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <USBD_DEV_DataIn+0x10>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
	((USBD_DEV_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800076e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8000772:	2000      	movs	r0, #0
 8000774:	7318      	strb	r0, [r3, #12]
	return USBD_OK;
}
 8000776:	4770      	bx	lr
 8000778:	20000000 	.word	0x20000000

0800077c <USBD_DEV_GetDeviceQualifierDesc>:
}


static uint8_t  *USBD_DEV_GetDeviceQualifierDesc(uint16_t *length)
{
	*length = sizeof(USBD_DEV_DeviceQualifierDesc);
 800077c:	230a      	movs	r3, #10
 800077e:	8003      	strh	r3, [r0, #0]
	return USBD_DEV_DeviceQualifierDesc;
}
 8000780:	4800      	ldr	r0, [pc, #0]	; (8000784 <USBD_DEV_GetDeviceQualifierDesc+0x8>)
 8000782:	4770      	bx	lr
 8000784:	200000a8 	.word	0x200000a8

08000788 <USBD_DEV_DataOut>:
{
 8000788:	b508      	push	{r3, lr}
	usb_rx_ready = 1;
 800078a:	2101      	movs	r1, #1
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <USBD_DEV_DataOut+0x14>)
 800078e:	7019      	strb	r1, [r3, #0]
	USBD_LL_PrepareReceive(pdev, 0x01, usb_buffer, 0x40);
 8000790:	2340      	movs	r3, #64	; 0x40
 8000792:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <USBD_DEV_DataOut+0x18>)
 8000794:	f000 f9d6 	bl	8000b44 <USBD_LL_PrepareReceive>
}
 8000798:	2000      	movs	r0, #0
 800079a:	bd08      	pop	{r3, pc}
 800079c:	20000204 	.word	0x20000204
 80007a0:	200001c4 	.word	0x200001c4

080007a4 <USBD_DEV_Setup>:
{
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	b082      	sub	sp, #8
	USBD_DEV_HandleTypeDef *hhid = (USBD_DEV_HandleTypeDef *) pdev->pClassData;
 80007a8:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
	uint16_t status_info = 0U;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f8ad 3006 	strh.w	r3, [sp, #6]
	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80007b2:	780c      	ldrb	r4, [r1, #0]
 80007b4:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 80007b8:	d025      	beq.n	8000806 <USBD_DEV_Setup+0x62>
 80007ba:	2c20      	cmp	r4, #32
 80007bc:	d172      	bne.n	80008a4 <USBD_DEV_Setup+0x100>
		switch (req->bRequest)
 80007be:	784b      	ldrb	r3, [r1, #1]
 80007c0:	3b02      	subs	r3, #2
 80007c2:	2b09      	cmp	r3, #9
 80007c4:	d81b      	bhi.n	80007fe <USBD_DEV_Setup+0x5a>
 80007c6:	e8df f003 	tbb	[pc, r3]
 80007ca:	0914      	.short	0x0914
 80007cc:	1a1a1a1a 	.word	0x1a1a1a1a
 80007d0:	050f1a1a 	.word	0x050f1a1a
			hhid->Protocol = (uint8_t)(req->wValue);
 80007d4:	788b      	ldrb	r3, [r1, #2]
 80007d6:	602b      	str	r3, [r5, #0]
	USBD_StatusTypeDef ret = USBD_OK;
 80007d8:	2400      	movs	r4, #0
			break;
 80007da:	e066      	b.n	80008aa <USBD_DEV_Setup+0x106>
			USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80007dc:	2201      	movs	r2, #1
 80007de:	4629      	mov	r1, r5
 80007e0:	f000 fee0 	bl	80015a4 <USBD_CtlSendData>
	USBD_StatusTypeDef ret = USBD_OK;
 80007e4:	2400      	movs	r4, #0
			break;
 80007e6:	e060      	b.n	80008aa <USBD_DEV_Setup+0x106>
			hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80007e8:	884b      	ldrh	r3, [r1, #2]
 80007ea:	0a1b      	lsrs	r3, r3, #8
 80007ec:	606b      	str	r3, [r5, #4]
	USBD_StatusTypeDef ret = USBD_OK;
 80007ee:	2400      	movs	r4, #0
			break;
 80007f0:	e05b      	b.n	80008aa <USBD_DEV_Setup+0x106>
			USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80007f2:	2201      	movs	r2, #1
 80007f4:	1d29      	adds	r1, r5, #4
 80007f6:	f000 fed5 	bl	80015a4 <USBD_CtlSendData>
	USBD_StatusTypeDef ret = USBD_OK;
 80007fa:	2400      	movs	r4, #0
			break;
 80007fc:	e055      	b.n	80008aa <USBD_DEV_Setup+0x106>
			USBD_CtlError(pdev, req);
 80007fe:	f000 fb34 	bl	8000e6a <USBD_CtlError>
			ret = USBD_FAIL;
 8000802:	2402      	movs	r4, #2
			break;
 8000804:	e051      	b.n	80008aa <USBD_DEV_Setup+0x106>
			switch (req->bRequest)
 8000806:	784e      	ldrb	r6, [r1, #1]
 8000808:	2e0b      	cmp	r6, #11
 800080a:	d847      	bhi.n	800089c <USBD_DEV_Setup+0xf8>
 800080c:	e8df f006 	tbb	[pc, r6]
 8000810:	46464606 	.word	0x46464606
 8000814:	46154646 	.word	0x46154646
 8000818:	3b2d4646 	.word	0x3b2d4646
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800081c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8000820:	2b03      	cmp	r3, #3
 8000822:	d003      	beq.n	800082c <USBD_DEV_Setup+0x88>
					USBD_CtlError(pdev, req);
 8000824:	f000 fb21 	bl	8000e6a <USBD_CtlError>
					ret = USBD_FAIL;
 8000828:	2402      	movs	r4, #2
 800082a:	e03e      	b.n	80008aa <USBD_DEV_Setup+0x106>
					USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800082c:	2202      	movs	r2, #2
 800082e:	f10d 0106 	add.w	r1, sp, #6
 8000832:	f000 feb7 	bl	80015a4 <USBD_CtlSendData>
	USBD_StatusTypeDef ret = USBD_OK;
 8000836:	4634      	mov	r4, r6
 8000838:	e037      	b.n	80008aa <USBD_DEV_Setup+0x106>
				if (req->wValue >> 8 == HID_REPORT_DESC)
 800083a:	884b      	ldrh	r3, [r1, #2]
 800083c:	0a1b      	lsrs	r3, r3, #8
 800083e:	2b22      	cmp	r3, #34	; 0x22
 8000840:	d009      	beq.n	8000856 <USBD_DEV_Setup+0xb2>
				else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8000842:	2b21      	cmp	r3, #33	; 0x21
 8000844:	d10d      	bne.n	8000862 <USBD_DEV_Setup+0xbe>
					len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8000846:	88ca      	ldrh	r2, [r1, #6]
 8000848:	2a09      	cmp	r2, #9
 800084a:	bf28      	it	cs
 800084c:	2209      	movcs	r2, #9
					pbuf = USBD_DEV_Desc;
 800084e:	4918      	ldr	r1, [pc, #96]	; (80008b0 <USBD_DEV_Setup+0x10c>)
				USBD_CtlSendData(pdev, pbuf, len);
 8000850:	f000 fea8 	bl	80015a4 <USBD_CtlSendData>
				break;
 8000854:	e029      	b.n	80008aa <USBD_DEV_Setup+0x106>
					len = MIN(HID_REPORT_DESC_SIZE, req->wLength);
 8000856:	88ca      	ldrh	r2, [r1, #6]
 8000858:	2a3c      	cmp	r2, #60	; 0x3c
 800085a:	bf28      	it	cs
 800085c:	223c      	movcs	r2, #60	; 0x3c
					pbuf = HID_ReportDesc;
 800085e:	4915      	ldr	r1, [pc, #84]	; (80008b4 <USBD_DEV_Setup+0x110>)
 8000860:	e7f6      	b.n	8000850 <USBD_DEV_Setup+0xac>
					USBD_CtlError(pdev, req);
 8000862:	f000 fb02 	bl	8000e6a <USBD_CtlError>
					ret = USBD_FAIL;
 8000866:	2402      	movs	r4, #2
					break;
 8000868:	e01f      	b.n	80008aa <USBD_DEV_Setup+0x106>
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800086a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800086e:	2b03      	cmp	r3, #3
 8000870:	d003      	beq.n	800087a <USBD_DEV_Setup+0xd6>
					USBD_CtlError(pdev, req);
 8000872:	f000 fafa 	bl	8000e6a <USBD_CtlError>
					ret = USBD_FAIL;
 8000876:	2402      	movs	r4, #2
 8000878:	e017      	b.n	80008aa <USBD_DEV_Setup+0x106>
					USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800087a:	2201      	movs	r2, #1
 800087c:	f105 0108 	add.w	r1, r5, #8
 8000880:	f000 fe90 	bl	80015a4 <USBD_CtlSendData>
 8000884:	e011      	b.n	80008aa <USBD_DEV_Setup+0x106>
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8000886:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800088a:	2b03      	cmp	r3, #3
 800088c:	d102      	bne.n	8000894 <USBD_DEV_Setup+0xf0>
					hhid->AltSetting = (uint8_t)(req->wValue);
 800088e:	788b      	ldrb	r3, [r1, #2]
 8000890:	60ab      	str	r3, [r5, #8]
 8000892:	e00a      	b.n	80008aa <USBD_DEV_Setup+0x106>
					USBD_CtlError(pdev, req);
 8000894:	f000 fae9 	bl	8000e6a <USBD_CtlError>
					ret = USBD_FAIL;
 8000898:	2402      	movs	r4, #2
 800089a:	e006      	b.n	80008aa <USBD_DEV_Setup+0x106>
				USBD_CtlError(pdev, req);
 800089c:	f000 fae5 	bl	8000e6a <USBD_CtlError>
				ret = USBD_FAIL;
 80008a0:	2402      	movs	r4, #2
				break;
 80008a2:	e002      	b.n	80008aa <USBD_DEV_Setup+0x106>
				USBD_CtlError(pdev, req);
 80008a4:	f000 fae1 	bl	8000e6a <USBD_CtlError>
				ret = USBD_FAIL;
 80008a8:	2402      	movs	r4, #2
}
 80008aa:	4620      	mov	r0, r4
 80008ac:	b002      	add	sp, #8
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	2000009c 	.word	0x2000009c
 80008b4:	20000008 	.word	0x20000008

080008b8 <USBD_DEV_DeInit>:
{
 80008b8:	b510      	push	{r4, lr}
 80008ba:	4604      	mov	r4, r0
	if (pdev->pClassData != NULL)
 80008bc:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 80008c0:	b120      	cbz	r0, 80008cc <USBD_DEV_DeInit+0x14>
		USBD_free(pdev->pClassData);
 80008c2:	f000 f94b 	bl	8000b5c <USBD_static_free>
		pdev->pClassData = NULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
}
 80008cc:	2000      	movs	r0, #0
 80008ce:	bd10      	pop	{r4, pc}

080008d0 <USBD_DEV_Init>:
{
 80008d0:	b538      	push	{r3, r4, r5, lr}
 80008d2:	4604      	mov	r4, r0
	USBD_LL_OpenEP(pdev, 0x01, USBD_EP_TYPE_BULK, 0x40);
 80008d4:	2340      	movs	r3, #64	; 0x40
 80008d6:	2202      	movs	r2, #2
 80008d8:	2101      	movs	r1, #1
 80008da:	f000 f8f1 	bl	8000ac0 <USBD_LL_OpenEP>
	pdev->ep_out[0x01 & 0xFU].is_used = 1U;
 80008de:	2501      	movs	r5, #1
 80008e0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
	USBD_LL_OpenEP(pdev, 0x81, USBD_EP_TYPE_BULK, 0x40);
 80008e4:	2340      	movs	r3, #64	; 0x40
 80008e6:	2202      	movs	r2, #2
 80008e8:	2181      	movs	r1, #129	; 0x81
 80008ea:	4620      	mov	r0, r4
 80008ec:	f000 f8e8 	bl	8000ac0 <USBD_LL_OpenEP>
	pdev->ep_in[0x81 & 0xFU].is_used = 1U;
 80008f0:	62e5      	str	r5, [r4, #44]	; 0x2c
	pdev->pClassData = USBD_malloc(sizeof(USBD_DEV_HandleTypeDef));
 80008f2:	2010      	movs	r0, #16
 80008f4:	f000 f92e 	bl	8000b54 <USBD_static_malloc>
 80008f8:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
	if (pdev->pClassData == NULL)
 80008fc:	b148      	cbz	r0, 8000912 <USBD_DEV_Init+0x42>
	((USBD_DEV_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80008fe:	2500      	movs	r5, #0
 8000900:	7305      	strb	r5, [r0, #12]
	USBD_LL_PrepareReceive(pdev, 0x01, usb_buffer, 0x40);
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <USBD_DEV_Init+0x48>)
 8000906:	2101      	movs	r1, #1
 8000908:	4620      	mov	r0, r4
 800090a:	f000 f91b 	bl	8000b44 <USBD_LL_PrepareReceive>
	return USBD_OK;
 800090e:	4628      	mov	r0, r5
}
 8000910:	bd38      	pop	{r3, r4, r5, pc}
		return USBD_FAIL;
 8000912:	2002      	movs	r0, #2
 8000914:	e7fc      	b.n	8000910 <USBD_DEV_Init+0x40>
 8000916:	bf00      	nop
 8000918:	200001c4 	.word	0x200001c4

0800091c <USBD_Transmit>:
	if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800091c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8000920:	2b03      	cmp	r3, #3
 8000922:	d001      	beq.n	8000928 <USBD_Transmit+0xc>
}
 8000924:	2000      	movs	r0, #0
 8000926:	4770      	bx	lr
			if (usb_tx_ready)
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <USBD_Transmit+0x2c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0f9      	beq.n	8000924 <USBD_Transmit+0x8>
{
 8000930:	b510      	push	{r4, lr}
				usb_tx_ready = 0;
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <USBD_Transmit+0x2c>)
 8000934:	2400      	movs	r4, #0
 8000936:	701c      	strb	r4, [r3, #0]
				USBD_LL_Transmit(pdev,0x81,data,len);
 8000938:	4613      	mov	r3, r2
 800093a:	460a      	mov	r2, r1
 800093c:	2181      	movs	r1, #129	; 0x81
 800093e:	f000 f8f9 	bl	8000b34 <USBD_LL_Transmit>
}
 8000942:	2000      	movs	r0, #0
 8000944:	bd10      	pop	{r4, pc}
 8000946:	bf00      	nop
 8000948:	20000000 	.word	0x20000000

0800094c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800094c:	2802      	cmp	r0, #2
 800094e:	d805      	bhi.n	800095c <USBD_Get_USB_Status+0x10>
 8000950:	e8df f000 	tbb	[pc, r0]
 8000954:	0405      	.short	0x0405
 8000956:	02          	.byte	0x02
 8000957:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8000958:	2001      	movs	r0, #1
    break;
 800095a:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800095c:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800095e:	4770      	bx	lr

08000960 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 8000960:	6802      	ldr	r2, [r0, #0]
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_PCD_MspInit+0x3c>)
 8000964:	429a      	cmp	r2, r3
 8000966:	d000      	beq.n	800096a <HAL_PCD_MspInit+0xa>
 8000968:	4770      	bx	lr
{
 800096a:	b500      	push	{lr}
 800096c:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800096e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8000972:	69da      	ldr	r2, [r3, #28]
 8000974:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000978:	61da      	str	r2, [r3, #28]
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	4611      	mov	r1, r2
 8000988:	2014      	movs	r0, #20
 800098a:	f001 f9a5 	bl	8001cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800098e:	2014      	movs	r0, #20
 8000990:	f001 f9d6 	bl	8001d40 <HAL_NVIC_EnableIRQ>
}
 8000994:	b003      	add	sp, #12
 8000996:	f85d fb04 	ldr.w	pc, [sp], #4
 800099a:	bf00      	nop
 800099c:	40005c00 	.word	0x40005c00

080009a0 <HAL_PCD_SetupStageCallback>:
{
 80009a0:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80009a2:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80009a6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80009aa:	f000 f90f 	bl	8000bcc <USBD_LL_SetupStage>
}
 80009ae:	bd08      	pop	{r3, pc}

080009b0 <HAL_PCD_DataOutStageCallback>:
{
 80009b0:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80009b2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80009b6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80009ba:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80009be:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80009c2:	f000 f930 	bl	8000c26 <USBD_LL_DataOutStage>
}
 80009c6:	bd08      	pop	{r3, pc}

080009c8 <HAL_PCD_DataInStageCallback>:
{
 80009c8:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80009ca:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80009ce:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80009d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009d4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80009d8:	f000 f96b 	bl	8000cb2 <USBD_LL_DataInStage>
}
 80009dc:	bd08      	pop	{r3, pc}

080009de <HAL_PCD_SOFCallback>:
{
 80009de:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80009e0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80009e4:	f000 fa0c 	bl	8000e00 <USBD_LL_SOF>
}
 80009e8:	bd08      	pop	{r3, pc}

080009ea <HAL_PCD_ResetCallback>:
{
 80009ea:	b510      	push	{r4, lr}
 80009ec:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80009ee:	6883      	ldr	r3, [r0, #8]
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d109      	bne.n	8000a08 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80009f4:	2101      	movs	r1, #1
 80009f6:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 80009fa:	f000 f9ea 	bl	8000dd2 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80009fe:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8000a02:	f000 f9be 	bl	8000d82 <USBD_LL_Reset>
}
 8000a06:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000a08:	f7ff fc72 	bl	80002f0 <Error_Handler>
 8000a0c:	e7f2      	b.n	80009f4 <HAL_PCD_ResetCallback+0xa>
	...

08000a10 <HAL_PCD_SuspendCallback>:
{
 8000a10:	b510      	push	{r4, lr}
 8000a12:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8000a14:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8000a18:	f000 f9de 	bl	8000dd8 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8000a1c:	69a3      	ldr	r3, [r4, #24]
 8000a1e:	b123      	cbz	r3, 8000a2a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8000a20:	4a02      	ldr	r2, [pc, #8]	; (8000a2c <HAL_PCD_SuspendCallback+0x1c>)
 8000a22:	6913      	ldr	r3, [r2, #16]
 8000a24:	f043 0306 	orr.w	r3, r3, #6
 8000a28:	6113      	str	r3, [r2, #16]
}
 8000a2a:	bd10      	pop	{r4, pc}
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <HAL_PCD_ResumeCallback>:
{
 8000a30:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8000a32:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8000a36:	f000 f9d8 	bl	8000dea <USBD_LL_Resume>
}
 8000a3a:	bd08      	pop	{r3, pc}

08000a3c <USBD_LL_Init>:
{
 8000a3c:	b510      	push	{r4, lr}
 8000a3e:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8000a40:	4819      	ldr	r0, [pc, #100]	; (8000aa8 <USBD_LL_Init+0x6c>)
 8000a42:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8000a46:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <USBD_LL_Init+0x70>)
 8000a4c:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a4e:	2308      	movs	r3, #8
 8000a50:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a52:	2302      	movs	r3, #2
 8000a54:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a5a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a5c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a5e:	f001 fb3b 	bl	80020d8 <HAL_PCD_Init>
 8000a62:	b9e8      	cbnz	r0, 8000aa0 <USBD_LL_Init+0x64>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x0C);
 8000a64:	230c      	movs	r3, #12
 8000a66:	2200      	movs	r2, #0
 8000a68:	4611      	mov	r1, r2
 8000a6a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8000a6e:	f002 f9f7 	bl	8002e60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x4C);
 8000a72:	234c      	movs	r3, #76	; 0x4c
 8000a74:	2200      	movs	r2, #0
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8000a7c:	f002 f9f0 	bl	8002e60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x8C);	//out 		IF1
 8000a80:	238c      	movs	r3, #140	; 0x8c
 8000a82:	2200      	movs	r2, #0
 8000a84:	2101      	movs	r1, #1
 8000a86:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8000a8a:	f002 f9e9 	bl	8002e60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xCC);	//in  		IF1
 8000a8e:	23cc      	movs	r3, #204	; 0xcc
 8000a90:	2200      	movs	r2, #0
 8000a92:	2181      	movs	r1, #129	; 0x81
 8000a94:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8000a98:	f002 f9e2 	bl	8002e60 <HAL_PCDEx_PMAConfig>
}
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8000aa0:	f7ff fc26 	bl	80002f0 <Error_Handler>
 8000aa4:	e7de      	b.n	8000a64 <USBD_LL_Init+0x28>
 8000aa6:	bf00      	nop
 8000aa8:	2000050c 	.word	0x2000050c
 8000aac:	40005c00 	.word	0x40005c00

08000ab0 <USBD_LL_Start>:
{
 8000ab0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8000ab2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000ab6:	f001 fb95 	bl	80021e4 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000aba:	f7ff ff47 	bl	800094c <USBD_Get_USB_Status>
}
 8000abe:	bd08      	pop	{r3, pc}

08000ac0 <USBD_LL_OpenEP>:
{
 8000ac0:	b510      	push	{r4, lr}
 8000ac2:	4614      	mov	r4, r2
 8000ac4:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8000ac6:	4623      	mov	r3, r4
 8000ac8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000acc:	f002 f8d0 	bl	8002c70 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000ad0:	f7ff ff3c 	bl	800094c <USBD_Get_USB_Status>
}
 8000ad4:	bd10      	pop	{r4, pc}

08000ad6 <USBD_LL_StallEP>:
{
 8000ad6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8000ad8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000adc:	f002 f949 	bl	8002d72 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000ae0:	f7ff ff34 	bl	800094c <USBD_Get_USB_Status>
}
 8000ae4:	bd08      	pop	{r3, pc}

08000ae6 <USBD_LL_ClearStallEP>:
{
 8000ae6:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8000ae8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000aec:	f002 f97d 	bl	8002dea <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000af0:	f7ff ff2c 	bl	800094c <USBD_Get_USB_Status>
}
 8000af4:	bd08      	pop	{r3, pc}

08000af6 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8000af6:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8000afa:	f011 0f80 	tst.w	r1, #128	; 0x80
 8000afe:	d108      	bne.n	8000b12 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8000b00:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000b04:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000b08:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8000b0c:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 8000b10:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8000b12:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000b16:	3101      	adds	r1, #1
 8000b18:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000b1c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8000b20:	7888      	ldrb	r0, [r1, #2]
 8000b22:	4770      	bx	lr

08000b24 <USBD_LL_SetUSBAddress>:
{
 8000b24:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000b26:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000b2a:	f001 ffa4 	bl	8002a76 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000b2e:	f7ff ff0d 	bl	800094c <USBD_Get_USB_Status>
}
 8000b32:	bd08      	pop	{r3, pc}

08000b34 <USBD_LL_Transmit>:
{
 8000b34:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000b36:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000b3a:	f002 f8f7 	bl	8002d2c <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000b3e:	f7ff ff05 	bl	800094c <USBD_Get_USB_Status>
}
 8000b42:	bd08      	pop	{r3, pc}

08000b44 <USBD_LL_PrepareReceive>:
{
 8000b44:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8000b46:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000b4a:	f002 f8cd 	bl	8002ce8 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8000b4e:	f7ff fefd 	bl	800094c <USBD_Get_USB_Status>
}
 8000b52:	bd08      	pop	{r3, pc}

08000b54 <USBD_static_malloc>:
}
 8000b54:	4800      	ldr	r0, [pc, #0]	; (8000b58 <USBD_static_malloc+0x4>)
 8000b56:	4770      	bx	lr
 8000b58:	20000124 	.word	0x20000124

08000b5c <USBD_static_free>:
}
 8000b5c:	4770      	bx	lr

08000b5e <HAL_PCDEx_SetConnectionState>:
}
 8000b5e:	4770      	bx	lr

08000b60 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8000b60:	b198      	cbz	r0, 8000b8a <USBD_Init+0x2a>
{
 8000b62:	b508      	push	{r3, lr}
 8000b64:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8000b66:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 8000b6a:	b110      	cbz	r0, 8000b72 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8000b72:	b109      	cbz	r1, 8000b78 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8000b74:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8000b78:	2101      	movs	r1, #1
 8000b7a:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8000b7e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff5b 	bl	8000a3c <USBD_LL_Init>

  return USBD_OK;
 8000b86:	2000      	movs	r0, #0
}
 8000b88:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8000b8a:	2002      	movs	r0, #2
}
 8000b8c:	4770      	bx	lr

08000b8e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8000b8e:	b119      	cbz	r1, 8000b98 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8000b90:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8000b94:	2000      	movs	r0, #0
 8000b96:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8000b98:	2002      	movs	r0, #2
  }

  return status;
}
 8000b9a:	4770      	bx	lr

08000b9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8000b9c:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8000b9e:	f7ff ff87 	bl	8000ab0 <USBD_LL_Start>

  return USBD_OK;
}
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	bd08      	pop	{r3, pc}

08000ba6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8000ba6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8000ba8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8000bac:	b12b      	cbz	r3, 8000bba <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4798      	blx	r3
 8000bb2:	b900      	cbnz	r0, 8000bb6 <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8000bb4:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	e7fc      	b.n	8000bb4 <USBD_SetClassConfig+0xe>
 8000bba:	2002      	movs	r0, #2
 8000bbc:	e7fa      	b.n	8000bb4 <USBD_SetClassConfig+0xe>

08000bbe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8000bbe:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8000bc0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	4798      	blx	r3

  return USBD_OK;
}
 8000bc8:	2000      	movs	r0, #0
 8000bca:	bd08      	pop	{r3, pc}

08000bcc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8000bcc:	b538      	push	{r3, r4, r5, lr}
 8000bce:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8000bd0:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8000bd4:	4628      	mov	r0, r5
 8000bd6:	f000 f934 	bl	8000e42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8000be0:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8000be4:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8000be8:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8000bec:	f001 031f 	and.w	r3, r1, #31
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d00e      	beq.n	8000c12 <USBD_LL_SetupStage+0x46>
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d011      	beq.n	8000c1c <USBD_LL_SetupStage+0x50>
 8000bf8:	b12b      	cbz	r3, 8000c06 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8000bfa:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f7ff ff69 	bl	8000ad6 <USBD_LL_StallEP>
      break;
 8000c04:	e003      	b.n	8000c0e <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8000c06:	4629      	mov	r1, r5
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f000 fac9 	bl	80011a0 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8000c0e:	2000      	movs	r0, #0
 8000c10:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8000c12:	4629      	mov	r1, r5
 8000c14:	4620      	mov	r0, r4
 8000c16:	f000 faf7 	bl	8001208 <USBD_StdItfReq>
      break;
 8000c1a:	e7f8      	b.n	8000c0e <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8000c1c:	4629      	mov	r1, r5
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f000 fb22 	bl	8001268 <USBD_StdEPReq>
      break;
 8000c24:	e7f3      	b.n	8000c0e <USBD_LL_SetupStage+0x42>

08000c26 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8000c26:	b538      	push	{r3, r4, r5, lr}
 8000c28:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8000c2a:	460d      	mov	r5, r1
 8000c2c:	bb91      	cbnz	r1, 8000c94 <USBD_LL_DataOutStage+0x6e>
 8000c2e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8000c30:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8000c34:	2a03      	cmp	r2, #3
 8000c36:	d003      	beq.n	8000c40 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8000c38:	2a05      	cmp	r2, #5
 8000c3a:	d024      	beq.n	8000c86 <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	e033      	b.n	8000ca8 <USBD_LL_DataOutStage+0x82>
      if (pep->rem_length > pep->maxpacket)
 8000c40:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 8000c44:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8000c48:	4291      	cmp	r1, r2
 8000c4a:	d90d      	bls.n	8000c68 <USBD_LL_DataOutStage+0x42>
        pep->rem_length -= pep->maxpacket;
 8000c4c:	1a89      	subs	r1, r1, r2
 8000c4e:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8000c52:	428a      	cmp	r2, r1
 8000c54:	d906      	bls.n	8000c64 <USBD_LL_DataOutStage+0x3e>
 8000c56:	b28a      	uxth	r2, r1
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	f000 fcb7 	bl	80015ce <USBD_CtlContinueRx>
  return USBD_OK;
 8000c60:	4628      	mov	r0, r5
 8000c62:	e021      	b.n	8000ca8 <USBD_LL_DataOutStage+0x82>
        USBD_CtlContinueRx(pdev, pdata,
 8000c64:	b292      	uxth	r2, r2
 8000c66:	e7f7      	b.n	8000c58 <USBD_LL_DataOutStage+0x32>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8000c68:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	b11b      	cbz	r3, 8000c78 <USBD_LL_DataOutStage+0x52>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8000c70:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8000c74:	2a03      	cmp	r2, #3
 8000c76:	d004      	beq.n	8000c82 <USBD_LL_DataOutStage+0x5c>
        USBD_CtlSendStatus(pdev);
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f000 fcb0 	bl	80015de <USBD_CtlSendStatus>
  return USBD_OK;
 8000c7e:	4628      	mov	r0, r5
 8000c80:	e012      	b.n	8000ca8 <USBD_LL_DataOutStage+0x82>
          pdev->pClass->EP0_RxReady(pdev);
 8000c82:	4798      	blx	r3
 8000c84:	e7f8      	b.n	8000c78 <USBD_LL_DataOutStage+0x52>
        pdev->ep0_state = USBD_EP0_IDLE;
 8000c86:	2100      	movs	r1, #0
 8000c88:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8000c8c:	f7ff ff23 	bl	8000ad6 <USBD_LL_StallEP>
  return USBD_OK;
 8000c90:	4628      	mov	r0, r5
 8000c92:	e009      	b.n	8000ca8 <USBD_LL_DataOutStage+0x82>
  else if ((pdev->pClass->DataOut != NULL) &&
 8000c94:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	b133      	cbz	r3, 8000caa <USBD_LL_DataOutStage+0x84>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8000c9c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8000ca0:	2a03      	cmp	r2, #3
 8000ca2:	d104      	bne.n	8000cae <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 8000ca4:	4798      	blx	r3
  return USBD_OK;
 8000ca6:	2000      	movs	r0, #0
}
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8000caa:	2002      	movs	r0, #2
 8000cac:	e7fc      	b.n	8000ca8 <USBD_LL_DataOutStage+0x82>
 8000cae:	2002      	movs	r0, #2
 8000cb0:	e7fa      	b.n	8000ca8 <USBD_LL_DataOutStage+0x82>

08000cb2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8000cb2:	b538      	push	{r3, r4, r5, lr}
 8000cb4:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d153      	bne.n	8000d64 <USBD_LL_DataInStage+0xb2>
 8000cbc:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8000cbe:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8000cc2:	2a02      	cmp	r2, #2
 8000cc4:	d00c      	beq.n	8000ce0 <USBD_LL_DataInStage+0x2e>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8000cc6:	2a04      	cmp	r2, #4
 8000cc8:	d000      	beq.n	8000ccc <USBD_LL_DataInStage+0x1a>
 8000cca:	b91a      	cbnz	r2, 8000cd4 <USBD_LL_DataInStage+0x22>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f7ff ff01 	bl	8000ad6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8000cd4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d03e      	beq.n	8000d5a <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8000cdc:	4628      	mov	r0, r5
}
 8000cde:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8000ce0:	6a01      	ldr	r1, [r0, #32]
 8000ce2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000ce4:	4291      	cmp	r1, r2
 8000ce6:	d81b      	bhi.n	8000d20 <USBD_LL_DataInStage+0x6e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8000ce8:	69c1      	ldr	r1, [r0, #28]
 8000cea:	fbb1 f3f2 	udiv	r3, r1, r2
 8000cee:	fb02 1313 	mls	r3, r2, r3, r1
 8000cf2:	b92b      	cbnz	r3, 8000d00 <USBD_LL_DataInStage+0x4e>
 8000cf4:	428a      	cmp	r2, r1
 8000cf6:	d803      	bhi.n	8000d00 <USBD_LL_DataInStage+0x4e>
            (pep->total_length < pdev->ep0_data_len))
 8000cf8:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	d31c      	bcc.n	8000d3a <USBD_LL_DataInStage+0x88>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8000d00:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	b11b      	cbz	r3, 8000d10 <USBD_LL_DataInStage+0x5e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8000d08:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8000d0c:	2a03      	cmp	r2, #3
 8000d0e:	d021      	beq.n	8000d54 <USBD_LL_DataInStage+0xa2>
          USBD_LL_StallEP(pdev, 0x80U);
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	4620      	mov	r0, r4
 8000d14:	f7ff fedf 	bl	8000ad6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f000 fc6b 	bl	80015f4 <USBD_CtlReceiveStatus>
 8000d1e:	e7d9      	b.n	8000cd4 <USBD_LL_DataInStage+0x22>
        pep->rem_length -= pep->maxpacket;
 8000d20:	1a8a      	subs	r2, r1, r2
 8000d22:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8000d24:	b292      	uxth	r2, r2
 8000d26:	4619      	mov	r1, r3
 8000d28:	f000 fc49 	bl	80015be <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4619      	mov	r1, r3
 8000d32:	4620      	mov	r0, r4
 8000d34:	f7ff ff06 	bl	8000b44 <USBD_LL_PrepareReceive>
 8000d38:	e7cc      	b.n	8000cd4 <USBD_LL_DataInStage+0x22>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	f000 fc3e 	bl	80015be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8000d42:	2100      	movs	r1, #0
 8000d44:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8000d48:	460b      	mov	r3, r1
 8000d4a:	460a      	mov	r2, r1
 8000d4c:	4620      	mov	r0, r4
 8000d4e:	f7ff fef9 	bl	8000b44 <USBD_LL_PrepareReceive>
 8000d52:	e7bf      	b.n	8000cd4 <USBD_LL_DataInStage+0x22>
            pdev->pClass->EP0_TxSent(pdev);
 8000d54:	4620      	mov	r0, r4
 8000d56:	4798      	blx	r3
 8000d58:	e7da      	b.n	8000d10 <USBD_LL_DataInStage+0x5e>
      pdev->dev_test_mode = 0U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8000d60:	4628      	mov	r0, r5
 8000d62:	e7bc      	b.n	8000cde <USBD_LL_DataInStage+0x2c>
  else if ((pdev->pClass->DataIn != NULL) &&
 8000d64:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	b133      	cbz	r3, 8000d7a <USBD_LL_DataInStage+0xc8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8000d6c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8000d70:	2a03      	cmp	r2, #3
 8000d72:	d104      	bne.n	8000d7e <USBD_LL_DataInStage+0xcc>
    pdev->pClass->DataIn(pdev, epnum);
 8000d74:	4798      	blx	r3
  return USBD_OK;
 8000d76:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8000d78:	e7b1      	b.n	8000cde <USBD_LL_DataInStage+0x2c>
    return USBD_FAIL;
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	e7af      	b.n	8000cde <USBD_LL_DataInStage+0x2c>
 8000d7e:	2002      	movs	r0, #2
 8000d80:	e7ad      	b.n	8000cde <USBD_LL_DataInStage+0x2c>

08000d82 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8000d82:	b570      	push	{r4, r5, r6, lr}
 8000d84:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8000d86:	2340      	movs	r3, #64	; 0x40
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	f7ff fe98 	bl	8000ac0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8000d90:	2501      	movs	r5, #1
 8000d92:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8000d96:	2640      	movs	r6, #64	; 0x40
 8000d98:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8000d9c:	4633      	mov	r3, r6
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2180      	movs	r1, #128	; 0x80
 8000da2:	4620      	mov	r0, r4
 8000da4:	f7ff fe8c 	bl	8000ac0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8000da8:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8000daa:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8000dac:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8000db6:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8000db8:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 8000dbc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8000dc0:	b12b      	cbz	r3, 8000dce <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8000dc2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4620      	mov	r0, r4
 8000dcc:	4798      	blx	r3
  }

  return USBD_OK;
}
 8000dce:	2000      	movs	r0, #0
 8000dd0:	bd70      	pop	{r4, r5, r6, pc}

08000dd2 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8000dd2:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	4770      	bx	lr

08000dd8 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8000dd8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8000ddc:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8000de0:	2304      	movs	r3, #4
 8000de2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8000de6:	2000      	movs	r0, #0
 8000de8:	4770      	bx	lr

08000dea <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8000dea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	d001      	beq.n	8000df6 <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8000df2:	2000      	movs	r0, #0
 8000df4:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 8000df6:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8000dfa:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8000dfe:	e7f8      	b.n	8000df2 <USBD_LL_Resume+0x8>

08000e00 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8000e00:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8000e02:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d001      	beq.n	8000e0e <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8000e0e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f8      	beq.n	8000e0a <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8000e18:	4798      	blx	r3
 8000e1a:	e7f6      	b.n	8000e0a <USBD_LL_SOF+0xa>

08000e1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8000e1c:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 8000e1e:	2000      	movs	r0, #0

  while (*buf != '\0')
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	b11a      	cbz	r2, 8000e2c <USBD_GetLen+0x10>
  {
    len++;
 8000e24:	3001      	adds	r0, #1
 8000e26:	b2c0      	uxtb	r0, r0
    buf++;
 8000e28:	3301      	adds	r3, #1
 8000e2a:	e7f9      	b.n	8000e20 <USBD_GetLen+0x4>
  }

  return len;
}
 8000e2c:	4770      	bx	lr

08000e2e <USBD_SetFeature>:
{
 8000e2e:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8000e30:	884b      	ldrh	r3, [r1, #2]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d000      	beq.n	8000e38 <USBD_SetFeature+0xa>
}
 8000e36:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 8000e38:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8000e3c:	f000 fbcf 	bl	80015de <USBD_CtlSendStatus>
}
 8000e40:	e7f9      	b.n	8000e36 <USBD_SetFeature+0x8>

08000e42 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8000e42:	780b      	ldrb	r3, [r1, #0]
 8000e44:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8000e46:	784b      	ldrb	r3, [r1, #1]
 8000e48:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8000e4a:	788b      	ldrb	r3, [r1, #2]
 8000e4c:	78ca      	ldrb	r2, [r1, #3]
 8000e4e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000e52:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8000e54:	790b      	ldrb	r3, [r1, #4]
 8000e56:	794a      	ldrb	r2, [r1, #5]
 8000e58:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000e5c:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8000e5e:	798b      	ldrb	r3, [r1, #6]
 8000e60:	79ca      	ldrb	r2, [r1, #7]
 8000e62:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000e66:	80c3      	strh	r3, [r0, #6]
}
 8000e68:	4770      	bx	lr

08000e6a <USBD_CtlError>:
{
 8000e6a:	b510      	push	{r4, lr}
 8000e6c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	f7ff fe31 	bl	8000ad6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8000e74:	2100      	movs	r1, #0
 8000e76:	4620      	mov	r0, r4
 8000e78:	f7ff fe2d 	bl	8000ad6 <USBD_LL_StallEP>
}
 8000e7c:	bd10      	pop	{r4, pc}

08000e7e <USBD_GetDescriptor>:
{
 8000e7e:	b530      	push	{r4, r5, lr}
 8000e80:	b083      	sub	sp, #12
 8000e82:	4605      	mov	r5, r0
 8000e84:	460c      	mov	r4, r1
  uint16_t len = 0U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8000e8c:	884a      	ldrh	r2, [r1, #2]
 8000e8e:	0a13      	lsrs	r3, r2, #8
 8000e90:	3b01      	subs	r3, #1
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	f200 80a4 	bhi.w	8000fe0 <USBD_GetDescriptor+0x162>
 8000e98:	e8df f003 	tbb	[pc, r3]
 8000e9c:	a22c1804 	.word	0xa22c1804
 8000ea0:	86a2      	.short	0x86a2
 8000ea2:	93          	.byte	0x93
 8000ea3:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8000ea4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f10d 0106 	add.w	r1, sp, #6
 8000eae:	7c00      	ldrb	r0, [r0, #16]
 8000eb0:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8000eb2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000eb6:	b11a      	cbz	r2, 8000ec0 <USBD_GetDescriptor+0x42>
 8000eb8:	88e3      	ldrh	r3, [r4, #6]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 8094 	bne.w	8000fe8 <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 8000ec0:	88e3      	ldrh	r3, [r4, #6]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 809a 	beq.w	8000ffc <USBD_GetDescriptor+0x17e>
}
 8000ec8:	b003      	add	sp, #12
 8000eca:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8000ecc:	7c03      	ldrb	r3, [r0, #16]
 8000ece:	b943      	cbnz	r3, 8000ee2 <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8000ed0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed6:	f10d 0006 	add.w	r0, sp, #6
 8000eda:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8000edc:	2302      	movs	r3, #2
 8000ede:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8000ee0:	e7e7      	b.n	8000eb2 <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8000ee2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee8:	f10d 0006 	add.w	r0, sp, #6
 8000eec:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8000ef2:	e7de      	b.n	8000eb2 <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	2a05      	cmp	r2, #5
 8000ef8:	d852      	bhi.n	8000fa0 <USBD_GetDescriptor+0x122>
 8000efa:	e8df f002 	tbb	[pc, r2]
 8000efe:	1003      	.short	0x1003
 8000f00:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8000f04:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	b123      	cbz	r3, 8000f16 <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8000f0c:	f10d 0106 	add.w	r1, sp, #6
 8000f10:	7c00      	ldrb	r0, [r0, #16]
 8000f12:	4798      	blx	r3
  if (err != 0U)
 8000f14:	e7cd      	b.n	8000eb2 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8000f16:	4621      	mov	r1, r4
 8000f18:	f7ff ffa7 	bl	8000e6a <USBD_CtlError>
  if (err != 0U)
 8000f1c:	e7d4      	b.n	8000ec8 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8000f1e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	b123      	cbz	r3, 8000f30 <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8000f26:	f10d 0106 	add.w	r1, sp, #6
 8000f2a:	7c00      	ldrb	r0, [r0, #16]
 8000f2c:	4798      	blx	r3
  if (err != 0U)
 8000f2e:	e7c0      	b.n	8000eb2 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8000f30:	4621      	mov	r1, r4
 8000f32:	f7ff ff9a 	bl	8000e6a <USBD_CtlError>
  if (err != 0U)
 8000f36:	e7c7      	b.n	8000ec8 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8000f38:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	b123      	cbz	r3, 8000f4a <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8000f40:	f10d 0106 	add.w	r1, sp, #6
 8000f44:	7c00      	ldrb	r0, [r0, #16]
 8000f46:	4798      	blx	r3
  if (err != 0U)
 8000f48:	e7b3      	b.n	8000eb2 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8000f4a:	4621      	mov	r1, r4
 8000f4c:	f7ff ff8d 	bl	8000e6a <USBD_CtlError>
  if (err != 0U)
 8000f50:	e7ba      	b.n	8000ec8 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8000f52:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	b123      	cbz	r3, 8000f64 <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8000f5a:	f10d 0106 	add.w	r1, sp, #6
 8000f5e:	7c00      	ldrb	r0, [r0, #16]
 8000f60:	4798      	blx	r3
  if (err != 0U)
 8000f62:	e7a6      	b.n	8000eb2 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8000f64:	4621      	mov	r1, r4
 8000f66:	f7ff ff80 	bl	8000e6a <USBD_CtlError>
  if (err != 0U)
 8000f6a:	e7ad      	b.n	8000ec8 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8000f6c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	b123      	cbz	r3, 8000f7e <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8000f74:	f10d 0106 	add.w	r1, sp, #6
 8000f78:	7c00      	ldrb	r0, [r0, #16]
 8000f7a:	4798      	blx	r3
  if (err != 0U)
 8000f7c:	e799      	b.n	8000eb2 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8000f7e:	4621      	mov	r1, r4
 8000f80:	f7ff ff73 	bl	8000e6a <USBD_CtlError>
  if (err != 0U)
 8000f84:	e7a0      	b.n	8000ec8 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8000f86:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	b123      	cbz	r3, 8000f98 <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8000f8e:	f10d 0106 	add.w	r1, sp, #6
 8000f92:	7c00      	ldrb	r0, [r0, #16]
 8000f94:	4798      	blx	r3
  if (err != 0U)
 8000f96:	e78c      	b.n	8000eb2 <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8000f98:	4621      	mov	r1, r4
 8000f9a:	f7ff ff66 	bl	8000e6a <USBD_CtlError>
  if (err != 0U)
 8000f9e:	e793      	b.n	8000ec8 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 8000fa0:	4621      	mov	r1, r4
 8000fa2:	f7ff ff62 	bl	8000e6a <USBD_CtlError>
  if (err != 0U)
 8000fa6:	e78f      	b.n	8000ec8 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8000fa8:	7c03      	ldrb	r3, [r0, #16]
 8000faa:	b933      	cbnz	r3, 8000fba <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8000fac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8000fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb2:	f10d 0006 	add.w	r0, sp, #6
 8000fb6:	4798      	blx	r3
  if (err != 0U)
 8000fb8:	e77b      	b.n	8000eb2 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8000fba:	4621      	mov	r1, r4
 8000fbc:	f7ff ff55 	bl	8000e6a <USBD_CtlError>
  if (err != 0U)
 8000fc0:	e782      	b.n	8000ec8 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8000fc2:	7c03      	ldrb	r3, [r0, #16]
 8000fc4:	b943      	cbnz	r3, 8000fd8 <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8000fc6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	f10d 0006 	add.w	r0, sp, #6
 8000fd0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8000fd6:	e76c      	b.n	8000eb2 <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8000fd8:	4621      	mov	r1, r4
 8000fda:	f7ff ff46 	bl	8000e6a <USBD_CtlError>
  if (err != 0U)
 8000fde:	e773      	b.n	8000ec8 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 8000fe0:	4621      	mov	r1, r4
 8000fe2:	f7ff ff42 	bl	8000e6a <USBD_CtlError>
    return;
 8000fe6:	e76f      	b.n	8000ec8 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	bf28      	it	cs
 8000fec:	461a      	movcs	r2, r3
 8000fee:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	f000 fad5 	bl	80015a4 <USBD_CtlSendData>
 8000ffa:	e761      	b.n	8000ec0 <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	f000 faee 	bl	80015de <USBD_CtlSendStatus>
 8001002:	e761      	b.n	8000ec8 <USBD_GetDescriptor+0x4a>

08001004 <USBD_SetAddress>:
{
 8001004:	b538      	push	{r3, r4, r5, lr}
 8001006:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8001008:	888b      	ldrh	r3, [r1, #4]
 800100a:	b9f3      	cbnz	r3, 800104a <USBD_SetAddress+0x46>
 800100c:	88cb      	ldrh	r3, [r1, #6]
 800100e:	b9e3      	cbnz	r3, 800104a <USBD_SetAddress+0x46>
 8001010:	884b      	ldrh	r3, [r1, #2]
 8001012:	2b7f      	cmp	r3, #127	; 0x7f
 8001014:	d819      	bhi.n	800104a <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8001016:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800101a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800101e:	2b03      	cmp	r3, #3
 8001020:	d00c      	beq.n	800103c <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8001022:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff fd7c 	bl	8000b24 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800102c:	4620      	mov	r0, r4
 800102e:	f000 fad6 	bl	80015de <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8001032:	b135      	cbz	r5, 8001042 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8001034:	2302      	movs	r3, #2
 8001036:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800103a:	e009      	b.n	8001050 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 800103c:	f7ff ff15 	bl	8000e6a <USBD_CtlError>
 8001040:	e006      	b.n	8001050 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8001042:	2301      	movs	r3, #1
 8001044:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8001048:	e002      	b.n	8001050 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 800104a:	4620      	mov	r0, r4
 800104c:	f7ff ff0d 	bl	8000e6a <USBD_CtlError>
}
 8001050:	bd38      	pop	{r3, r4, r5, pc}
	...

08001054 <USBD_SetConfig>:
{
 8001054:	b538      	push	{r3, r4, r5, lr}
 8001056:	4604      	mov	r4, r0
 8001058:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 800105a:	7889      	ldrb	r1, [r1, #2]
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <USBD_SetConfig+0xac>)
 800105e:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8001060:	2901      	cmp	r1, #1
 8001062:	d80e      	bhi.n	8001082 <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 8001064:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001068:	2b02      	cmp	r3, #2
 800106a:	d00e      	beq.n	800108a <USBD_SetConfig+0x36>
 800106c:	2b03      	cmp	r3, #3
 800106e:	d021      	beq.n	80010b4 <USBD_SetConfig+0x60>
        USBD_CtlError(pdev, req);
 8001070:	4629      	mov	r1, r5
 8001072:	f7ff fefa 	bl	8000e6a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <USBD_SetConfig+0xac>)
 8001078:	7819      	ldrb	r1, [r3, #0]
 800107a:	4620      	mov	r0, r4
 800107c:	f7ff fd9f 	bl	8000bbe <USBD_ClrClassConfig>
        break;
 8001080:	e002      	b.n	8001088 <USBD_SetConfig+0x34>
    USBD_CtlError(pdev, req);
 8001082:	4629      	mov	r1, r5
 8001084:	f7ff fef1 	bl	8000e6a <USBD_CtlError>
}
 8001088:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 800108a:	b181      	cbz	r1, 80010ae <USBD_SetConfig+0x5a>
          pdev->dev_config = cfgidx;
 800108c:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800108e:	2303      	movs	r3, #3
 8001090:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8001094:	f7ff fd87 	bl	8000ba6 <USBD_SetClassConfig>
 8001098:	2802      	cmp	r0, #2
 800109a:	d003      	beq.n	80010a4 <USBD_SetConfig+0x50>
          USBD_CtlSendStatus(pdev);
 800109c:	4620      	mov	r0, r4
 800109e:	f000 fa9e 	bl	80015de <USBD_CtlSendStatus>
 80010a2:	e7f1      	b.n	8001088 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 80010a4:	4629      	mov	r1, r5
 80010a6:	4620      	mov	r0, r4
 80010a8:	f7ff fedf 	bl	8000e6a <USBD_CtlError>
            return;
 80010ac:	e7ec      	b.n	8001088 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 80010ae:	f000 fa96 	bl	80015de <USBD_CtlSendStatus>
 80010b2:	e7e9      	b.n	8001088 <USBD_SetConfig+0x34>
        if (cfgidx == 0U)
 80010b4:	b189      	cbz	r1, 80010da <USBD_SetConfig+0x86>
        else if (cfgidx != pdev->dev_config)
 80010b6:	6843      	ldr	r3, [r0, #4]
 80010b8:	4299      	cmp	r1, r3
 80010ba:	d01d      	beq.n	80010f8 <USBD_SetConfig+0xa4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80010bc:	b2d9      	uxtb	r1, r3
 80010be:	f7ff fd7e 	bl	8000bbe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <USBD_SetConfig+0xac>)
 80010c4:	7819      	ldrb	r1, [r3, #0]
 80010c6:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80010c8:	4620      	mov	r0, r4
 80010ca:	f7ff fd6c 	bl	8000ba6 <USBD_SetClassConfig>
 80010ce:	2802      	cmp	r0, #2
 80010d0:	d00d      	beq.n	80010ee <USBD_SetConfig+0x9a>
          USBD_CtlSendStatus(pdev);
 80010d2:	4620      	mov	r0, r4
 80010d4:	f000 fa83 	bl	80015de <USBD_CtlSendStatus>
 80010d8:	e7d6      	b.n	8001088 <USBD_SetConfig+0x34>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80010da:	2302      	movs	r3, #2
 80010dc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80010e0:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80010e2:	f7ff fd6c 	bl	8000bbe <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80010e6:	4620      	mov	r0, r4
 80010e8:	f000 fa79 	bl	80015de <USBD_CtlSendStatus>
 80010ec:	e7cc      	b.n	8001088 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 80010ee:	4629      	mov	r1, r5
 80010f0:	4620      	mov	r0, r4
 80010f2:	f7ff feba 	bl	8000e6a <USBD_CtlError>
            return;
 80010f6:	e7c7      	b.n	8001088 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 80010f8:	f000 fa71 	bl	80015de <USBD_CtlSendStatus>
 80010fc:	e7c4      	b.n	8001088 <USBD_SetConfig+0x34>
 80010fe:	bf00      	nop
 8001100:	20000138 	.word	0x20000138

08001104 <USBD_GetConfig>:
{
 8001104:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8001106:	88cb      	ldrh	r3, [r1, #6]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d10a      	bne.n	8001122 <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 800110c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001110:	2b02      	cmp	r3, #2
 8001112:	d909      	bls.n	8001128 <USBD_GetConfig+0x24>
 8001114:	2b03      	cmp	r3, #3
 8001116:	d109      	bne.n	800112c <USBD_GetConfig+0x28>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8001118:	2201      	movs	r2, #1
 800111a:	1d01      	adds	r1, r0, #4
 800111c:	f000 fa42 	bl	80015a4 <USBD_CtlSendData>
        break;
 8001120:	e001      	b.n	8001126 <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 8001122:	f7ff fea2 	bl	8000e6a <USBD_CtlError>
}
 8001126:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8001128:	b25b      	sxtb	r3, r3
 800112a:	b913      	cbnz	r3, 8001132 <USBD_GetConfig+0x2e>
        USBD_CtlError(pdev, req);
 800112c:	f7ff fe9d 	bl	8000e6a <USBD_CtlError>
}
 8001130:	e7f9      	b.n	8001126 <USBD_GetConfig+0x22>
        pdev->dev_default_config = 0U;
 8001132:	4601      	mov	r1, r0
 8001134:	2300      	movs	r3, #0
 8001136:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800113a:	2201      	movs	r2, #1
 800113c:	f000 fa32 	bl	80015a4 <USBD_CtlSendData>
        break;
 8001140:	e7f1      	b.n	8001126 <USBD_GetConfig+0x22>

08001142 <USBD_GetStatus>:
{
 8001142:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8001144:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001148:	3b01      	subs	r3, #1
 800114a:	2b02      	cmp	r3, #2
 800114c:	d812      	bhi.n	8001174 <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 800114e:	88cb      	ldrh	r3, [r1, #6]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d10c      	bne.n	800116e <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8001154:	2301      	movs	r3, #1
 8001156:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8001158:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800115c:	b10b      	cbz	r3, 8001162 <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800115e:	2303      	movs	r3, #3
 8001160:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8001162:	2202      	movs	r2, #2
 8001164:	f100 010c 	add.w	r1, r0, #12
 8001168:	f000 fa1c 	bl	80015a4 <USBD_CtlSendData>
}
 800116c:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 800116e:	f7ff fe7c 	bl	8000e6a <USBD_CtlError>
        break;
 8001172:	e7fb      	b.n	800116c <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8001174:	f7ff fe79 	bl	8000e6a <USBD_CtlError>
}
 8001178:	e7f8      	b.n	800116c <USBD_GetStatus+0x2a>

0800117a <USBD_ClrFeature>:
{
 800117a:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 800117c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8001180:	3b01      	subs	r3, #1
 8001182:	2b02      	cmp	r3, #2
 8001184:	d809      	bhi.n	800119a <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8001186:	884b      	ldrh	r3, [r1, #2]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d000      	beq.n	800118e <USBD_ClrFeature+0x14>
}
 800118c:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8001194:	f000 fa23 	bl	80015de <USBD_CtlSendStatus>
 8001198:	e7f8      	b.n	800118c <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 800119a:	f7ff fe66 	bl	8000e6a <USBD_CtlError>
}
 800119e:	e7f5      	b.n	800118c <USBD_ClrFeature+0x12>

080011a0 <USBD_StdDevReq>:
{
 80011a0:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80011a2:	780b      	ldrb	r3, [r1, #0]
 80011a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80011a8:	2b20      	cmp	r3, #32
 80011aa:	d005      	beq.n	80011b8 <USBD_StdDevReq+0x18>
 80011ac:	2b40      	cmp	r3, #64	; 0x40
 80011ae:	d003      	beq.n	80011b8 <USBD_StdDevReq+0x18>
 80011b0:	b143      	cbz	r3, 80011c4 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 80011b2:	f7ff fe5a 	bl	8000e6a <USBD_CtlError>
      break;
 80011b6:	e003      	b.n	80011c0 <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 80011b8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	4798      	blx	r3
}
 80011c0:	2000      	movs	r0, #0
 80011c2:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 80011c4:	784b      	ldrb	r3, [r1, #1]
 80011c6:	2b09      	cmp	r3, #9
 80011c8:	d81b      	bhi.n	8001202 <USBD_StdDevReq+0x62>
 80011ca:	e8df f003 	tbb	[pc, r3]
 80011ce:	1711      	.short	0x1711
 80011d0:	081a141a 	.word	0x081a141a
 80011d4:	0b0e1a05 	.word	0x0b0e1a05
          USBD_GetDescriptor(pdev, req);
 80011d8:	f7ff fe51 	bl	8000e7e <USBD_GetDescriptor>
          break;
 80011dc:	e7f0      	b.n	80011c0 <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 80011de:	f7ff ff11 	bl	8001004 <USBD_SetAddress>
          break;
 80011e2:	e7ed      	b.n	80011c0 <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 80011e4:	f7ff ff36 	bl	8001054 <USBD_SetConfig>
          break;
 80011e8:	e7ea      	b.n	80011c0 <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 80011ea:	f7ff ff8b 	bl	8001104 <USBD_GetConfig>
          break;
 80011ee:	e7e7      	b.n	80011c0 <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 80011f0:	f7ff ffa7 	bl	8001142 <USBD_GetStatus>
          break;
 80011f4:	e7e4      	b.n	80011c0 <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 80011f6:	f7ff fe1a 	bl	8000e2e <USBD_SetFeature>
          break;
 80011fa:	e7e1      	b.n	80011c0 <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 80011fc:	f7ff ffbd 	bl	800117a <USBD_ClrFeature>
          break;
 8001200:	e7de      	b.n	80011c0 <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 8001202:	f7ff fe32 	bl	8000e6a <USBD_CtlError>
          break;
 8001206:	e7db      	b.n	80011c0 <USBD_StdDevReq+0x20>

08001208 <USBD_StdItfReq>:
{
 8001208:	b538      	push	{r3, r4, r5, lr}
 800120a:	4605      	mov	r5, r0
 800120c:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800120e:	780b      	ldrb	r3, [r1, #0]
 8001210:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001214:	2b20      	cmp	r3, #32
 8001216:	d006      	beq.n	8001226 <USBD_StdItfReq+0x1e>
 8001218:	2b40      	cmp	r3, #64	; 0x40
 800121a:	d004      	beq.n	8001226 <USBD_StdItfReq+0x1e>
 800121c:	b11b      	cbz	r3, 8001226 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 800121e:	f7ff fe24 	bl	8000e6a <USBD_CtlError>
}
 8001222:	2000      	movs	r0, #0
 8001224:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8001226:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 800122a:	3b01      	subs	r3, #1
 800122c:	2b02      	cmp	r3, #2
 800122e:	d816      	bhi.n	800125e <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8001230:	7923      	ldrb	r3, [r4, #4]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d80e      	bhi.n	8001254 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8001236:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4621      	mov	r1, r4
 800123e:	4628      	mov	r0, r5
 8001240:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8001242:	88e3      	ldrh	r3, [r4, #6]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1ec      	bne.n	8001222 <USBD_StdItfReq+0x1a>
 8001248:	2800      	cmp	r0, #0
 800124a:	d1ea      	bne.n	8001222 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 800124c:	4628      	mov	r0, r5
 800124e:	f000 f9c6 	bl	80015de <USBD_CtlSendStatus>
 8001252:	e7e6      	b.n	8001222 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8001254:	4621      	mov	r1, r4
 8001256:	4628      	mov	r0, r5
 8001258:	f7ff fe07 	bl	8000e6a <USBD_CtlError>
 800125c:	e7e1      	b.n	8001222 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 800125e:	4621      	mov	r1, r4
 8001260:	4628      	mov	r0, r5
 8001262:	f7ff fe02 	bl	8000e6a <USBD_CtlError>
          break;
 8001266:	e7dc      	b.n	8001222 <USBD_StdItfReq+0x1a>

08001268 <USBD_StdEPReq>:
{
 8001268:	b570      	push	{r4, r5, r6, lr}
 800126a:	4605      	mov	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 800126c:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800126e:	780c      	ldrb	r4, [r1, #0]
 8001270:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8001274:	2c20      	cmp	r4, #32
 8001276:	d007      	beq.n	8001288 <USBD_StdEPReq+0x20>
 8001278:	b2da      	uxtb	r2, r3
 800127a:	2c40      	cmp	r4, #64	; 0x40
 800127c:	d004      	beq.n	8001288 <USBD_StdEPReq+0x20>
 800127e:	b15c      	cbz	r4, 8001298 <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 8001280:	f7ff fdf3 	bl	8000e6a <USBD_CtlError>
  return ret;
 8001284:	2400      	movs	r4, #0
      break;
 8001286:	e005      	b.n	8001294 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 8001288:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	4628      	mov	r0, r5
 8001290:	4798      	blx	r3
  return ret;
 8001292:	2400      	movs	r4, #0
}
 8001294:	4620      	mov	r0, r4
 8001296:	bd70      	pop	{r4, r5, r6, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 8001298:	2c20      	cmp	r4, #32
 800129a:	d009      	beq.n	80012b0 <USBD_StdEPReq+0x48>
      switch (req->bRequest)
 800129c:	784e      	ldrb	r6, [r1, #1]
 800129e:	2e01      	cmp	r6, #1
 80012a0:	d033      	beq.n	800130a <USBD_StdEPReq+0xa2>
 80012a2:	2e03      	cmp	r6, #3
 80012a4:	d00a      	beq.n	80012bc <USBD_StdEPReq+0x54>
 80012a6:	2e00      	cmp	r6, #0
 80012a8:	d055      	beq.n	8001356 <USBD_StdEPReq+0xee>
          USBD_CtlError(pdev, req);
 80012aa:	f7ff fdde 	bl	8000e6a <USBD_CtlError>
          break;
 80012ae:	e7f1      	b.n	8001294 <USBD_StdEPReq+0x2c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80012b0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	4798      	blx	r3
 80012b8:	4604      	mov	r4, r0
        return ret;
 80012ba:	e7eb      	b.n	8001294 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 80012bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d004      	beq.n	80012ce <USBD_StdEPReq+0x66>
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d011      	beq.n	80012ec <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 80012c8:	f7ff fdcf 	bl	8000e6a <USBD_CtlError>
              break;
 80012cc:	e7e2      	b.n	8001294 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80012ce:	b10a      	cbz	r2, 80012d4 <USBD_StdEPReq+0x6c>
 80012d0:	2a80      	cmp	r2, #128	; 0x80
 80012d2:	d103      	bne.n	80012dc <USBD_StdEPReq+0x74>
                USBD_CtlError(pdev, req);
 80012d4:	4628      	mov	r0, r5
 80012d6:	f7ff fdc8 	bl	8000e6a <USBD_CtlError>
 80012da:	e7db      	b.n	8001294 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 80012dc:	4611      	mov	r1, r2
 80012de:	f7ff fbfa 	bl	8000ad6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	4628      	mov	r0, r5
 80012e6:	f7ff fbf6 	bl	8000ad6 <USBD_LL_StallEP>
 80012ea:	e7d3      	b.n	8001294 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80012ec:	884b      	ldrh	r3, [r1, #2]
 80012ee:	b923      	cbnz	r3, 80012fa <USBD_StdEPReq+0x92>
                if ((ep_addr != 0x00U) &&
 80012f0:	b11a      	cbz	r2, 80012fa <USBD_StdEPReq+0x92>
 80012f2:	2a80      	cmp	r2, #128	; 0x80
 80012f4:	d001      	beq.n	80012fa <USBD_StdEPReq+0x92>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80012f6:	88cb      	ldrh	r3, [r1, #6]
 80012f8:	b11b      	cbz	r3, 8001302 <USBD_StdEPReq+0x9a>
              USBD_CtlSendStatus(pdev);
 80012fa:	4628      	mov	r0, r5
 80012fc:	f000 f96f 	bl	80015de <USBD_CtlSendStatus>
              break;
 8001300:	e7c8      	b.n	8001294 <USBD_StdEPReq+0x2c>
                  USBD_LL_StallEP(pdev, ep_addr);
 8001302:	4611      	mov	r1, r2
 8001304:	f7ff fbe7 	bl	8000ad6 <USBD_LL_StallEP>
 8001308:	e7f7      	b.n	80012fa <USBD_StdEPReq+0x92>
          switch (pdev->dev_state)
 800130a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800130e:	2b02      	cmp	r3, #2
 8001310:	d004      	beq.n	800131c <USBD_StdEPReq+0xb4>
 8001312:	2b03      	cmp	r3, #3
 8001314:	d011      	beq.n	800133a <USBD_StdEPReq+0xd2>
              USBD_CtlError(pdev, req);
 8001316:	f7ff fda8 	bl	8000e6a <USBD_CtlError>
              break;
 800131a:	e7bb      	b.n	8001294 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800131c:	b10a      	cbz	r2, 8001322 <USBD_StdEPReq+0xba>
 800131e:	2a80      	cmp	r2, #128	; 0x80
 8001320:	d103      	bne.n	800132a <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 8001322:	4628      	mov	r0, r5
 8001324:	f7ff fda1 	bl	8000e6a <USBD_CtlError>
 8001328:	e7b4      	b.n	8001294 <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 800132a:	4611      	mov	r1, r2
 800132c:	f7ff fbd3 	bl	8000ad6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	4628      	mov	r0, r5
 8001334:	f7ff fbcf 	bl	8000ad6 <USBD_LL_StallEP>
 8001338:	e7ac      	b.n	8001294 <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800133a:	884b      	ldrh	r3, [r1, #2]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1a9      	bne.n	8001294 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8001340:	f012 0f7f 	tst.w	r2, #127	; 0x7f
 8001344:	d103      	bne.n	800134e <USBD_StdEPReq+0xe6>
                USBD_CtlSendStatus(pdev);
 8001346:	4628      	mov	r0, r5
 8001348:	f000 f949 	bl	80015de <USBD_CtlSendStatus>
 800134c:	e7a2      	b.n	8001294 <USBD_StdEPReq+0x2c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800134e:	4611      	mov	r1, r2
 8001350:	f7ff fbc9 	bl	8000ae6 <USBD_LL_ClearStallEP>
 8001354:	e7f7      	b.n	8001346 <USBD_StdEPReq+0xde>
          switch (pdev->dev_state)
 8001356:	f890 029c 	ldrb.w	r0, [r0, #668]	; 0x29c
 800135a:	2802      	cmp	r0, #2
 800135c:	d006      	beq.n	800136c <USBD_StdEPReq+0x104>
 800135e:	2803      	cmp	r0, #3
 8001360:	d029      	beq.n	80013b6 <USBD_StdEPReq+0x14e>
              USBD_CtlError(pdev, req);
 8001362:	4628      	mov	r0, r5
 8001364:	f7ff fd81 	bl	8000e6a <USBD_CtlError>
  return ret;
 8001368:	4634      	mov	r4, r6
              break;
 800136a:	e793      	b.n	8001294 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800136c:	b10a      	cbz	r2, 8001372 <USBD_StdEPReq+0x10a>
 800136e:	2a80      	cmp	r2, #128	; 0x80
 8001370:	d113      	bne.n	800139a <USBD_StdEPReq+0x132>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8001372:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001376:	d115      	bne.n	80013a4 <USBD_StdEPReq+0x13c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8001378:	f002 027f 	and.w	r2, r2, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800137c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001380:	0091      	lsls	r1, r2, #2
 8001382:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8001386:	4429      	add	r1, r5
 8001388:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 800138a:	2300      	movs	r3, #0
 800138c:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800138e:	2202      	movs	r2, #2
 8001390:	4628      	mov	r0, r5
 8001392:	f000 f907 	bl	80015a4 <USBD_CtlSendData>
  return ret;
 8001396:	4634      	mov	r4, r6
              break;
 8001398:	e77c      	b.n	8001294 <USBD_StdEPReq+0x2c>
                USBD_CtlError(pdev, req);
 800139a:	4628      	mov	r0, r5
 800139c:	f7ff fd65 	bl	8000e6a <USBD_CtlError>
  return ret;
 80013a0:	4634      	mov	r4, r6
                break;
 80013a2:	e777      	b.n	8001294 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80013a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80013a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80013ac:	0091      	lsls	r1, r2, #2
 80013ae:	3110      	adds	r1, #16
 80013b0:	4429      	add	r1, r5
 80013b2:	3104      	adds	r1, #4
 80013b4:	e7e9      	b.n	800138a <USBD_StdEPReq+0x122>
              if ((ep_addr & 0x80U) == 0x80U)
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db1f      	blt.n	80013fc <USBD_StdEPReq+0x194>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80013bc:	f002 000f 	and.w	r0, r2, #15
 80013c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013c4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80013c8:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 80013cc:	b320      	cbz	r0, 8001418 <USBD_StdEPReq+0x1b0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db27      	blt.n	8001422 <USBD_StdEPReq+0x1ba>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80013d2:	f002 037f 	and.w	r3, r2, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80013d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80013da:	009c      	lsls	r4, r3, #2
 80013dc:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 80013e0:	442c      	add	r4, r5
 80013e2:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80013e4:	b10a      	cbz	r2, 80013ea <USBD_StdEPReq+0x182>
 80013e6:	2a80      	cmp	r2, #128	; 0x80
 80013e8:	d124      	bne.n	8001434 <USBD_StdEPReq+0x1cc>
                pep->status = 0x0000U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80013ee:	2202      	movs	r2, #2
 80013f0:	4621      	mov	r1, r4
 80013f2:	4628      	mov	r0, r5
 80013f4:	f000 f8d6 	bl	80015a4 <USBD_CtlSendData>
  return ret;
 80013f8:	4634      	mov	r4, r6
              break;
 80013fa:	e74b      	b.n	8001294 <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80013fc:	f002 000f 	and.w	r0, r2, #15
 8001400:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001404:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001408:	6980      	ldr	r0, [r0, #24]
 800140a:	2800      	cmp	r0, #0
 800140c:	d1df      	bne.n	80013ce <USBD_StdEPReq+0x166>
                  USBD_CtlError(pdev, req);
 800140e:	4628      	mov	r0, r5
 8001410:	f7ff fd2b 	bl	8000e6a <USBD_CtlError>
  return ret;
 8001414:	4634      	mov	r4, r6
                  break;
 8001416:	e73d      	b.n	8001294 <USBD_StdEPReq+0x2c>
                  USBD_CtlError(pdev, req);
 8001418:	4628      	mov	r0, r5
 800141a:	f7ff fd26 	bl	8000e6a <USBD_CtlError>
  return ret;
 800141e:	4634      	mov	r4, r6
                  break;
 8001420:	e738      	b.n	8001294 <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8001422:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8001426:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800142a:	009c      	lsls	r4, r3, #2
 800142c:	3410      	adds	r4, #16
 800142e:	442c      	add	r4, r5
 8001430:	3404      	adds	r4, #4
 8001432:	e7d7      	b.n	80013e4 <USBD_StdEPReq+0x17c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8001434:	4611      	mov	r1, r2
 8001436:	4628      	mov	r0, r5
 8001438:	f7ff fb5d 	bl	8000af6 <USBD_LL_IsStallEP>
 800143c:	b110      	cbz	r0, 8001444 <USBD_StdEPReq+0x1dc>
                pep->status = 0x0001U;
 800143e:	2301      	movs	r3, #1
 8001440:	6023      	str	r3, [r4, #0]
 8001442:	e7d4      	b.n	80013ee <USBD_StdEPReq+0x186>
                pep->status = 0x0000U;
 8001444:	2300      	movs	r3, #0
 8001446:	6023      	str	r3, [r4, #0]
 8001448:	e7d1      	b.n	80013ee <USBD_StdEPReq+0x186>

0800144a <USBD_GetString>:
  if (desc != NULL)
 800144a:	b1c8      	cbz	r0, 8001480 <USBD_GetString+0x36>
{
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	460d      	mov	r5, r1
 8001450:	4616      	mov	r6, r2
 8001452:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8001454:	f7ff fce2 	bl	8000e1c <USBD_GetLen>
 8001458:	3001      	adds	r0, #1
 800145a:	0040      	lsls	r0, r0, #1
 800145c:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800145e:	7028      	strb	r0, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8001460:	2303      	movs	r3, #3
 8001462:	706b      	strb	r3, [r5, #1]
 8001464:	2302      	movs	r3, #2
    while (*desc != '\0')
 8001466:	e007      	b.n	8001478 <USBD_GetString+0x2e>
      unicode[idx++] = *desc++;
 8001468:	3401      	adds	r4, #1
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	54e8      	strb	r0, [r5, r3]
      unicode[idx++] =  0U;
 8001470:	3302      	adds	r3, #2
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2100      	movs	r1, #0
 8001476:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8001478:	7820      	ldrb	r0, [r4, #0]
 800147a:	2800      	cmp	r0, #0
 800147c:	d1f4      	bne.n	8001468 <USBD_GetString+0x1e>
}
 800147e:	bd70      	pop	{r4, r5, r6, pc}
 8001480:	4770      	bx	lr
	...

08001484 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8001484:	2312      	movs	r3, #18
 8001486:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8001488:	4800      	ldr	r0, [pc, #0]	; (800148c <USBD_FS_DeviceDescriptor+0x8>)
 800148a:	4770      	bx	lr
 800148c:	200000d0 	.word	0x200000d0

08001490 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8001490:	2304      	movs	r3, #4
 8001492:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8001494:	4800      	ldr	r0, [pc, #0]	; (8001498 <USBD_FS_LangIDStrDescriptor+0x8>)
 8001496:	4770      	bx	lr
 8001498:	200000e4 	.word	0x200000e4

0800149c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800149c:	2300      	movs	r3, #0
 800149e:	4293      	cmp	r3, r2
 80014a0:	d217      	bcs.n	80014d2 <IntToUnicode+0x36>
{
 80014a2:	b430      	push	{r4, r5}
 80014a4:	e00b      	b.n	80014be <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80014a6:	3437      	adds	r4, #55	; 0x37
 80014a8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 80014ac:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 80014ae:	005c      	lsls	r4, r3, #1
 80014b0:	3401      	adds	r4, #1
 80014b2:	2500      	movs	r5, #0
 80014b4:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 80014b6:	3301      	adds	r3, #1
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d207      	bcs.n	80014ce <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 80014be:	0f04      	lsrs	r4, r0, #28
 80014c0:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 80014c4:	d2ef      	bcs.n	80014a6 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 80014c6:	3430      	adds	r4, #48	; 0x30
 80014c8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 80014cc:	e7ee      	b.n	80014ac <IntToUnicode+0x10>
  }
}
 80014ce:	bc30      	pop	{r4, r5}
 80014d0:	4770      	bx	lr
 80014d2:	4770      	bx	lr

080014d4 <Get_SerialNum>:
{
 80014d4:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <Get_SerialNum+0x2c>)
 80014d8:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80014da:	3304      	adds	r3, #4
 80014dc:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80014de:	3304      	adds	r3, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80014e2:	18c0      	adds	r0, r0, r3
 80014e4:	d100      	bne.n	80014e8 <Get_SerialNum+0x14>
}
 80014e6:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80014e8:	4d06      	ldr	r5, [pc, #24]	; (8001504 <Get_SerialNum+0x30>)
 80014ea:	2208      	movs	r2, #8
 80014ec:	1ca9      	adds	r1, r5, #2
 80014ee:	f7ff ffd5 	bl	800149c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80014f2:	2204      	movs	r2, #4
 80014f4:	f105 0112 	add.w	r1, r5, #18
 80014f8:	4620      	mov	r0, r4
 80014fa:	f7ff ffcf 	bl	800149c <IntToUnicode>
}
 80014fe:	e7f2      	b.n	80014e6 <Get_SerialNum+0x12>
 8001500:	1ffff7e8 	.word	0x1ffff7e8
 8001504:	200000e8 	.word	0x200000e8

08001508 <USBD_FS_SerialStrDescriptor>:
{
 8001508:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800150a:	231a      	movs	r3, #26
 800150c:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800150e:	f7ff ffe1 	bl	80014d4 <Get_SerialNum>
}
 8001512:	4801      	ldr	r0, [pc, #4]	; (8001518 <USBD_FS_SerialStrDescriptor+0x10>)
 8001514:	bd08      	pop	{r3, pc}
 8001516:	bf00      	nop
 8001518:	200000e8 	.word	0x200000e8

0800151c <USBD_FS_ProductStrDescriptor>:
{
 800151c:	b508      	push	{r3, lr}
 800151e:	460a      	mov	r2, r1
  if(speed == 0)
 8001520:	b928      	cbnz	r0, 800152e <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8001522:	4905      	ldr	r1, [pc, #20]	; (8001538 <USBD_FS_ProductStrDescriptor+0x1c>)
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <USBD_FS_ProductStrDescriptor+0x20>)
 8001526:	f7ff ff90 	bl	800144a <USBD_GetString>
}
 800152a:	4803      	ldr	r0, [pc, #12]	; (8001538 <USBD_FS_ProductStrDescriptor+0x1c>)
 800152c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800152e:	4902      	ldr	r1, [pc, #8]	; (8001538 <USBD_FS_ProductStrDescriptor+0x1c>)
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <USBD_FS_ProductStrDescriptor+0x20>)
 8001532:	f7ff ff8a 	bl	800144a <USBD_GetString>
 8001536:	e7f8      	b.n	800152a <USBD_FS_ProductStrDescriptor+0xe>
 8001538:	200007f8 	.word	0x200007f8
 800153c:	0800455c 	.word	0x0800455c

08001540 <USBD_FS_ManufacturerStrDescriptor>:
{
 8001540:	b510      	push	{r4, lr}
 8001542:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001544:	4c03      	ldr	r4, [pc, #12]	; (8001554 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8001546:	4621      	mov	r1, r4
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800154a:	f7ff ff7e 	bl	800144a <USBD_GetString>
}
 800154e:	4620      	mov	r0, r4
 8001550:	bd10      	pop	{r4, pc}
 8001552:	bf00      	nop
 8001554:	200007f8 	.word	0x200007f8
 8001558:	08004574 	.word	0x08004574

0800155c <USBD_FS_ConfigStrDescriptor>:
{
 800155c:	b508      	push	{r3, lr}
 800155e:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8001560:	b928      	cbnz	r0, 800156e <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8001562:	4905      	ldr	r1, [pc, #20]	; (8001578 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <USBD_FS_ConfigStrDescriptor+0x20>)
 8001566:	f7ff ff70 	bl	800144a <USBD_GetString>
}
 800156a:	4803      	ldr	r0, [pc, #12]	; (8001578 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800156c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800156e:	4902      	ldr	r1, [pc, #8]	; (8001578 <USBD_FS_ConfigStrDescriptor+0x1c>)
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <USBD_FS_ConfigStrDescriptor+0x20>)
 8001572:	f7ff ff6a 	bl	800144a <USBD_GetString>
 8001576:	e7f8      	b.n	800156a <USBD_FS_ConfigStrDescriptor+0xe>
 8001578:	200007f8 	.word	0x200007f8
 800157c:	08004580 	.word	0x08004580

08001580 <USBD_FS_InterfaceStrDescriptor>:
{
 8001580:	b508      	push	{r3, lr}
 8001582:	460a      	mov	r2, r1
  if(speed == 0)
 8001584:	b928      	cbnz	r0, 8001592 <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001586:	4905      	ldr	r1, [pc, #20]	; (800159c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <USBD_FS_InterfaceStrDescriptor+0x20>)
 800158a:	f7ff ff5e 	bl	800144a <USBD_GetString>
}
 800158e:	4803      	ldr	r0, [pc, #12]	; (800159c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8001590:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001592:	4902      	ldr	r1, [pc, #8]	; (800159c <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <USBD_FS_InterfaceStrDescriptor+0x20>)
 8001596:	f7ff ff58 	bl	800144a <USBD_GetString>
 800159a:	e7f8      	b.n	800158e <USBD_FS_InterfaceStrDescriptor+0xe>
 800159c:	200007f8 	.word	0x200007f8
 80015a0:	08004590 	.word	0x08004590

080015a4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80015a4:	b510      	push	{r4, lr}
 80015a6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80015a8:	2202      	movs	r2, #2
 80015aa:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80015ae:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 80015b0:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80015b2:	460a      	mov	r2, r1
 80015b4:	2100      	movs	r1, #0
 80015b6:	f7ff fabd 	bl	8000b34 <USBD_LL_Transmit>

  return USBD_OK;
}
 80015ba:	2000      	movs	r0, #0
 80015bc:	bd10      	pop	{r4, pc}

080015be <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80015be:	b508      	push	{r3, lr}
 80015c0:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80015c2:	460a      	mov	r2, r1
 80015c4:	2100      	movs	r1, #0
 80015c6:	f7ff fab5 	bl	8000b34 <USBD_LL_Transmit>

  return USBD_OK;
}
 80015ca:	2000      	movs	r0, #0
 80015cc:	bd08      	pop	{r3, pc}

080015ce <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80015ce:	b508      	push	{r3, lr}
 80015d0:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80015d2:	460a      	mov	r2, r1
 80015d4:	2100      	movs	r1, #0
 80015d6:	f7ff fab5 	bl	8000b44 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80015da:	2000      	movs	r0, #0
 80015dc:	bd08      	pop	{r3, pc}

080015de <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80015de:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80015e0:	2304      	movs	r3, #4
 80015e2:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80015e6:	2300      	movs	r3, #0
 80015e8:	461a      	mov	r2, r3
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff faa2 	bl	8000b34 <USBD_LL_Transmit>

  return USBD_OK;
}
 80015f0:	2000      	movs	r0, #0
 80015f2:	bd08      	pop	{r3, pc}

080015f4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80015f4:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80015f6:	2305      	movs	r3, #5
 80015f8:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80015fc:	2300      	movs	r3, #0
 80015fe:	461a      	mov	r2, r3
 8001600:	4619      	mov	r1, r3
 8001602:	f7ff fa9f 	bl	8000b44 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8001606:	2000      	movs	r0, #0
 8001608:	bd08      	pop	{r3, pc}
	...

0800160c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160e:	490d      	ldr	r1, [pc, #52]	; (8001644 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001624:	4c0a      	ldr	r4, [pc, #40]	; (8001650 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001632:	f7ff f871 	bl	8000718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001636:	f002 ff45 	bl	80044c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800163a:	f7fe fecf 	bl	80003dc <main>
  bx lr
 800163e:	4770      	bx	lr
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001648:	080045b8 	.word	0x080045b8
  ldr r2, =_sbss
 800164c:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001650:	200009fc 	.word	0x200009fc

08001654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC1_2_IRQHandler>
	...

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b510      	push	{r4, lr}
 800165a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_InitTick+0x40>)
 800165e:	7818      	ldrb	r0, [r3, #0]
 8001660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001664:	fbb3 f3f0 	udiv	r3, r3, r0
 8001668:	4a0c      	ldr	r2, [pc, #48]	; (800169c <HAL_InitTick+0x44>)
 800166a:	6810      	ldr	r0, [r2, #0]
 800166c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001670:	f000 fb74 	bl	8001d5c <HAL_SYSTICK_Config>
 8001674:	b968      	cbnz	r0, 8001692 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	2c0f      	cmp	r4, #15
 8001678:	d901      	bls.n	800167e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800167a:	2001      	movs	r0, #1
 800167c:	e00a      	b.n	8001694 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167e:	2200      	movs	r2, #0
 8001680:	4621      	mov	r1, r4
 8001682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001686:	f000 fb27 	bl	8001cd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_InitTick+0x48>)
 800168c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800168e:	2000      	movs	r0, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001692:	2001      	movs	r0, #1
}
 8001694:	bd10      	pop	{r4, pc}
 8001696:	bf00      	nop
 8001698:	20000102 	.word	0x20000102
 800169c:	20000004 	.word	0x20000004
 80016a0:	20000104 	.word	0x20000104

080016a4 <HAL_Init>:
{
 80016a4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a6:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_Init+0x20>)
 80016a8:	6813      	ldr	r3, [r2, #0]
 80016aa:	f043 0310 	orr.w	r3, r3, #16
 80016ae:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 faff 	bl	8001cb4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b6:	200f      	movs	r0, #15
 80016b8:	f7ff ffce 	bl	8001658 <HAL_InitTick>
  HAL_MspInit();
 80016bc:	f7fe ffc4 	bl	8000648 <HAL_MspInit>
}
 80016c0:	2000      	movs	r0, #0
 80016c2:	bd08      	pop	{r3, pc}
 80016c4:	40022000 	.word	0x40022000

080016c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016c8:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <HAL_IncTick+0x10>)
 80016ca:	6811      	ldr	r1, [r2, #0]
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_IncTick+0x14>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	440b      	add	r3, r1
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	200009f8 	.word	0x200009f8
 80016dc:	20000102 	.word	0x20000102

080016e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016e0:	4b01      	ldr	r3, [pc, #4]	; (80016e8 <HAL_GetTick+0x8>)
 80016e2:	6818      	ldr	r0, [r3, #0]
}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	200009f8 	.word	0x200009f8

080016ec <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	b083      	sub	sp, #12
 80016f0:	4605      	mov	r5, r0
 80016f2:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	9301      	str	r3, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80016f8:	f7ff fff2 	bl	80016e0 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80016fc:	682b      	ldr	r3, [r5, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001704:	d123      	bne.n	800174e <HAL_ADC_PollForConversion+0x62>
 8001706:	4607      	mov	r7, r0
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800170e:	d103      	bne.n	8001718 <HAL_ADC_PollForConversion+0x2c>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001712:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8001716:	d029      	beq.n	800176c <HAL_ADC_PollForConversion+0x80>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001718:	4b50      	ldr	r3, [pc, #320]	; (800185c <HAL_ADC_PollForConversion+0x170>)
 800171a:	681e      	ldr	r6, [r3, #0]
 800171c:	2002      	movs	r0, #2
 800171e:	f001 ff7f 	bl	8003620 <HAL_RCCEx_GetPeriphCLKFreq>
 8001722:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001726:	682b      	ldr	r3, [r5, #0]
 8001728:	6919      	ldr	r1, [r3, #16]
 800172a:	4a4d      	ldr	r2, [pc, #308]	; (8001860 <HAL_ADC_PollForConversion+0x174>)
 800172c:	4211      	tst	r1, r2
 800172e:	d136      	bne.n	800179e <HAL_ADC_PollForConversion+0xb2>
 8001730:	68d9      	ldr	r1, [r3, #12]
 8001732:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 8001736:	4211      	tst	r1, r2
 8001738:	d131      	bne.n	800179e <HAL_ADC_PollForConversion+0xb2>
 800173a:	6919      	ldr	r1, [r3, #16]
 800173c:	4a49      	ldr	r2, [pc, #292]	; (8001864 <HAL_ADC_PollForConversion+0x178>)
 800173e:	4211      	tst	r1, r2
 8001740:	d140      	bne.n	80017c4 <HAL_ADC_PollForConversion+0xd8>
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	4b48      	ldr	r3, [pc, #288]	; (8001868 <HAL_ADC_PollForConversion+0x17c>)
 8001746:	421a      	tst	r2, r3
 8001748:	d03e      	beq.n	80017c8 <HAL_ADC_PollForConversion+0xdc>
 800174a:	2629      	movs	r6, #41	; 0x29
 800174c:	e041      	b.n	80017d2 <HAL_ADC_PollForConversion+0xe6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800174e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001750:	f043 0320 	orr.w	r3, r3, #32
 8001754:	62ab      	str	r3, [r5, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8001756:	2300      	movs	r3, #0
 8001758:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    return HAL_ERROR;
 800175c:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 800175e:	b003      	add	sp, #12
 8001760:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001762:	682b      	ldr	r3, [r5, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f013 0f02 	tst.w	r3, #2
 800176a:	d00f      	beq.n	800178c <HAL_ADC_PollForConversion+0xa0>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f013 0f02 	tst.w	r3, #2
 8001774:	d14f      	bne.n	8001816 <HAL_ADC_PollForConversion+0x12a>
      if(Timeout != HAL_MAX_DELAY)
 8001776:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800177a:	d0f7      	beq.n	800176c <HAL_ADC_PollForConversion+0x80>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800177c:	2c00      	cmp	r4, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_ADC_PollForConversion+0x76>
 8001780:	f7ff ffae 	bl	80016e0 <HAL_GetTick>
 8001784:	1bc3      	subs	r3, r0, r7
 8001786:	42a3      	cmp	r3, r4
 8001788:	d9f0      	bls.n	800176c <HAL_ADC_PollForConversion+0x80>
 800178a:	e7ea      	b.n	8001762 <HAL_ADC_PollForConversion+0x76>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800178c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	62ab      	str	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8001794:	2300      	movs	r3, #0
 8001796:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            return HAL_TIMEOUT;
 800179a:	2003      	movs	r0, #3
 800179c:	e7df      	b.n	800175e <HAL_ADC_PollForConversion+0x72>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800179e:	6919      	ldr	r1, [r3, #16]
 80017a0:	4a30      	ldr	r2, [pc, #192]	; (8001864 <HAL_ADC_PollForConversion+0x178>)
 80017a2:	4211      	tst	r1, r2
 80017a4:	d104      	bne.n	80017b0 <HAL_ADC_PollForConversion+0xc4>
 80017a6:	68d9      	ldr	r1, [r3, #12]
 80017a8:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 80017ac:	4211      	tst	r1, r2
 80017ae:	d00d      	beq.n	80017cc <HAL_ADC_PollForConversion+0xe0>
 80017b0:	6919      	ldr	r1, [r3, #16]
 80017b2:	4a2e      	ldr	r2, [pc, #184]	; (800186c <HAL_ADC_PollForConversion+0x180>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	b95a      	cbnz	r2, 80017d0 <HAL_ADC_PollForConversion+0xe4>
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <HAL_ADC_PollForConversion+0x180>)
 80017bc:	4013      	ands	r3, r2
 80017be:	b15b      	cbz	r3, 80017d8 <HAL_ADC_PollForConversion+0xec>
 80017c0:	26fc      	movs	r6, #252	; 0xfc
 80017c2:	e006      	b.n	80017d2 <HAL_ADC_PollForConversion+0xe6>
 80017c4:	2629      	movs	r6, #41	; 0x29
 80017c6:	e004      	b.n	80017d2 <HAL_ADC_PollForConversion+0xe6>
 80017c8:	2614      	movs	r6, #20
 80017ca:	e002      	b.n	80017d2 <HAL_ADC_PollForConversion+0xe6>
 80017cc:	2654      	movs	r6, #84	; 0x54
 80017ce:	e000      	b.n	80017d2 <HAL_ADC_PollForConversion+0xe6>
 80017d0:	26fc      	movs	r6, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80017d2:	fb06 f600 	mul.w	r6, r6, r0
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017d6:	e007      	b.n	80017e8 <HAL_ADC_PollForConversion+0xfc>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80017d8:	2654      	movs	r6, #84	; 0x54
 80017da:	e7fa      	b.n	80017d2 <HAL_ADC_PollForConversion+0xe6>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017dc:	9b01      	ldr	r3, [sp, #4]
 80017de:	42b3      	cmp	r3, r6
 80017e0:	d310      	bcc.n	8001804 <HAL_ADC_PollForConversion+0x118>
      Conversion_Timeout_CPU_cycles ++;
 80017e2:	9b01      	ldr	r3, [sp, #4]
 80017e4:	3301      	adds	r3, #1
 80017e6:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017e8:	9b01      	ldr	r3, [sp, #4]
 80017ea:	42b3      	cmp	r3, r6
 80017ec:	d213      	bcs.n	8001816 <HAL_ADC_PollForConversion+0x12a>
      if(Timeout != HAL_MAX_DELAY)
 80017ee:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80017f2:	d0f6      	beq.n	80017e2 <HAL_ADC_PollForConversion+0xf6>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80017f4:	2c00      	cmp	r4, #0
 80017f6:	d0f1      	beq.n	80017dc <HAL_ADC_PollForConversion+0xf0>
 80017f8:	f7ff ff72 	bl	80016e0 <HAL_GetTick>
 80017fc:	1bc0      	subs	r0, r0, r7
 80017fe:	42a0      	cmp	r0, r4
 8001800:	d9ef      	bls.n	80017e2 <HAL_ADC_PollForConversion+0xf6>
 8001802:	e7eb      	b.n	80017dc <HAL_ADC_PollForConversion+0xf0>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001804:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	62ab      	str	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 800180c:	2300      	movs	r3, #0
 800180e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            return HAL_TIMEOUT;
 8001812:	2003      	movs	r0, #3
 8001814:	e7a3      	b.n	800175e <HAL_ADC_PollForConversion+0x72>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001816:	682b      	ldr	r3, [r5, #0]
 8001818:	f06f 0212 	mvn.w	r2, #18
 800181c:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800181e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001820:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001824:	62ab      	str	r3, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001826:	682b      	ldr	r3, [r5, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800182e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001832:	d001      	beq.n	8001838 <HAL_ADC_PollForConversion+0x14c>
  return HAL_OK;
 8001834:	2000      	movs	r0, #0
 8001836:	e792      	b.n	800175e <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001838:	7b28      	ldrb	r0, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800183a:	b960      	cbnz	r0, 8001856 <HAL_ADC_PollForConversion+0x16a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800183c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800183e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001842:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001844:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001846:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800184a:	d188      	bne.n	800175e <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800184c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	62ab      	str	r3, [r5, #40]	; 0x28
 8001854:	e783      	b.n	800175e <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8001856:	2000      	movs	r0, #0
 8001858:	e781      	b.n	800175e <HAL_ADC_PollForConversion+0x72>
 800185a:	bf00      	nop
 800185c:	20000004 	.word	0x20000004
 8001860:	24924924 	.word	0x24924924
 8001864:	12492492 	.word	0x12492492
 8001868:	00492492 	.word	0x00492492
 800186c:	00249249 	.word	0x00249249

08001870 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001870:	6803      	ldr	r3, [r0, #0]
 8001872:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001874:	4770      	bx	lr
	...

08001878 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001878:	b430      	push	{r4, r5}
 800187a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800187c:	2200      	movs	r2, #0
 800187e:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001880:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8001884:	2a01      	cmp	r2, #1
 8001886:	f000 808b 	beq.w	80019a0 <HAL_ADC_ConfigChannel+0x128>
 800188a:	4603      	mov	r3, r0
 800188c:	2201      	movs	r2, #1
 800188e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001892:	684a      	ldr	r2, [r1, #4]
 8001894:	2a06      	cmp	r2, #6
 8001896:	d829      	bhi.n	80018ec <HAL_ADC_ConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001898:	6805      	ldr	r5, [r0, #0]
 800189a:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800189c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80018a0:	3a05      	subs	r2, #5
 80018a2:	241f      	movs	r4, #31
 80018a4:	4094      	lsls	r4, r2
 80018a6:	ea20 0004 	bic.w	r0, r0, r4
 80018aa:	680c      	ldr	r4, [r1, #0]
 80018ac:	fa04 f202 	lsl.w	r2, r4, r2
 80018b0:	4302      	orrs	r2, r0
 80018b2:	636a      	str	r2, [r5, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018b4:	680a      	ldr	r2, [r1, #0]
 80018b6:	2a09      	cmp	r2, #9
 80018b8:	d938      	bls.n	800192c <HAL_ADC_ConfigChannel+0xb4>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018ba:	681d      	ldr	r5, [r3, #0]
 80018bc:	68e8      	ldr	r0, [r5, #12]
 80018be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80018c2:	3a1e      	subs	r2, #30
 80018c4:	2407      	movs	r4, #7
 80018c6:	4094      	lsls	r4, r2
 80018c8:	ea20 0004 	bic.w	r0, r0, r4
 80018cc:	688c      	ldr	r4, [r1, #8]
 80018ce:	fa04 f202 	lsl.w	r2, r4, r2
 80018d2:	4302      	orrs	r2, r0
 80018d4:	60ea      	str	r2, [r5, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018d6:	680a      	ldr	r2, [r1, #0]
 80018d8:	3a10      	subs	r2, #16
 80018da:	2a01      	cmp	r2, #1
 80018dc:	d934      	bls.n	8001948 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018de:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80018e6:	b002      	add	sp, #8
 80018e8:	bc30      	pop	{r4, r5}
 80018ea:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 80018ec:	2a0c      	cmp	r2, #12
 80018ee:	d80e      	bhi.n	800190e <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018f0:	6805      	ldr	r5, [r0, #0]
 80018f2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80018f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80018f8:	3a23      	subs	r2, #35	; 0x23
 80018fa:	241f      	movs	r4, #31
 80018fc:	4094      	lsls	r4, r2
 80018fe:	ea20 0004 	bic.w	r0, r0, r4
 8001902:	680c      	ldr	r4, [r1, #0]
 8001904:	fa04 f202 	lsl.w	r2, r4, r2
 8001908:	4302      	orrs	r2, r0
 800190a:	632a      	str	r2, [r5, #48]	; 0x30
 800190c:	e7d2      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800190e:	6805      	ldr	r5, [r0, #0]
 8001910:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001912:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001916:	3a41      	subs	r2, #65	; 0x41
 8001918:	241f      	movs	r4, #31
 800191a:	4094      	lsls	r4, r2
 800191c:	ea20 0004 	bic.w	r0, r0, r4
 8001920:	680c      	ldr	r4, [r1, #0]
 8001922:	fa04 f202 	lsl.w	r2, r4, r2
 8001926:	4302      	orrs	r2, r0
 8001928:	62ea      	str	r2, [r5, #44]	; 0x2c
 800192a:	e7c3      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800192c:	681d      	ldr	r5, [r3, #0]
 800192e:	6928      	ldr	r0, [r5, #16]
 8001930:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001934:	2407      	movs	r4, #7
 8001936:	4094      	lsls	r4, r2
 8001938:	ea20 0004 	bic.w	r0, r0, r4
 800193c:	688c      	ldr	r4, [r1, #8]
 800193e:	fa04 f202 	lsl.w	r2, r4, r2
 8001942:	4302      	orrs	r2, r0
 8001944:	612a      	str	r2, [r5, #16]
 8001946:	e7c6      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4816      	ldr	r0, [pc, #88]	; (80019a4 <HAL_ADC_ConfigChannel+0x12c>)
 800194c:	4282      	cmp	r2, r0
 800194e:	d005      	beq.n	800195c <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001952:	f042 0220 	orr.w	r2, r2, #32
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001958:	2001      	movs	r0, #1
 800195a:	e7c1      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800195c:	6890      	ldr	r0, [r2, #8]
 800195e:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8001962:	d11b      	bne.n	800199c <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001964:	6890      	ldr	r0, [r2, #8]
 8001966:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800196a:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800196c:	680a      	ldr	r2, [r1, #0]
 800196e:	2a10      	cmp	r2, #16
 8001970:	d001      	beq.n	8001976 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001972:	2000      	movs	r0, #0
 8001974:	e7b4      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001976:	4a0c      	ldr	r2, [pc, #48]	; (80019a8 <HAL_ADC_ConfigChannel+0x130>)
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	490c      	ldr	r1, [pc, #48]	; (80019ac <HAL_ADC_ConfigChannel+0x134>)
 800197c:	fba1 1202 	umull	r1, r2, r1, r2
 8001980:	0c92      	lsrs	r2, r2, #18
 8001982:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001986:	0052      	lsls	r2, r2, #1
 8001988:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800198a:	e002      	b.n	8001992 <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 800198c:	9a01      	ldr	r2, [sp, #4]
 800198e:	3a01      	subs	r2, #1
 8001990:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001992:	9a01      	ldr	r2, [sp, #4]
 8001994:	2a00      	cmp	r2, #0
 8001996:	d1f9      	bne.n	800198c <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001998:	2000      	movs	r0, #0
 800199a:	e7a1      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x68>
 800199c:	2000      	movs	r0, #0
 800199e:	e79f      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 80019a0:	2002      	movs	r0, #2
 80019a2:	e7a0      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x6e>
 80019a4:	40012400 	.word	0x40012400
 80019a8:	20000004 	.word	0x20000004
 80019ac:	431bde83 	.word	0x431bde83

080019b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019b0:	b530      	push	{r4, r5, lr}
 80019b2:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019b8:	6803      	ldr	r3, [r0, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	f012 0f01 	tst.w	r2, #1
 80019c0:	d132      	bne.n	8001a28 <ADC_Enable+0x78>
 80019c2:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <ADC_Enable+0x80>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a18      	ldr	r2, [pc, #96]	; (8001a34 <ADC_Enable+0x84>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0c9b      	lsrs	r3, r3, #18
 80019d8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80019da:	9b01      	ldr	r3, [sp, #4]
 80019dc:	b11b      	cbz	r3, 80019e6 <ADC_Enable+0x36>
    {
      wait_loop_index--;
 80019de:	9b01      	ldr	r3, [sp, #4]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	e7f9      	b.n	80019da <ADC_Enable+0x2a>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019e6:	f7ff fe7b 	bl	80016e0 <HAL_GetTick>
 80019ea:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f013 0f01 	tst.w	r3, #1
 80019f4:	d116      	bne.n	8001a24 <ADC_Enable+0x74>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019f6:	f7ff fe73 	bl	80016e0 <HAL_GetTick>
 80019fa:	1b43      	subs	r3, r0, r5
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d9f5      	bls.n	80019ec <ADC_Enable+0x3c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f013 0f01 	tst.w	r3, #1
 8001a08:	d1f0      	bne.n	80019ec <ADC_Enable+0x3c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a0c:	f043 0310 	orr.w	r3, r3, #16
 8001a10:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	62e3      	str	r3, [r4, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

          return HAL_ERROR;
 8001a20:	2001      	movs	r0, #1
 8001a22:	e002      	b.n	8001a2a <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a24:	2000      	movs	r0, #0
 8001a26:	e000      	b.n	8001a2a <ADC_Enable+0x7a>
 8001a28:	2000      	movs	r0, #0
}
 8001a2a:	b003      	add	sp, #12
 8001a2c:	bd30      	pop	{r4, r5, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000004 	.word	0x20000004
 8001a34:	431bde83 	.word	0x431bde83

08001a38 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8001a38:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d068      	beq.n	8001b12 <HAL_ADC_Start+0xda>
{
 8001a40:	b510      	push	{r4, lr}
 8001a42:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001a44:	2301      	movs	r3, #1
 8001a46:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001a4a:	f7ff ffb1 	bl	80019b0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	d15b      	bne.n	8001b0a <HAL_ADC_Start+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 8001a52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a60:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	4a2c      	ldr	r2, [pc, #176]	; (8001b18 <HAL_ADC_Start+0xe0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d027      	beq.n	8001aba <HAL_ADC_Start+0x82>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a6c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001a70:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001a78:	d005      	beq.n	8001a86 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a7c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001a80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a84:	62a2      	str	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a88:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8001a8c:	d02b      	beq.n	8001ae6 <HAL_ADC_Start+0xae>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a90:	f022 0206 	bic.w	r2, r2, #6
 8001a94:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8001a96:	2200      	movs	r2, #0
 8001a98:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a9c:	f06f 0202 	mvn.w	r2, #2
 8001aa0:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001aaa:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001aae:	d01d      	beq.n	8001aec <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	e02a      	b.n	8001b10 <HAL_ADC_Start+0xd8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aba:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001abe:	6852      	ldr	r2, [r2, #4]
 8001ac0:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001ac4:	d0d1      	beq.n	8001a6a <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ac6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ac8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001acc:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ace:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <HAL_ADC_Start+0xe4>)
 8001ad0:	6852      	ldr	r2, [r2, #4]
 8001ad2:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001ad6:	d0d6      	beq.n	8001a86 <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ad8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ada:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001ade:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ae2:	62a2      	str	r2, [r4, #40]	; 0x28
 8001ae4:	e7cf      	b.n	8001a86 <HAL_ADC_Start+0x4e>
      ADC_CLEAR_ERRORCODE(hadc);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001aea:	e7d4      	b.n	8001a96 <HAL_ADC_Start+0x5e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_ADC_Start+0xe0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d004      	beq.n	8001afc <HAL_ADC_Start+0xc4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	e009      	b.n	8001b10 <HAL_ADC_Start+0xd8>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001afc:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001b00:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b02:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001b06:	d1d3      	bne.n	8001ab0 <HAL_ADC_Start+0x78>
 8001b08:	e7f3      	b.n	8001af2 <HAL_ADC_Start+0xba>
    __HAL_UNLOCK(hadc);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001b10:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001b12:	2002      	movs	r0, #2
}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40012800 	.word	0x40012800
 8001b1c:	40012400 	.word	0x40012400

08001b20 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b20:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b22:	6803      	ldr	r3, [r0, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	f012 0f01 	tst.w	r2, #1
 8001b2a:	d101      	bne.n	8001b30 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b2c:	2000      	movs	r0, #0
}
 8001b2e:	bd38      	pop	{r3, r4, r5, pc}
 8001b30:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	f022 0201 	bic.w	r2, r2, #1
 8001b38:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001b3a:	f7ff fdd1 	bl	80016e0 <HAL_GetTick>
 8001b3e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f013 0f01 	tst.w	r3, #1
 8001b48:	d013      	beq.n	8001b72 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b4a:	f7ff fdc9 	bl	80016e0 <HAL_GetTick>
 8001b4e:	1b43      	subs	r3, r0, r5
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d9f5      	bls.n	8001b40 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f013 0f01 	tst.w	r3, #1
 8001b5c:	d0f0      	beq.n	8001b40 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b60:	f043 0310 	orr.w	r3, r3, #16
 8001b64:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8001b6e:	2001      	movs	r0, #1
 8001b70:	e7dd      	b.n	8001b2e <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8001b72:	2000      	movs	r0, #0
 8001b74:	e7db      	b.n	8001b2e <ADC_ConversionStop_Disable+0xe>
	...

08001b78 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d07b      	beq.n	8001c74 <HAL_ADC_Init+0xfc>
{
 8001b7c:	b570      	push	{r4, r5, r6, lr}
 8001b7e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b80:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d04d      	beq.n	8001c22 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7ff ffca 	bl	8001b20 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b8e:	f013 0310 	ands.w	r3, r3, #16
 8001b92:	d169      	bne.n	8001c68 <HAL_ADC_Init+0xf0>
 8001b94:	2800      	cmp	r0, #0
 8001b96:	d167      	bne.n	8001c68 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 8001b98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b9a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001b9e:	f022 0202 	bic.w	r2, r2, #2
 8001ba2:	f042 0202 	orr.w	r2, r2, #2
 8001ba6:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ba8:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001baa:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bac:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bae:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bb0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bb4:	68a5      	ldr	r5, [r4, #8]
 8001bb6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001bba:	d002      	beq.n	8001bc2 <HAL_ADC_Init+0x4a>
 8001bbc:	2d01      	cmp	r5, #1
 8001bbe:	d036      	beq.n	8001c2e <HAL_ADC_Init+0xb6>
 8001bc0:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bc2:	7d26      	ldrb	r6, [r4, #20]
 8001bc4:	2e01      	cmp	r6, #1
 8001bc6:	d035      	beq.n	8001c34 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8001bc8:	6826      	ldr	r6, [r4, #0]
 8001bca:	6871      	ldr	r1, [r6, #4]
 8001bcc:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8001bd0:	4329      	orrs	r1, r5
 8001bd2:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001bd4:	6825      	ldr	r5, [r4, #0]
 8001bd6:	68ae      	ldr	r6, [r5, #8]
 8001bd8:	4927      	ldr	r1, [pc, #156]	; (8001c78 <HAL_ADC_Init+0x100>)
 8001bda:	4031      	ands	r1, r6
 8001bdc:	4311      	orrs	r1, r2
 8001bde:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001be0:	68a1      	ldr	r1, [r4, #8]
 8001be2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001be6:	d001      	beq.n	8001bec <HAL_ADC_Init+0x74>
 8001be8:	2901      	cmp	r1, #1
 8001bea:	d102      	bne.n	8001bf2 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bec:	6923      	ldr	r3, [r4, #16]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001bf2:	6825      	ldr	r5, [r4, #0]
 8001bf4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8001bf6:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	6899      	ldr	r1, [r3, #8]
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_ADC_Init+0x104>)
 8001c04:	400b      	ands	r3, r1
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d025      	beq.n	8001c56 <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c0c:	f023 0312 	bic.w	r3, r3, #18
 8001c10:	f043 0310 	orr.w	r3, r3, #16
 8001c14:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8001c1e:	2001      	movs	r0, #1
 8001c20:	e027      	b.n	8001c72 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8001c22:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001c24:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001c28:	f7fe fd30 	bl	800068c <HAL_ADC_MspInit>
 8001c2c:	e7ab      	b.n	8001b86 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c2e:	f44f 7580 	mov.w	r5, #256	; 0x100
 8001c32:	e7c6      	b.n	8001bc2 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c34:	b931      	cbnz	r1, 8001c44 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c36:	69a1      	ldr	r1, [r4, #24]
 8001c38:	3901      	subs	r1, #1
 8001c3a:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8001c3e:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8001c42:	e7c1      	b.n	8001bc8 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c44:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001c46:	f041 0120 	orr.w	r1, r1, #32
 8001c4a:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c4e:	f041 0101 	orr.w	r1, r1, #1
 8001c52:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001c54:	e7b8      	b.n	8001bc8 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 8001c56:	2300      	movs	r3, #0
 8001c58:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001c5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c5c:	f023 0303 	bic.w	r3, r3, #3
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c66:	e004      	b.n	8001c72 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c6a:	f043 0310 	orr.w	r3, r3, #16
 8001c6e:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8001c70:	2001      	movs	r0, #1
}
 8001c72:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001c74:	2001      	movs	r0, #1
}
 8001c76:	4770      	bx	lr
 8001c78:	ffe1f7fd 	.word	0xffe1f7fd
 8001c7c:	ff1f0efe 	.word	0xff1f0efe

08001c80 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8001c80:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d013      	beq.n	8001cb0 <HAL_ADC_Stop+0x30>
{
 8001c88:	b510      	push	{r4, lr}
 8001c8a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c92:	f7ff ff45 	bl	8001b20 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8001c96:	b938      	cbnz	r0, 8001ca8 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8001c98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8001cae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001cb0:	2002      	movs	r0, #2
}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001cb6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc0:	0200      	lsls	r0, r0, #8
 8001cc2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001cd0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_NVIC_SetPriority+0x60>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce2:	f1c3 0407 	rsb	r4, r3, #7
 8001ce6:	2c04      	cmp	r4, #4
 8001ce8:	bf28      	it	cs
 8001cea:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cec:	1d1d      	adds	r5, r3, #4
 8001cee:	2d06      	cmp	r5, #6
 8001cf0:	d918      	bls.n	8001d24 <HAL_NVIC_SetPriority+0x4c>
 8001cf2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001cf8:	fa05 f404 	lsl.w	r4, r5, r4
 8001cfc:	ea21 0104 	bic.w	r1, r1, r4
 8001d00:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d02:	fa05 f303 	lsl.w	r3, r5, r3
 8001d06:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	db0b      	blt.n	8001d28 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	0109      	lsls	r1, r1, #4
 8001d12:	b2c9      	uxtb	r1, r1
 8001d14:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001d18:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001d1c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d20:	bc30      	pop	{r4, r5}
 8001d22:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d24:	2300      	movs	r3, #0
 8001d26:	e7e5      	b.n	8001cf4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	f000 000f 	and.w	r0, r0, #15
 8001d2c:	0109      	lsls	r1, r1, #4
 8001d2e:	b2c9      	uxtb	r1, r1
 8001d30:	4b02      	ldr	r3, [pc, #8]	; (8001d3c <HAL_NVIC_SetPriority+0x64>)
 8001d32:	5419      	strb	r1, [r3, r0]
 8001d34:	e7f4      	b.n	8001d20 <HAL_NVIC_SetPriority+0x48>
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00
 8001d3c:	e000ed14 	.word	0xe000ed14

08001d40 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d40:	2800      	cmp	r0, #0
 8001d42:	db07      	blt.n	8001d54 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d44:	f000 021f 	and.w	r2, r0, #31
 8001d48:	0940      	lsrs	r0, r0, #5
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	4093      	lsls	r3, r2
 8001d4e:	4a02      	ldr	r2, [pc, #8]	; (8001d58 <HAL_NVIC_EnableIRQ+0x18>)
 8001d50:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	3801      	subs	r0, #1
 8001d5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001d62:	d20a      	bcs.n	8001d7a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_SYSTICK_Config+0x24>)
 8001d66:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <HAL_SYSTICK_Config+0x28>)
 8001d6a:	21f0      	movs	r1, #240	; 0xf0
 8001d6c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	2000      	movs	r0, #0
 8001d72:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d88:	b4f0      	push	{r4, r5, r6, r7}
 8001d8a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d8c:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 8001d8e:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d90:	e0a3      	b.n	8001eda <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d92:	4f7f      	ldr	r7, [pc, #508]	; (8001f90 <HAL_GPIO_Init+0x208>)
 8001d94:	42bb      	cmp	r3, r7
 8001d96:	d010      	beq.n	8001dba <HAL_GPIO_Init+0x32>
 8001d98:	d907      	bls.n	8001daa <HAL_GPIO_Init+0x22>
 8001d9a:	4f7e      	ldr	r7, [pc, #504]	; (8001f94 <HAL_GPIO_Init+0x20c>)
 8001d9c:	42bb      	cmp	r3, r7
 8001d9e:	d00c      	beq.n	8001dba <HAL_GPIO_Init+0x32>
 8001da0:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001da4:	42bb      	cmp	r3, r7
 8001da6:	d008      	beq.n	8001dba <HAL_GPIO_Init+0x32>
 8001da8:	e013      	b.n	8001dd2 <HAL_GPIO_Init+0x4a>
 8001daa:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001dae:	42bb      	cmp	r3, r7
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x32>
 8001db2:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 8001db6:	42bb      	cmp	r3, r7
 8001db8:	d107      	bne.n	8001dca <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dba:	688b      	ldr	r3, [r1, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d058      	beq.n	8001e72 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d051      	beq.n	8001e68 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001dc4:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc6:	2508      	movs	r5, #8
 8001dc8:	e003      	b.n	8001dd2 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8001dca:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8001dce:	42bb      	cmp	r3, r7
 8001dd0:	d0f3      	beq.n	8001dba <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dd2:	2eff      	cmp	r6, #255	; 0xff
 8001dd4:	d84f      	bhi.n	8001e76 <HAL_GPIO_Init+0xee>
 8001dd6:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dd8:	2eff      	cmp	r6, #255	; 0xff
 8001dda:	d84f      	bhi.n	8001e7c <HAL_GPIO_Init+0xf4>
 8001ddc:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dde:	f8dc 3000 	ldr.w	r3, [ip]
 8001de2:	270f      	movs	r7, #15
 8001de4:	4097      	lsls	r7, r2
 8001de6:	ea23 0307 	bic.w	r3, r3, r7
 8001dea:	fa05 f202 	lsl.w	r2, r5, r2
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df4:	684b      	ldr	r3, [r1, #4]
 8001df6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001dfa:	d06d      	beq.n	8001ed8 <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dfc:	4b66      	ldr	r3, [pc, #408]	; (8001f98 <HAL_GPIO_Init+0x210>)
 8001dfe:	699a      	ldr	r2, [r3, #24]
 8001e00:	f042 0201 	orr.w	r2, r2, #1
 8001e04:	619a      	str	r2, [r3, #24]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001e10:	08a2      	lsrs	r2, r4, #2
 8001e12:	1c97      	adds	r7, r2, #2
 8001e14:	4b61      	ldr	r3, [pc, #388]	; (8001f9c <HAL_GPIO_Init+0x214>)
 8001e16:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e1a:	f004 0703 	and.w	r7, r4, #3
 8001e1e:	00bf      	lsls	r7, r7, #2
 8001e20:	f04f 0c0f 	mov.w	ip, #15
 8001e24:	fa0c fc07 	lsl.w	ip, ip, r7
 8001e28:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e2c:	4b5c      	ldr	r3, [pc, #368]	; (8001fa0 <HAL_GPIO_Init+0x218>)
 8001e2e:	4298      	cmp	r0, r3
 8001e30:	d02a      	beq.n	8001e88 <HAL_GPIO_Init+0x100>
 8001e32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e36:	4298      	cmp	r0, r3
 8001e38:	f000 808a 	beq.w	8001f50 <HAL_GPIO_Init+0x1c8>
 8001e3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e40:	4298      	cmp	r0, r3
 8001e42:	f000 8087 	beq.w	8001f54 <HAL_GPIO_Init+0x1cc>
 8001e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e4a:	4298      	cmp	r0, r3
 8001e4c:	d01a      	beq.n	8001e84 <HAL_GPIO_Init+0xfc>
 8001e4e:	2304      	movs	r3, #4
 8001e50:	e01b      	b.n	8001e8a <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e52:	68cd      	ldr	r5, [r1, #12]
          break;
 8001e54:	e7bd      	b.n	8001dd2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e56:	68cd      	ldr	r5, [r1, #12]
 8001e58:	3504      	adds	r5, #4
          break;
 8001e5a:	e7ba      	b.n	8001dd2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e5c:	68cd      	ldr	r5, [r1, #12]
 8001e5e:	3508      	adds	r5, #8
          break;
 8001e60:	e7b7      	b.n	8001dd2 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e62:	68cd      	ldr	r5, [r1, #12]
 8001e64:	350c      	adds	r5, #12
          break;
 8001e66:	e7b4      	b.n	8001dd2 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8001e68:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e6a:	2508      	movs	r5, #8
 8001e6c:	e7b1      	b.n	8001dd2 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e6e:	2500      	movs	r5, #0
 8001e70:	e7af      	b.n	8001dd2 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e72:	2504      	movs	r5, #4
 8001e74:	e7ad      	b.n	8001dd2 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e76:	f100 0c04 	add.w	ip, r0, #4
 8001e7a:	e7ad      	b.n	8001dd8 <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e7c:	f1a4 0208 	sub.w	r2, r4, #8
 8001e80:	0092      	lsls	r2, r2, #2
 8001e82:	e7ac      	b.n	8001dde <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e84:	2303      	movs	r3, #3
 8001e86:	e000      	b.n	8001e8a <HAL_GPIO_Init+0x102>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	40bb      	lsls	r3, r7
 8001e8c:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8001e90:	3202      	adds	r2, #2
 8001e92:	4f42      	ldr	r7, [pc, #264]	; (8001f9c <HAL_GPIO_Init+0x214>)
 8001e94:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e98:	684b      	ldr	r3, [r1, #4]
 8001e9a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001e9e:	d05b      	beq.n	8001f58 <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ea0:	4a40      	ldr	r2, [pc, #256]	; (8001fa4 <HAL_GPIO_Init+0x21c>)
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	4333      	orrs	r3, r6
 8001ea6:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea8:	684b      	ldr	r3, [r1, #4]
 8001eaa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001eae:	d059      	beq.n	8001f64 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eb0:	4a3c      	ldr	r2, [pc, #240]	; (8001fa4 <HAL_GPIO_Init+0x21c>)
 8001eb2:	6853      	ldr	r3, [r2, #4]
 8001eb4:	4333      	orrs	r3, r6
 8001eb6:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb8:	684b      	ldr	r3, [r1, #4]
 8001eba:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001ebe:	d057      	beq.n	8001f70 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ec0:	4a38      	ldr	r2, [pc, #224]	; (8001fa4 <HAL_GPIO_Init+0x21c>)
 8001ec2:	6893      	ldr	r3, [r2, #8]
 8001ec4:	4333      	orrs	r3, r6
 8001ec6:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec8:	684b      	ldr	r3, [r1, #4]
 8001eca:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001ece:	d055      	beq.n	8001f7c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ed0:	4a34      	ldr	r2, [pc, #208]	; (8001fa4 <HAL_GPIO_Init+0x21c>)
 8001ed2:	68d3      	ldr	r3, [r2, #12]
 8001ed4:	431e      	orrs	r6, r3
 8001ed6:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8001ed8:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	680b      	ldr	r3, [r1, #0]
 8001edc:	fa33 f204 	lsrs.w	r2, r3, r4
 8001ee0:	d052      	beq.n	8001f88 <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee6:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 8001eea:	ea32 0303 	bics.w	r3, r2, r3
 8001eee:	d1f3      	bne.n	8001ed8 <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 8001ef0:	684b      	ldr	r3, [r1, #4]
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	f63f af4d 	bhi.w	8001d92 <HAL_GPIO_Init+0xa>
 8001ef8:	2b12      	cmp	r3, #18
 8001efa:	f63f af6a 	bhi.w	8001dd2 <HAL_GPIO_Init+0x4a>
 8001efe:	a701      	add	r7, pc, #4	; (adr r7, 8001f04 <HAL_GPIO_Init+0x17c>)
 8001f00:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 8001f04:	08001dbb 	.word	0x08001dbb
 8001f08:	08001e53 	.word	0x08001e53
 8001f0c:	08001e5d 	.word	0x08001e5d
 8001f10:	08001e6f 	.word	0x08001e6f
 8001f14:	08001dd3 	.word	0x08001dd3
 8001f18:	08001dd3 	.word	0x08001dd3
 8001f1c:	08001dd3 	.word	0x08001dd3
 8001f20:	08001dd3 	.word	0x08001dd3
 8001f24:	08001dd3 	.word	0x08001dd3
 8001f28:	08001dd3 	.word	0x08001dd3
 8001f2c:	08001dd3 	.word	0x08001dd3
 8001f30:	08001dd3 	.word	0x08001dd3
 8001f34:	08001dd3 	.word	0x08001dd3
 8001f38:	08001dd3 	.word	0x08001dd3
 8001f3c:	08001dd3 	.word	0x08001dd3
 8001f40:	08001dd3 	.word	0x08001dd3
 8001f44:	08001dd3 	.word	0x08001dd3
 8001f48:	08001e57 	.word	0x08001e57
 8001f4c:	08001e63 	.word	0x08001e63
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f50:	2301      	movs	r3, #1
 8001f52:	e79a      	b.n	8001e8a <HAL_GPIO_Init+0x102>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e798      	b.n	8001e8a <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f58:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <HAL_GPIO_Init+0x21c>)
 8001f5a:	6813      	ldr	r3, [r2, #0]
 8001f5c:	ea23 0306 	bic.w	r3, r3, r6
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e7a1      	b.n	8001ea8 <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f64:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <HAL_GPIO_Init+0x21c>)
 8001f66:	6853      	ldr	r3, [r2, #4]
 8001f68:	ea23 0306 	bic.w	r3, r3, r6
 8001f6c:	6053      	str	r3, [r2, #4]
 8001f6e:	e7a3      	b.n	8001eb8 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f70:	4a0c      	ldr	r2, [pc, #48]	; (8001fa4 <HAL_GPIO_Init+0x21c>)
 8001f72:	6893      	ldr	r3, [r2, #8]
 8001f74:	ea23 0306 	bic.w	r3, r3, r6
 8001f78:	6093      	str	r3, [r2, #8]
 8001f7a:	e7a5      	b.n	8001ec8 <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f7c:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_GPIO_Init+0x21c>)
 8001f7e:	68d3      	ldr	r3, [r2, #12]
 8001f80:	ea23 0606 	bic.w	r6, r3, r6
 8001f84:	60d6      	str	r6, [r2, #12]
 8001f86:	e7a7      	b.n	8001ed8 <HAL_GPIO_Init+0x150>
  }
}
 8001f88:	b002      	add	sp, #8
 8001f8a:	bcf0      	pop	{r4, r5, r6, r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	10220000 	.word	0x10220000
 8001f94:	10310000 	.word	0x10310000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40010800 	.word	0x40010800
 8001fa4:	40010400 	.word	0x40010400

08001fa8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fa8:	6883      	ldr	r3, [r0, #8]
 8001faa:	4219      	tst	r1, r3
 8001fac:	d001      	beq.n	8001fb2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001fae:	2001      	movs	r0, #1
 8001fb0:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fb2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb6:	b10a      	cbz	r2, 8001fbc <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb8:	6101      	str	r1, [r0, #16]
 8001fba:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fbc:	0409      	lsls	r1, r1, #16
 8001fbe:	6101      	str	r1, [r0, #16]
  }
}
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fc2:	b570      	push	{r4, r5, r6, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fc4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8001fc8:	d043      	beq.n	8002052 <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fca:	6804      	ldr	r4, [r0, #0]
 8001fcc:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	780d      	ldrb	r5, [r1, #0]
 8001fd4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8001fd8:	3302      	adds	r3, #2
 8001fda:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8001fde:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 8001fe2:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8001fe6:	698b      	ldr	r3, [r1, #24]
 8001fe8:	42a3      	cmp	r3, r4
 8001fea:	d328      	bcc.n	800203e <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 8001fec:	1b1b      	subs	r3, r3, r4
 8001fee:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8001ff0:	698b      	ldr	r3, [r1, #24]
 8001ff2:	b97b      	cbnz	r3, 8002014 <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ff4:	6806      	ldr	r6, [r0, #0]
 8001ff6:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002004:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002010:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002014:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002018:	d00e      	beq.n	8002038 <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800201a:	6802      	ldr	r2, [r0, #0]
 800201c:	780d      	ldrb	r5, [r1, #0]
 800201e:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8002022:	b29b      	uxth	r3, r3
 8002024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002030:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002034:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8002038:	b924      	cbnz	r4, 8002044 <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 800203a:	4620      	mov	r0, r4
 800203c:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	618b      	str	r3, [r1, #24]
 8002042:	e7d5      	b.n	8001ff0 <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002044:	4623      	mov	r3, r4
 8002046:	890a      	ldrh	r2, [r1, #8]
 8002048:	6949      	ldr	r1, [r1, #20]
 800204a:	6800      	ldr	r0, [r0, #0]
 800204c:	f002 fa22 	bl	8004494 <USB_ReadPMA>
 8002050:	e7f3      	b.n	800203a <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002052:	6804      	ldr	r4, [r0, #0]
 8002054:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8002058:	b29b      	uxth	r3, r3
 800205a:	780d      	ldrb	r5, [r1, #0]
 800205c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002060:	3306      	adds	r3, #6
 8002062:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002066:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 800206a:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 800206e:	698b      	ldr	r3, [r1, #24]
 8002070:	42a3      	cmp	r3, r4
 8002072:	d32e      	bcc.n	80020d2 <HAL_PCD_EP_DB_Receive+0x110>
      ep->xfer_len -= count;
 8002074:	1b1b      	subs	r3, r3, r4
 8002076:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8002078:	698b      	ldr	r3, [r1, #24]
 800207a:	b97b      	cbnz	r3, 800209c <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800207c:	6806      	ldr	r6, [r0, #0]
 800207e:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002090:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002098:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800209c:	f012 0f40 	tst.w	r2, #64	; 0x40
 80020a0:	d10e      	bne.n	80020c0 <HAL_PCD_EP_DB_Receive+0xfe>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020a2:	6802      	ldr	r2, [r0, #0]
 80020a4:	780d      	ldrb	r5, [r1, #0]
 80020a6:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020bc:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    if (count != 0U)
 80020c0:	2c00      	cmp	r4, #0
 80020c2:	d0ba      	beq.n	800203a <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020c4:	4623      	mov	r3, r4
 80020c6:	894a      	ldrh	r2, [r1, #10]
 80020c8:	6949      	ldr	r1, [r1, #20]
 80020ca:	6800      	ldr	r0, [r0, #0]
 80020cc:	f002 f9e2 	bl	8004494 <USB_ReadPMA>
 80020d0:	e7b3      	b.n	800203a <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	618b      	str	r3, [r1, #24]
 80020d6:	e7cf      	b.n	8002078 <HAL_PCD_EP_DB_Receive+0xb6>

080020d8 <HAL_PCD_Init>:
{
 80020d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020da:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80020dc:	2800      	cmp	r0, #0
 80020de:	d07f      	beq.n	80021e0 <HAL_PCD_Init+0x108>
 80020e0:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020e2:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80020e6:	b1db      	cbz	r3, 8002120 <HAL_PCD_Init+0x48>
  hpcd->State = HAL_PCD_STATE_BUSY;
 80020e8:	2303      	movs	r3, #3
 80020ea:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80020ee:	6820      	ldr	r0, [r4, #0]
 80020f0:	f001 fb20 	bl	8003734 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f4:	4625      	mov	r5, r4
 80020f6:	f855 7b10 	ldr.w	r7, [r5], #16
 80020fa:	466e      	mov	r6, sp
 80020fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002100:	682b      	ldr	r3, [r5, #0]
 8002102:	6033      	str	r3, [r6, #0]
 8002104:	1d23      	adds	r3, r4, #4
 8002106:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002108:	4638      	mov	r0, r7
 800210a:	f001 fb03 	bl	8003714 <USB_CoreInit>
 800210e:	4605      	mov	r5, r0
 8002110:	b158      	cbz	r0, 800212a <HAL_PCD_Init+0x52>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002112:	2302      	movs	r3, #2
 8002114:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8002118:	2501      	movs	r5, #1
}
 800211a:	4628      	mov	r0, r5
 800211c:	b007      	add	sp, #28
 800211e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002120:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8002124:	f7fe fc1c 	bl	8000960 <HAL_PCD_MspInit>
 8002128:	e7de      	b.n	80020e8 <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800212a:	2100      	movs	r1, #0
 800212c:	6820      	ldr	r0, [r4, #0]
 800212e:	f001 fb0b 	bl	8003748 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002132:	462b      	mov	r3, r5
 8002134:	e019      	b.n	800216a <HAL_PCD_Init+0x92>
    hpcd->IN_ep[i].is_in = 1U;
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800213c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002140:	2001      	movs	r0, #1
 8002142:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 8002144:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002148:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800214c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002150:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002154:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002156:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 800215a:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800215e:	2000      	movs	r0, #0
 8002160:	70f0      	strb	r0, [r6, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002162:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002164:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8002166:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002168:	b2d3      	uxtb	r3, r2
 800216a:	6861      	ldr	r1, [r4, #4]
 800216c:	428b      	cmp	r3, r1
 800216e:	d3e2      	bcc.n	8002136 <HAL_PCD_Init+0x5e>
 8002170:	e016      	b.n	80021a0 <HAL_PCD_Init+0xc8>
    hpcd->OUT_ep[i].is_in = 0U;
 8002172:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002176:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8002180:	f883 5168 	strb.w	r5, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002184:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002188:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800218c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002190:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8002194:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002198:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800219c:	3501      	adds	r5, #1
 800219e:	b2ed      	uxtb	r5, r5
 80021a0:	42a9      	cmp	r1, r5
 80021a2:	d8e6      	bhi.n	8002172 <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021a4:	4625      	mov	r5, r4
 80021a6:	f855 7b10 	ldr.w	r7, [r5], #16
 80021aa:	466e      	mov	r6, sp
 80021ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80021b0:	682b      	ldr	r3, [r5, #0]
 80021b2:	6033      	str	r3, [r6, #0]
 80021b4:	1d23      	adds	r3, r4, #4
 80021b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b8:	4638      	mov	r0, r7
 80021ba:	f001 fac7 	bl	800374c <USB_DevInit>
 80021be:	4605      	mov	r5, r0
 80021c0:	b120      	cbz	r0, 80021cc <HAL_PCD_Init+0xf4>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021c2:	2302      	movs	r3, #2
 80021c4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80021c8:	2501      	movs	r5, #1
 80021ca:	e7a6      	b.n	800211a <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80021d2:	2301      	movs	r3, #1
 80021d4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80021d8:	6820      	ldr	r0, [r4, #0]
 80021da:	f001 fce7 	bl	8003bac <USB_DevDisconnect>
  return HAL_OK;
 80021de:	e79c      	b.n	800211a <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 80021e0:	2501      	movs	r5, #1
 80021e2:	e79a      	b.n	800211a <HAL_PCD_Init+0x42>

080021e4 <HAL_PCD_Start>:
{
 80021e4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80021e6:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d011      	beq.n	8002212 <HAL_PCD_Start+0x2e>
 80021ee:	4604      	mov	r4, r0
 80021f0:	2501      	movs	r5, #1
 80021f2:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80021f6:	6800      	ldr	r0, [r0, #0]
 80021f8:	f001 fa93 	bl	8003722 <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80021fc:	4629      	mov	r1, r5
 80021fe:	4620      	mov	r0, r4
 8002200:	f7fe fcad 	bl	8000b5e <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 8002204:	6820      	ldr	r0, [r4, #0]
 8002206:	f001 fccf 	bl	8003ba8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800220a:	2000      	movs	r0, #0
 800220c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002210:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8002212:	2002      	movs	r0, #2
 8002214:	e7fc      	b.n	8002210 <HAL_PCD_Start+0x2c>

08002216 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002216:	b570      	push	{r4, r5, r6, lr}
 8002218:	4605      	mov	r5, r0
 800221a:	460c      	mov	r4, r1
 800221c:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800221e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002222:	f000 810d 	beq.w	8002440 <HAL_PCD_EP_DB_Transmit+0x22a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002226:	6802      	ldr	r2, [r0, #0]
 8002228:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800222c:	b29b      	uxth	r3, r3
 800222e:	7809      	ldrb	r1, [r1, #0]
 8002230:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002234:	3302      	adds	r3, #2
 8002236:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800223a:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 800223e:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxByteNbre)
 8002242:	69a3      	ldr	r3, [r4, #24]
 8002244:	4293      	cmp	r3, r2
 8002246:	d952      	bls.n	80022ee <HAL_PCD_EP_DB_Transmit+0xd8>
    {
      ep->xfer_len -= TxByteNbre;
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	61a3      	str	r3, [r4, #24]
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800224c:	69a3      	ldr	r3, [r4, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d16a      	bne.n	8002328 <HAL_PCD_EP_DB_Transmit+0x112>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002252:	7863      	ldrb	r3, [r4, #1]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d14d      	bne.n	80022f4 <HAL_PCD_EP_DB_Transmit+0xde>
 8002258:	682b      	ldr	r3, [r5, #0]
 800225a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800225e:	b292      	uxth	r2, r2
 8002260:	4413      	add	r3, r2
 8002262:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8002266:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 800226a:	b29b      	uxth	r3, r3
 800226c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002270:	b29b      	uxth	r3, r3
 8002272:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 8002276:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 800227a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800227e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002282:	b29b      	uxth	r3, r3
 8002284:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002288:	682b      	ldr	r3, [r5, #0]
 800228a:	7862      	ldrb	r2, [r4, #1]
 800228c:	2a00      	cmp	r2, #0
 800228e:	d13e      	bne.n	800230e <HAL_PCD_EP_DB_Transmit+0xf8>
 8002290:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002294:	b292      	uxth	r2, r2
 8002296:	4413      	add	r3, r2
 8002298:	7822      	ldrb	r2, [r4, #0]
 800229a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800229e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80022a2:	b292      	uxth	r2, r2
 80022a4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80022a8:	b292      	uxth	r2, r2
 80022aa:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80022ae:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80022b2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80022b6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80022ba:	b292      	uxth	r2, r2
 80022bc:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022c0:	7821      	ldrb	r1, [r4, #0]
 80022c2:	4628      	mov	r0, r5
 80022c4:	f7fe fb80 	bl	80009c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022c8:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80022cc:	d041      	beq.n	8002352 <HAL_PCD_EP_DB_Transmit+0x13c>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022ce:	682a      	ldr	r2, [r5, #0]
 80022d0:	7821      	ldrb	r1, [r4, #0]
 80022d2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80022ec:	e031      	b.n	8002352 <HAL_PCD_EP_DB_Transmit+0x13c>
      ep->xfer_len = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61a3      	str	r3, [r4, #24]
 80022f2:	e7ab      	b.n	800224c <HAL_PCD_EP_DB_Transmit+0x36>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d1c7      	bne.n	8002288 <HAL_PCD_EP_DB_Transmit+0x72>
 80022f8:	682b      	ldr	r3, [r5, #0]
 80022fa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80022fe:	b292      	uxth	r2, r2
 8002300:	4413      	add	r3, r2
 8002302:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8002306:	2300      	movs	r3, #0
 8002308:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 800230c:	e7bc      	b.n	8002288 <HAL_PCD_EP_DB_Transmit+0x72>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800230e:	2a01      	cmp	r2, #1
 8002310:	d1d6      	bne.n	80022c0 <HAL_PCD_EP_DB_Transmit+0xaa>
 8002312:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002316:	b292      	uxth	r2, r2
 8002318:	4413      	add	r3, r2
 800231a:	7822      	ldrb	r2, [r4, #0]
 800231c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002320:	2200      	movs	r2, #0
 8002322:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002326:	e7cb      	b.n	80022c0 <HAL_PCD_EP_DB_Transmit+0xaa>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002328:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800232c:	d00d      	beq.n	800234a <HAL_PCD_EP_DB_Transmit+0x134>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800232e:	6828      	ldr	r0, [r5, #0]
 8002330:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002334:	b29b      	uxth	r3, r3
 8002336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800233a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800233e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002346:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800234a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800234e:	2b01      	cmp	r3, #1
 8002350:	d012      	beq.n	8002378 <HAL_PCD_EP_DB_Transmit+0x162>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002352:	682a      	ldr	r2, [r5, #0]
 8002354:	7821      	ldrb	r1, [r4, #0]
 8002356:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800235a:	b29b      	uxth	r3, r3
 800235c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002364:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002370:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8002374:	2000      	movs	r0, #0
 8002376:	bd70      	pop	{r4, r5, r6, pc}
        ep->xfer_buff += TxByteNbre;
 8002378:	6963      	ldr	r3, [r4, #20]
 800237a:	4413      	add	r3, r2
 800237c:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 800237e:	69e3      	ldr	r3, [r4, #28]
 8002380:	4413      	add	r3, r2
 8002382:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8002384:	6a21      	ldr	r1, [r4, #32]
 8002386:	6923      	ldr	r3, [r4, #16]
 8002388:	4299      	cmp	r1, r3
 800238a:	d31f      	bcc.n	80023cc <HAL_PCD_EP_DB_Transmit+0x1b6>
          ep->xfer_len_db -= len;
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002390:	7862      	ldrb	r2, [r4, #1]
 8002392:	2a00      	cmp	r2, #0
 8002394:	d13f      	bne.n	8002416 <HAL_PCD_EP_DB_Transmit+0x200>
 8002396:	682a      	ldr	r2, [r5, #0]
 8002398:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800239c:	b289      	uxth	r1, r1
 800239e:	440a      	add	r2, r1
 80023a0:	7821      	ldrb	r1, [r4, #0]
 80023a2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80023a6:	b9eb      	cbnz	r3, 80023e4 <HAL_PCD_EP_DB_Transmit+0x1ce>
 80023a8:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 80023ac:	b289      	uxth	r1, r1
 80023ae:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80023b2:	b289      	uxth	r1, r1
 80023b4:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 80023b8:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 80023bc:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80023c0:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80023c4:	b289      	uxth	r1, r1
 80023c6:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 80023ca:	e026      	b.n	800241a <HAL_PCD_EP_DB_Transmit+0x204>
        else if (ep->xfer_len_db == 0U)
 80023cc:	b921      	cbnz	r1, 80023d8 <HAL_PCD_EP_DB_Transmit+0x1c2>
          ep->xfer_fill_db = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 80023d4:	4613      	mov	r3, r2
 80023d6:	e7db      	b.n	8002390 <HAL_PCD_EP_DB_Transmit+0x17a>
          ep->xfer_fill_db = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 80023de:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 80023e0:	460b      	mov	r3, r1
 80023e2:	e7d5      	b.n	8002390 <HAL_PCD_EP_DB_Transmit+0x17a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023e4:	2b3e      	cmp	r3, #62	; 0x3e
 80023e6:	d809      	bhi.n	80023fc <HAL_PCD_EP_DB_Transmit+0x1e6>
 80023e8:	0859      	lsrs	r1, r3, #1
 80023ea:	f013 0f01 	tst.w	r3, #1
 80023ee:	d000      	beq.n	80023f2 <HAL_PCD_EP_DB_Transmit+0x1dc>
 80023f0:	3101      	adds	r1, #1
 80023f2:	0289      	lsls	r1, r1, #10
 80023f4:	b289      	uxth	r1, r1
 80023f6:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 80023fa:	e00e      	b.n	800241a <HAL_PCD_EP_DB_Transmit+0x204>
 80023fc:	0959      	lsrs	r1, r3, #5
 80023fe:	f013 0f1f 	tst.w	r3, #31
 8002402:	d100      	bne.n	8002406 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002404:	3901      	subs	r1, #1
 8002406:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800240a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800240e:	b289      	uxth	r1, r1
 8002410:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8002414:	e001      	b.n	800241a <HAL_PCD_EP_DB_Transmit+0x204>
 8002416:	2a01      	cmp	r2, #1
 8002418:	d006      	beq.n	8002428 <HAL_PCD_EP_DB_Transmit+0x212>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800241a:	b29b      	uxth	r3, r3
 800241c:	8922      	ldrh	r2, [r4, #8]
 800241e:	6961      	ldr	r1, [r4, #20]
 8002420:	6828      	ldr	r0, [r5, #0]
 8002422:	f001 fbcb 	bl	8003bbc <USB_WritePMA>
 8002426:	e794      	b.n	8002352 <HAL_PCD_EP_DB_Transmit+0x13c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002428:	682a      	ldr	r2, [r5, #0]
 800242a:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800242e:	b289      	uxth	r1, r1
 8002430:	440a      	add	r2, r1
 8002432:	7821      	ldrb	r1, [r4, #0]
 8002434:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002438:	b299      	uxth	r1, r3
 800243a:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 800243e:	e7ec      	b.n	800241a <HAL_PCD_EP_DB_Transmit+0x204>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002440:	6802      	ldr	r2, [r0, #0]
 8002442:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002446:	b29b      	uxth	r3, r3
 8002448:	7809      	ldrb	r1, [r1, #0]
 800244a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800244e:	3306      	adds	r3, #6
 8002450:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002454:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8002458:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 800245c:	69a3      	ldr	r3, [r4, #24]
 800245e:	4293      	cmp	r3, r2
 8002460:	d353      	bcc.n	800250a <HAL_PCD_EP_DB_Transmit+0x2f4>
      ep->xfer_len -= TxByteNbre;
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8002466:	69a3      	ldr	r3, [r4, #24]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d16b      	bne.n	8002544 <HAL_PCD_EP_DB_Transmit+0x32e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800246c:	7863      	ldrb	r3, [r4, #1]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d14e      	bne.n	8002510 <HAL_PCD_EP_DB_Transmit+0x2fa>
 8002472:	682b      	ldr	r3, [r5, #0]
 8002474:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002478:	b292      	uxth	r2, r2
 800247a:	4413      	add	r3, r2
 800247c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8002480:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 8002484:	b29b      	uxth	r3, r3
 8002486:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800248a:	b29b      	uxth	r3, r3
 800248c:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 8002490:	f8b1 3404 	ldrh.w	r3, [r1, #1028]	; 0x404
 8002494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800249c:	b29b      	uxth	r3, r3
 800249e:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024a2:	682b      	ldr	r3, [r5, #0]
 80024a4:	7862      	ldrb	r2, [r4, #1]
 80024a6:	2a00      	cmp	r2, #0
 80024a8:	d13f      	bne.n	800252a <HAL_PCD_EP_DB_Transmit+0x314>
 80024aa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80024ae:	b292      	uxth	r2, r2
 80024b0:	4413      	add	r3, r2
 80024b2:	7822      	ldrb	r2, [r4, #0]
 80024b4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80024b8:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80024bc:	b292      	uxth	r2, r2
 80024be:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80024c2:	b292      	uxth	r2, r2
 80024c4:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80024c8:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80024cc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80024d0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80024d4:	b292      	uxth	r2, r2
 80024d6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024da:	7821      	ldrb	r1, [r4, #0]
 80024dc:	4628      	mov	r0, r5
 80024de:	f7fe fa73 	bl	80009c8 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80024e2:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80024e6:	f47f af34 	bne.w	8002352 <HAL_PCD_EP_DB_Transmit+0x13c>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024ea:	682a      	ldr	r2, [r5, #0]
 80024ec:	7821      	ldrb	r1, [r4, #0]
 80024ee:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002504:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002508:	e723      	b.n	8002352 <HAL_PCD_EP_DB_Transmit+0x13c>
      ep->xfer_len = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	61a3      	str	r3, [r4, #24]
 800250e:	e7aa      	b.n	8002466 <HAL_PCD_EP_DB_Transmit+0x250>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002510:	2b01      	cmp	r3, #1
 8002512:	d1c6      	bne.n	80024a2 <HAL_PCD_EP_DB_Transmit+0x28c>
 8002514:	682b      	ldr	r3, [r5, #0]
 8002516:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800251a:	b292      	uxth	r2, r2
 800251c:	4413      	add	r3, r2
 800251e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8002522:	2300      	movs	r3, #0
 8002524:	f8a1 3404 	strh.w	r3, [r1, #1028]	; 0x404
 8002528:	e7bb      	b.n	80024a2 <HAL_PCD_EP_DB_Transmit+0x28c>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800252a:	2a01      	cmp	r2, #1
 800252c:	d1d5      	bne.n	80024da <HAL_PCD_EP_DB_Transmit+0x2c4>
 800252e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002532:	b292      	uxth	r2, r2
 8002534:	4413      	add	r3, r2
 8002536:	7822      	ldrb	r2, [r4, #0]
 8002538:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800253c:	2200      	movs	r2, #0
 800253e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002542:	e7ca      	b.n	80024da <HAL_PCD_EP_DB_Transmit+0x2c4>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002544:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8002548:	d10d      	bne.n	8002566 <HAL_PCD_EP_DB_Transmit+0x350>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800254a:	6828      	ldr	r0, [r5, #0]
 800254c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002550:	b29b      	uxth	r3, r3
 8002552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800255e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002562:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002566:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800256a:	2b01      	cmp	r3, #1
 800256c:	f47f aef1 	bne.w	8002352 <HAL_PCD_EP_DB_Transmit+0x13c>
        ep->xfer_buff += TxByteNbre;
 8002570:	6963      	ldr	r3, [r4, #20]
 8002572:	4413      	add	r3, r2
 8002574:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8002576:	69e3      	ldr	r3, [r4, #28]
 8002578:	4413      	add	r3, r2
 800257a:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 800257c:	6a21      	ldr	r1, [r4, #32]
 800257e:	6923      	ldr	r3, [r4, #16]
 8002580:	4299      	cmp	r1, r3
 8002582:	d31f      	bcc.n	80025c4 <HAL_PCD_EP_DB_Transmit+0x3ae>
          ep->xfer_len_db -= len;
 8002584:	1ac9      	subs	r1, r1, r3
 8002586:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002588:	682a      	ldr	r2, [r5, #0]
 800258a:	7861      	ldrb	r1, [r4, #1]
 800258c:	2900      	cmp	r1, #0
 800258e:	d13e      	bne.n	800260e <HAL_PCD_EP_DB_Transmit+0x3f8>
 8002590:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8002594:	b289      	uxth	r1, r1
 8002596:	440a      	add	r2, r1
 8002598:	7821      	ldrb	r1, [r4, #0]
 800259a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800259e:	b9eb      	cbnz	r3, 80025dc <HAL_PCD_EP_DB_Transmit+0x3c6>
 80025a0:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 80025a4:	b289      	uxth	r1, r1
 80025a6:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80025aa:	b289      	uxth	r1, r1
 80025ac:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80025b0:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 80025b4:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80025b8:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80025bc:	b289      	uxth	r1, r1
 80025be:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80025c2:	e026      	b.n	8002612 <HAL_PCD_EP_DB_Transmit+0x3fc>
        else if (ep->xfer_len_db == 0U)
 80025c4:	b921      	cbnz	r1, 80025d0 <HAL_PCD_EP_DB_Transmit+0x3ba>
          ep->xfer_fill_db = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 80025cc:	4613      	mov	r3, r2
 80025ce:	e7db      	b.n	8002588 <HAL_PCD_EP_DB_Transmit+0x372>
          ep->xfer_len_db = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 80025d4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 80025d8:	460b      	mov	r3, r1
 80025da:	e7d5      	b.n	8002588 <HAL_PCD_EP_DB_Transmit+0x372>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025dc:	2b3e      	cmp	r3, #62	; 0x3e
 80025de:	d809      	bhi.n	80025f4 <HAL_PCD_EP_DB_Transmit+0x3de>
 80025e0:	0859      	lsrs	r1, r3, #1
 80025e2:	f013 0f01 	tst.w	r3, #1
 80025e6:	d000      	beq.n	80025ea <HAL_PCD_EP_DB_Transmit+0x3d4>
 80025e8:	3101      	adds	r1, #1
 80025ea:	0289      	lsls	r1, r1, #10
 80025ec:	b289      	uxth	r1, r1
 80025ee:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80025f2:	e00e      	b.n	8002612 <HAL_PCD_EP_DB_Transmit+0x3fc>
 80025f4:	0959      	lsrs	r1, r3, #5
 80025f6:	f013 0f1f 	tst.w	r3, #31
 80025fa:	d100      	bne.n	80025fe <HAL_PCD_EP_DB_Transmit+0x3e8>
 80025fc:	3901      	subs	r1, #1
 80025fe:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002602:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002606:	b289      	uxth	r1, r1
 8002608:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 800260c:	e001      	b.n	8002612 <HAL_PCD_EP_DB_Transmit+0x3fc>
 800260e:	2901      	cmp	r1, #1
 8002610:	d006      	beq.n	8002620 <HAL_PCD_EP_DB_Transmit+0x40a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002612:	b29b      	uxth	r3, r3
 8002614:	8962      	ldrh	r2, [r4, #10]
 8002616:	6961      	ldr	r1, [r4, #20]
 8002618:	6828      	ldr	r0, [r5, #0]
 800261a:	f001 facf 	bl	8003bbc <USB_WritePMA>
 800261e:	e698      	b.n	8002352 <HAL_PCD_EP_DB_Transmit+0x13c>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002620:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8002624:	b289      	uxth	r1, r1
 8002626:	440a      	add	r2, r1
 8002628:	7821      	ldrb	r1, [r4, #0]
 800262a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800262e:	b299      	uxth	r1, r3
 8002630:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8002634:	e7ed      	b.n	8002612 <HAL_PCD_EP_DB_Transmit+0x3fc>

08002636 <PCD_EP_ISR_Handler>:
{
 8002636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800263a:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800263c:	6828      	ldr	r0, [r5, #0]
 800263e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002642:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002646:	f000 8213 	beq.w	8002a70 <PCD_EP_ISR_Handler+0x43a>
    wIstr = hpcd->Instance->ISTR;
 800264a:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 800264e:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 8002650:	f014 040f 	ands.w	r4, r4, #15
 8002654:	f040 80d8 	bne.w	8002808 <PCD_EP_ISR_Handler+0x1d2>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002658:	f013 0f10 	tst.w	r3, #16
 800265c:	d061      	beq.n	8002722 <PCD_EP_ISR_Handler+0xec>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800265e:	8803      	ldrh	r3, [r0, #0]
 8002660:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002662:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002666:	f040 8093 	bne.w	8002790 <PCD_EP_ISR_Handler+0x15a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800266a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800266e:	d0e5      	beq.n	800263c <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002670:	8803      	ldrh	r3, [r0, #0]
 8002672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002676:	051b      	lsls	r3, r3, #20
 8002678:	0d1b      	lsrs	r3, r3, #20
 800267a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002680:	6828      	ldr	r0, [r5, #0]
 8002682:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002686:	b29b      	uxth	r3, r3
 8002688:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 800268c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002690:	3306      	adds	r3, #6
 8002692:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002696:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800269a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269e:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80026a2:	b18b      	cbz	r3, 80026c8 <PCD_EP_ISR_Handler+0x92>
 80026a4:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 80026a8:	b171      	cbz	r1, 80026c8 <PCD_EP_ISR_Handler+0x92>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026aa:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80026ae:	f001 fef1 	bl	8004494 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80026b2:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 80026b6:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 80026ba:	4413      	add	r3, r2
 80026bc:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026c0:	2100      	movs	r1, #0
 80026c2:	4628      	mov	r0, r5
 80026c4:	f7fe f974 	bl	80009b0 <HAL_PCD_DataOutStageCallback>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80026c8:	682b      	ldr	r3, [r5, #0]
 80026ca:	881a      	ldrh	r2, [r3, #0]
 80026cc:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80026d0:	d1b4      	bne.n	800263c <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026d2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80026d6:	b292      	uxth	r2, r2
 80026d8:	4413      	add	r3, r2
 80026da:	f8d5 2178 	ldr.w	r2, [r5, #376]	; 0x178
 80026de:	2a00      	cmp	r2, #0
 80026e0:	d179      	bne.n	80027d6 <PCD_EP_ISR_Handler+0x1a0>
 80026e2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80026e6:	b292      	uxth	r2, r2
 80026e8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80026ec:	b292      	uxth	r2, r2
 80026ee:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80026f2:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80026f6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80026fa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80026fe:	b292      	uxth	r2, r2
 8002700:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002704:	682a      	ldr	r2, [r5, #0]
 8002706:	8813      	ldrh	r3, [r2, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800270e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002712:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800271e:	8013      	strh	r3, [r2, #0]
 8002720:	e78c      	b.n	800263c <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002722:	8803      	ldrh	r3, [r0, #0]
 8002724:	b29b      	uxth	r3, r3
 8002726:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800272a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002736:	b29b      	uxth	r3, r3
 8002738:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800273a:	682a      	ldr	r2, [r5, #0]
 800273c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002740:	b29b      	uxth	r3, r3
 8002742:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8002746:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800274a:	3302      	adds	r3, #2
 800274c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002750:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002758:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800275a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800275c:	4413      	add	r3, r2
 800275e:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002760:	2100      	movs	r1, #0
 8002762:	4628      	mov	r0, r5
 8002764:	f7fe f930 	bl	80009c8 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002768:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800276c:	2b00      	cmp	r3, #0
 800276e:	f43f af65 	beq.w	800263c <PCD_EP_ISR_Handler+0x6>
 8002772:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	f47f af61 	bne.w	800263c <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800277a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800277e:	682a      	ldr	r2, [r5, #0]
 8002780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002784:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 800278e:	e755      	b.n	800263c <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002790:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002794:	b29b      	uxth	r3, r3
 8002796:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 800279a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800279e:	3306      	adds	r3, #6
 80027a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80027a4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80027a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ac:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027b0:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80027b4:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 80027b8:	f001 fe6c 	bl	8004494 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027bc:	682a      	ldr	r2, [r5, #0]
 80027be:	8813      	ldrh	r3, [r2, #0]
 80027c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c4:	051b      	lsls	r3, r3, #20
 80027c6:	0d1b      	lsrs	r3, r3, #20
 80027c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027cc:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80027ce:	4628      	mov	r0, r5
 80027d0:	f7fe f8e6 	bl	80009a0 <HAL_PCD_SetupStageCallback>
 80027d4:	e732      	b.n	800263c <PCD_EP_ISR_Handler+0x6>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027d6:	2a3e      	cmp	r2, #62	; 0x3e
 80027d8:	d809      	bhi.n	80027ee <PCD_EP_ISR_Handler+0x1b8>
 80027da:	0851      	lsrs	r1, r2, #1
 80027dc:	f012 0f01 	tst.w	r2, #1
 80027e0:	d000      	beq.n	80027e4 <PCD_EP_ISR_Handler+0x1ae>
 80027e2:	3101      	adds	r1, #1
 80027e4:	028a      	lsls	r2, r1, #10
 80027e6:	b292      	uxth	r2, r2
 80027e8:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80027ec:	e78a      	b.n	8002704 <PCD_EP_ISR_Handler+0xce>
 80027ee:	0951      	lsrs	r1, r2, #5
 80027f0:	f012 0f1f 	tst.w	r2, #31
 80027f4:	d100      	bne.n	80027f8 <PCD_EP_ISR_Handler+0x1c2>
 80027f6:	3901      	subs	r1, #1
 80027f8:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 80027fc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002800:	b292      	uxth	r2, r2
 8002802:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8002806:	e77d      	b.n	8002704 <PCD_EP_ISR_Handler+0xce>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002808:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800280c:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800280e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002812:	d153      	bne.n	80028bc <PCD_EP_ISR_Handler+0x286>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002814:	f016 0f80 	tst.w	r6, #128	; 0x80
 8002818:	f43f af10 	beq.w	800263c <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 800281c:	1c62      	adds	r2, r4, #1
 800281e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002822:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002826:	6828      	ldr	r0, [r5, #0]
 8002828:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800282c:	b29b      	uxth	r3, r3
 800282e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800283a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800283e:	b29b      	uxth	r3, r3
 8002840:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002844:	78cb      	ldrb	r3, [r1, #3]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d007      	beq.n	800285a <PCD_EP_ISR_Handler+0x224>
 800284a:	b133      	cbz	r3, 800285a <PCD_EP_ISR_Handler+0x224>
 800284c:	2b02      	cmp	r3, #2
 800284e:	f040 810a 	bne.w	8002a66 <PCD_EP_ISR_Handler+0x430>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002852:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002856:	f040 8106 	bne.w	8002a66 <PCD_EP_ISR_Handler+0x430>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800285a:	6828      	ldr	r0, [r5, #0]
 800285c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002860:	b29b      	uxth	r3, r3
 8002862:	1c62      	adds	r2, r4, #1
 8002864:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002868:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 800286c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002870:	3302      	adds	r3, #2
 8002872:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002876:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800287a:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (ep->xfer_len > TxByteNbre)
 800287e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002882:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002886:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002888:	429a      	cmp	r2, r3
 800288a:	f240 80d8 	bls.w	8002a3e <PCD_EP_ISR_Handler+0x408>
            ep->xfer_len -= TxByteNbre;
 800288e:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8002892:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8002896:	1ad2      	subs	r2, r2, r3
 8002898:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 800289a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800289e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80028a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028a4:	2a00      	cmp	r2, #0
 80028a6:	f040 80d1 	bne.w	8002a4c <PCD_EP_ISR_Handler+0x416>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028aa:	3401      	adds	r4, #1
 80028ac:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80028b0:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 80028b4:	4628      	mov	r0, r5
 80028b6:	f7fe f887 	bl	80009c8 <HAL_PCD_DataInStageCallback>
 80028ba:	e6bf      	b.n	800263c <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028bc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80028c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c4:	051b      	lsls	r3, r3, #20
 80028c6:	0d1b      	lsrs	r3, r3, #20
 80028c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028cc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 80028d0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80028d4:	00c9      	lsls	r1, r1, #3
 80028d6:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80028da:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 80028de:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80028e2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80028e6:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d142      	bne.n	8002974 <PCD_EP_ISR_Handler+0x33e>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028ee:	6828      	ldr	r0, [r5, #0]
 80028f0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80028fa:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80028fe:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8002902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002906:	3306      	adds	r3, #6
 8002908:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800290c:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8002910:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 8002914:	bb17      	cbnz	r7, 800295c <PCD_EP_ISR_Handler+0x326>
        ep->xfer_count += count;
 8002916:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800291a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800291e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8002922:	443a      	add	r2, r7
 8002924:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8002928:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800292c:	443a      	add	r2, r7
 800292e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002932:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8002936:	b13b      	cbz	r3, 8002948 <PCD_EP_ISR_Handler+0x312>
 8002938:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800293c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002940:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002944:	429f      	cmp	r7, r3
 8002946:	d275      	bcs.n	8002a34 <PCD_EP_ISR_Handler+0x3fe>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002948:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800294c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002950:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8002954:	4628      	mov	r0, r5
 8002956:	f7fe f82b 	bl	80009b0 <HAL_PCD_DataOutStageCallback>
 800295a:	e75b      	b.n	8002814 <PCD_EP_ISR_Handler+0x1de>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800295c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002960:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002964:	463b      	mov	r3, r7
 8002966:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 800296a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800296e:	f001 fd91 	bl	8004494 <USB_ReadPMA>
 8002972:	e7d0      	b.n	8002916 <PCD_EP_ISR_Handler+0x2e0>
          if (ep->type == EP_TYPE_BULK)
 8002974:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002978:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800297c:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8002980:	2b02      	cmp	r3, #2
 8002982:	d035      	beq.n	80029f0 <PCD_EP_ISR_Handler+0x3ba>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002984:	6829      	ldr	r1, [r5, #0]
 8002986:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800298a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800298e:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8002992:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8002996:	b29b      	uxth	r3, r3
 8002998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800299c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029a8:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029ac:	6828      	ldr	r0, [r5, #0]
 80029ae:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 80029b2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029b6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80029ba:	d020      	beq.n	80029fe <PCD_EP_ISR_Handler+0x3c8>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029bc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80029c6:	3302      	adds	r3, #2
 80029c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80029cc:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 80029d0:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 80029d4:	2f00      	cmp	r7, #0
 80029d6:	d09e      	beq.n	8002916 <PCD_EP_ISR_Handler+0x2e0>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029d8:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80029dc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80029e0:	463b      	mov	r3, r7
 80029e2:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80029e6:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80029ea:	f001 fd53 	bl	8004494 <USB_ReadPMA>
 80029ee:	e792      	b.n	8002916 <PCD_EP_ISR_Handler+0x2e0>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80029f0:	4632      	mov	r2, r6
 80029f2:	4641      	mov	r1, r8
 80029f4:	4628      	mov	r0, r5
 80029f6:	f7ff fae4 	bl	8001fc2 <HAL_PCD_EP_DB_Receive>
 80029fa:	4607      	mov	r7, r0
 80029fc:	e78b      	b.n	8002916 <PCD_EP_ISR_Handler+0x2e0>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029fe:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a08:	3306      	adds	r3, #6
 8002a0a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002a0e:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8002a12:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 8002a16:	2f00      	cmp	r7, #0
 8002a18:	f43f af7d 	beq.w	8002916 <PCD_EP_ISR_Handler+0x2e0>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a1c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002a20:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8002a24:	463b      	mov	r3, r7
 8002a26:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8002a2a:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8002a2e:	f001 fd31 	bl	8004494 <USB_ReadPMA>
 8002a32:	e770      	b.n	8002916 <PCD_EP_ISR_Handler+0x2e0>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a34:	4641      	mov	r1, r8
 8002a36:	6828      	ldr	r0, [r5, #0]
 8002a38:	f001 f8d3 	bl	8003be2 <USB_EPStartXfer>
 8002a3c:	e6ea      	b.n	8002814 <PCD_EP_ISR_Handler+0x1de>
            ep->xfer_len = 0U;
 8002a3e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002a42:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002a46:	2600      	movs	r6, #0
 8002a48:	6416      	str	r6, [r2, #64]	; 0x40
 8002a4a:	e726      	b.n	800289a <PCD_EP_ISR_Handler+0x264>
            ep->xfer_buff += TxByteNbre;
 8002a4c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002a50:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8002a54:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8002a56:	441e      	add	r6, r3
 8002a58:	63d6      	str	r6, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8002a5a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002a5c:	4423      	add	r3, r4
 8002a5e:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a60:	f001 f8bf 	bl	8003be2 <USB_EPStartXfer>
 8002a64:	e5ea      	b.n	800263c <PCD_EP_ISR_Handler+0x6>
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a66:	4632      	mov	r2, r6
 8002a68:	4628      	mov	r0, r5
 8002a6a:	f7ff fbd4 	bl	8002216 <HAL_PCD_EP_DB_Transmit>
 8002a6e:	e5e5      	b.n	800263c <PCD_EP_ISR_Handler+0x6>
}
 8002a70:	2000      	movs	r0, #0
 8002a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a76 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8002a76:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d00d      	beq.n	8002a9a <HAL_PCD_SetAddress+0x24>
{
 8002a7e:	b510      	push	{r4, lr}
 8002a80:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002a82:	2301      	movs	r3, #1
 8002a84:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002a88:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a8c:	6800      	ldr	r0, [r0, #0]
 8002a8e:	f001 f885 	bl	8003b9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002a98:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002a9a:	2002      	movs	r0, #2
}
 8002a9c:	4770      	bx	lr

08002a9e <HAL_PCD_IRQHandler>:
{
 8002a9e:	b510      	push	{r4, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002aa4:	6800      	ldr	r0, [r0, #0]
 8002aa6:	f001 f883 	bl	8003bb0 <USB_ReadInterrupts>
 8002aaa:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8002aae:	d132      	bne.n	8002b16 <HAL_PCD_IRQHandler+0x78>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002ab0:	6820      	ldr	r0, [r4, #0]
 8002ab2:	f001 f87d 	bl	8003bb0 <USB_ReadInterrupts>
 8002ab6:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8002aba:	d130      	bne.n	8002b1e <HAL_PCD_IRQHandler+0x80>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002abc:	6820      	ldr	r0, [r4, #0]
 8002abe:	f001 f877 	bl	8003bb0 <USB_ReadInterrupts>
 8002ac2:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8002ac6:	d008      	beq.n	8002ada <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ac8:	6822      	ldr	r2, [r4, #0]
 8002aca:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002ada:	6820      	ldr	r0, [r4, #0]
 8002adc:	f001 f868 	bl	8003bb0 <USB_ReadInterrupts>
 8002ae0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8002ae4:	d008      	beq.n	8002af8 <HAL_PCD_IRQHandler+0x5a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ae6:	6822      	ldr	r2, [r4, #0]
 8002ae8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002af8:	6820      	ldr	r0, [r4, #0]
 8002afa:	f001 f859 	bl	8003bb0 <USB_ReadInterrupts>
 8002afe:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002b02:	d11d      	bne.n	8002b40 <HAL_PCD_IRQHandler+0xa2>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002b04:	6820      	ldr	r0, [r4, #0]
 8002b06:	f001 f853 	bl	8003bb0 <USB_ReadInterrupts>
 8002b0a:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8002b0e:	f000 808b 	beq.w	8002c28 <HAL_PCD_IRQHandler+0x18a>
    for (i = 0U; i < 8U; i++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	e03d      	b.n	8002b92 <HAL_PCD_IRQHandler+0xf4>
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b16:	4620      	mov	r0, r4
 8002b18:	f7ff fd8d 	bl	8002636 <PCD_EP_ISR_Handler>
 8002b1c:	e7c8      	b.n	8002ab0 <HAL_PCD_IRQHandler+0x12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b1e:	6822      	ldr	r2, [r4, #0]
 8002b20:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002b30:	4620      	mov	r0, r4
 8002b32:	f7fd ff5a 	bl	80009ea <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b36:	2100      	movs	r1, #0
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f7ff ff9c 	bl	8002a76 <HAL_PCD_SetAddress>
 8002b3e:	e7bd      	b.n	8002abc <HAL_PCD_IRQHandler+0x1e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002b40:	6822      	ldr	r2, [r4, #0]
 8002b42:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b52:	6822      	ldr	r2, [r4, #0]
 8002b54:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	f023 0308 	bic.w	r3, r3, #8
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8002b64:	4620      	mov	r0, r4
 8002b66:	f7fd ff63 	bl	8000a30 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b6a:	6822      	ldr	r2, [r4, #0]
 8002b6c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8002b7c:	e7c2      	b.n	8002b04 <HAL_PCD_IRQHandler+0x66>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002b7e:	6822      	ldr	r2, [r4, #0]
 8002b80:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002b84:	aa04      	add	r2, sp, #16
 8002b86:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002b8a:	f822 1c10 	strh.w	r1, [r2, #-16]
    for (i = 0U; i < 8U; i++)
 8002b8e:	3301      	adds	r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b07      	cmp	r3, #7
 8002b94:	d9f3      	bls.n	8002b7e <HAL_PCD_IRQHandler+0xe0>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002b96:	6822      	ldr	r2, [r4, #0]
 8002b98:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ba6:	6822      	ldr	r2, [r4, #0]
 8002ba8:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	f023 0301 	bic.w	r3, r3, #1
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002bbe:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002bc2:	d0f9      	beq.n	8002bb8 <HAL_PCD_IRQHandler+0x11a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002bc4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002bc8:	b292      	uxth	r2, r2
 8002bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bce:	b292      	uxth	r2, r2
 8002bd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    for (i = 0U; i < 8U; i++)
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e009      	b.n	8002bec <HAL_PCD_IRQHandler+0x14e>
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002bd8:	6822      	ldr	r2, [r4, #0]
 8002bda:	a904      	add	r1, sp, #16
 8002bdc:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8002be0:	f831 1c10 	ldrh.w	r1, [r1, #-16]
 8002be4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    for (i = 0U; i < 8U; i++)
 8002be8:	3301      	adds	r3, #1
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b07      	cmp	r3, #7
 8002bee:	d9f3      	bls.n	8002bd8 <HAL_PCD_IRQHandler+0x13a>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002bf0:	6822      	ldr	r2, [r4, #0]
 8002bf2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f043 0308 	orr.w	r3, r3, #8
 8002bfc:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c00:	6822      	ldr	r2, [r4, #0]
 8002c02:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002c12:	6822      	ldr	r2, [r4, #0]
 8002c14:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f043 0304 	orr.w	r3, r3, #4
 8002c1e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002c22:	4620      	mov	r0, r4
 8002c24:	f7fd fef4 	bl	8000a10 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002c28:	6820      	ldr	r0, [r4, #0]
 8002c2a:	f000 ffc1 	bl	8003bb0 <USB_ReadInterrupts>
 8002c2e:	f410 7f00 	tst.w	r0, #512	; 0x200
 8002c32:	d110      	bne.n	8002c56 <HAL_PCD_IRQHandler+0x1b8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002c34:	6820      	ldr	r0, [r4, #0]
 8002c36:	f000 ffbb 	bl	8003bb0 <USB_ReadInterrupts>
 8002c3a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002c3e:	d008      	beq.n	8002c52 <HAL_PCD_IRQHandler+0x1b4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c40:	6822      	ldr	r2, [r4, #0]
 8002c42:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8002c52:	b004      	add	sp, #16
 8002c54:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c56:	6822      	ldr	r2, [r4, #0]
 8002c58:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f7fd feb8 	bl	80009de <HAL_PCD_SOFCallback>
 8002c6e:	e7e1      	b.n	8002c34 <HAL_PCD_IRQHandler+0x196>

08002c70 <HAL_PCD_EP_Open>:
{
 8002c70:	b570      	push	{r4, r5, r6, lr}
 8002c72:	4605      	mov	r5, r0
 8002c74:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002c76:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002c7a:	d126      	bne.n	8002cca <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c7c:	f001 0007 	and.w	r0, r1, #7
 8002c80:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8002c84:	00c9      	lsls	r1, r1, #3
 8002c86:	f501 76b4 	add.w	r6, r1, #360	; 0x168
 8002c8a:	19a9      	adds	r1, r5, r6
    ep->is_in = 0U;
 8002c8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002c90:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8002c94:	2600      	movs	r6, #0
 8002c96:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c9a:	f004 0407 	and.w	r4, r4, #7
 8002c9e:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8002ca0:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8002ca2:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8002ca4:	784a      	ldrb	r2, [r1, #1]
 8002ca6:	b102      	cbz	r2, 8002caa <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 8002ca8:	81cc      	strh	r4, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d017      	beq.n	8002cde <HAL_PCD_EP_Open+0x6e>
  __HAL_LOCK(hpcd);
 8002cae:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d016      	beq.n	8002ce4 <HAL_PCD_EP_Open+0x74>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cbc:	6828      	ldr	r0, [r5, #0]
 8002cbe:	f000 fd58 	bl	8003772 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8002cc8:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cca:	f001 0007 	and.w	r0, r1, #7
 8002cce:	3001      	adds	r0, #1
 8002cd0:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8002cd4:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    ep->is_in = 1U;
 8002cd8:	2601      	movs	r6, #1
 8002cda:	704e      	strb	r6, [r1, #1]
 8002cdc:	e7dd      	b.n	8002c9a <HAL_PCD_EP_Open+0x2a>
    ep->data_pid_start = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	710b      	strb	r3, [r1, #4]
 8002ce2:	e7e4      	b.n	8002cae <HAL_PCD_EP_Open+0x3e>
  __HAL_LOCK(hpcd);
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	e7ef      	b.n	8002cc8 <HAL_PCD_EP_Open+0x58>

08002ce8 <HAL_PCD_EP_Receive>:
{
 8002ce8:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cea:	f001 0407 	and.w	r4, r1, #7
 8002cee:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002cf2:	00c9      	lsls	r1, r1, #3
 8002cf4:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002cf8:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8002cfa:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8002cfe:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8002d02:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 8002d06:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8002d10:	f885 3169 	strb.w	r3, [r5, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d14:	f885 4168 	strb.w	r4, [r5, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d18:	b924      	cbnz	r4, 8002d24 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d1a:	6800      	ldr	r0, [r0, #0]
 8002d1c:	f000 ff61 	bl	8003be2 <USB_EPStartXfer>
}
 8002d20:	2000      	movs	r0, #0
 8002d22:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d24:	6800      	ldr	r0, [r0, #0]
 8002d26:	f000 ff5c 	bl	8003be2 <USB_EPStartXfer>
 8002d2a:	e7f9      	b.n	8002d20 <HAL_PCD_EP_Receive+0x38>

08002d2c <HAL_PCD_EP_Transmit>:
{
 8002d2c:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d2e:	f001 0507 	and.w	r5, r1, #7
 8002d32:	1c6c      	adds	r4, r5, #1
 8002d34:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002d38:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 8002d3c:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8002d40:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8002d44:	63f2      	str	r2, [r6, #60]	; 0x3c
  ep->xfer_len = len;
 8002d46:	6433      	str	r3, [r6, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
  ep->xfer_len_db = len;
 8002d4e:	64b3      	str	r3, [r6, #72]	; 0x48
  ep->xfer_count = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	6473      	str	r3, [r6, #68]	; 0x44
  ep->is_in = 1U;
 8002d54:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d56:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002d5a:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d5e:	b925      	cbnz	r5, 8002d6a <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d60:	6800      	ldr	r0, [r0, #0]
 8002d62:	f000 ff3e 	bl	8003be2 <USB_EPStartXfer>
}
 8002d66:	2000      	movs	r0, #0
 8002d68:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d6a:	6800      	ldr	r0, [r0, #0]
 8002d6c:	f000 ff39 	bl	8003be2 <USB_EPStartXfer>
 8002d70:	e7f9      	b.n	8002d66 <HAL_PCD_EP_Transmit+0x3a>

08002d72 <HAL_PCD_EP_SetStall>:
{
 8002d72:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d74:	f001 0507 	and.w	r5, r1, #7
 8002d78:	6842      	ldr	r2, [r0, #4]
 8002d7a:	4295      	cmp	r5, r2
 8002d7c:	d831      	bhi.n	8002de2 <HAL_PCD_EP_SetStall+0x70>
 8002d7e:	4604      	mov	r4, r0
 8002d80:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8002d82:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002d86:	d11e      	bne.n	8002dc6 <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 8002d88:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002d8c:	00c9      	lsls	r1, r1, #3
 8002d8e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002d92:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002d94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d98:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8002da2:	2301      	movs	r3, #1
 8002da4:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002da6:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002da8:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d01a      	beq.n	8002de6 <HAL_PCD_EP_SetStall+0x74>
 8002db0:	2301      	movs	r3, #1
 8002db2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002db6:	6820      	ldr	r0, [r4, #0]
 8002db8:	f000 fe7a 	bl	8003ab0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dbc:	b15d      	cbz	r5, 8002dd6 <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002dc4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc6:	1c6b      	adds	r3, r5, #1
 8002dc8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002dcc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	704a      	strb	r2, [r1, #1]
 8002dd4:	e7e5      	b.n	8002da2 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002dd6:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8002dda:	6820      	ldr	r0, [r4, #0]
 8002ddc:	f000 feec 	bl	8003bb8 <USB_EP0_OutStart>
 8002de0:	e7ed      	b.n	8002dbe <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8002de2:	2001      	movs	r0, #1
 8002de4:	e7ee      	b.n	8002dc4 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 8002de6:	2002      	movs	r0, #2
 8002de8:	e7ec      	b.n	8002dc4 <HAL_PCD_EP_SetStall+0x52>

08002dea <HAL_PCD_EP_ClrStall>:
{
 8002dea:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dec:	f001 010f 	and.w	r1, r1, #15
 8002df0:	6842      	ldr	r2, [r0, #4]
 8002df2:	4291      	cmp	r1, r2
 8002df4:	d830      	bhi.n	8002e58 <HAL_PCD_EP_ClrStall+0x6e>
{
 8002df6:	b510      	push	{r4, lr}
 8002df8:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8002dfa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002dfe:	d121      	bne.n	8002e44 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e00:	f003 0207 	and.w	r2, r3, #7
 8002e04:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002e08:	00c9      	lsls	r1, r1, #3
 8002e0a:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002e0e:	4401      	add	r1, r0
    ep->is_in = 0U;
 8002e10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e14:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 8002e1e:	2200      	movs	r2, #0
 8002e20:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8002e28:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d015      	beq.n	8002e5c <HAL_PCD_EP_ClrStall+0x72>
 8002e30:	2301      	movs	r3, #1
 8002e32:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e36:	6820      	ldr	r0, [r4, #0]
 8002e38:	f000 fe5f 	bl	8003afa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002e42:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e44:	f003 0207 	and.w	r2, r3, #7
 8002e48:	3201      	adds	r2, #1
 8002e4a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002e4e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8002e52:	2001      	movs	r0, #1
 8002e54:	7048      	strb	r0, [r1, #1]
 8002e56:	e7e2      	b.n	8002e1e <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8002e58:	2001      	movs	r0, #1
}
 8002e5a:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8002e5c:	2002      	movs	r0, #2
 8002e5e:	e7f0      	b.n	8002e42 <HAL_PCD_EP_ClrStall+0x58>

08002e60 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e60:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002e64:	d00b      	beq.n	8002e7e <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e66:	f001 0107 	and.w	r1, r1, #7
 8002e6a:	3101      	adds	r1, #1
 8002e6c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002e70:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e74:	b952      	cbnz	r2, 8002e8c <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e76:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e78:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8002e7e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002e82:	00c9      	lsls	r1, r1, #3
 8002e84:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8002e88:	4401      	add	r1, r0
 8002e8a:	e7f3      	b.n	8002e74 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e90:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e92:	0c1b      	lsrs	r3, r3, #16
 8002e94:	814b      	strh	r3, [r1, #10]
 8002e96:	e7f0      	b.n	8002e7a <HAL_PCDEx_PMAConfig+0x1a>

08002e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e98:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <RCC_Delay+0x24>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <RCC_Delay+0x28>)
 8002ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea4:	0a5b      	lsrs	r3, r3, #9
 8002ea6:	fb00 f303 	mul.w	r3, r0, r3
 8002eaa:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002eac:	bf00      	nop
  }
  while (Delay --);
 8002eae:	9b01      	ldr	r3, [sp, #4]
 8002eb0:	1e5a      	subs	r2, r3, #1
 8002eb2:	9201      	str	r2, [sp, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f9      	bne.n	8002eac <RCC_Delay+0x14>
}
 8002eb8:	b002      	add	sp, #8
 8002eba:	4770      	bx	lr
 8002ebc:	20000004 	.word	0x20000004
 8002ec0:	10624dd3 	.word	0x10624dd3

08002ec4 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	f000 81f1 	beq.w	80032ac <HAL_RCC_OscConfig+0x3e8>
{
 8002eca:	b570      	push	{r4, r5, r6, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed0:	6803      	ldr	r3, [r0, #0]
 8002ed2:	f013 0f01 	tst.w	r3, #1
 8002ed6:	d02c      	beq.n	8002f32 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed8:	4baa      	ldr	r3, [pc, #680]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d01d      	beq.n	8002f20 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ee4:	4ba7      	ldr	r3, [pc, #668]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d012      	beq.n	8002f16 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef0:	6863      	ldr	r3, [r4, #4]
 8002ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef6:	d041      	beq.n	8002f7c <HAL_RCC_OscConfig+0xb8>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d155      	bne.n	8002fa8 <HAL_RCC_OscConfig+0xe4>
 8002efc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f00:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e037      	b.n	8002f86 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f16:	4b9b      	ldr	r3, [pc, #620]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002f1e:	d0e7      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	4b98      	ldr	r3, [pc, #608]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_OscConfig+0x6e>
 8002f2a:	6863      	ldr	r3, [r4, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 81bf 	beq.w	80032b0 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	f013 0f02 	tst.w	r3, #2
 8002f38:	d075      	beq.n	8003026 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f3a:	4b92      	ldr	r3, [pc, #584]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f013 0f0c 	tst.w	r3, #12
 8002f42:	d05f      	beq.n	8003004 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f44:	4b8f      	ldr	r3, [pc, #572]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 030c 	and.w	r3, r3, #12
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d054      	beq.n	8002ffa <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f50:	6923      	ldr	r3, [r4, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8089 	beq.w	800306a <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 8002f58:	4b8b      	ldr	r3, [pc, #556]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fbbf 	bl	80016e0 <HAL_GetTick>
 8002f62:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f64:	4b87      	ldr	r3, [pc, #540]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f013 0f02 	tst.w	r3, #2
 8002f6c:	d174      	bne.n	8003058 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6e:	f7fe fbb7 	bl	80016e0 <HAL_GetTick>
 8002f72:	1b40      	subs	r0, r0, r5
 8002f74:	2802      	cmp	r0, #2
 8002f76:	d9f5      	bls.n	8002f64 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8002f78:	2003      	movs	r0, #3
 8002f7a:	e19e      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7c:	4a81      	ldr	r2, [pc, #516]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8002f7e:	6813      	ldr	r3, [r2, #0]
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f86:	6863      	ldr	r3, [r4, #4]
 8002f88:	b343      	cbz	r3, 8002fdc <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002f8a:	f7fe fba9 	bl	80016e0 <HAL_GetTick>
 8002f8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f90:	4b7c      	ldr	r3, [pc, #496]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f98:	d1cb      	bne.n	8002f32 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9a:	f7fe fba1 	bl	80016e0 <HAL_GetTick>
 8002f9e:	1b40      	subs	r0, r0, r5
 8002fa0:	2864      	cmp	r0, #100	; 0x64
 8002fa2:	d9f5      	bls.n	8002f90 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	e188      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCC_OscConfig+0xfe>
 8002fae:	4b75      	ldr	r3, [pc, #468]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e7e1      	b.n	8002f86 <HAL_RCC_OscConfig+0xc2>
 8002fc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fc6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e7d4      	b.n	8002f86 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fb80 	bl	80016e0 <HAL_GetTick>
 8002fe0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	4b68      	ldr	r3, [pc, #416]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002fea:	d0a2      	beq.n	8002f32 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fec:	f7fe fb78 	bl	80016e0 <HAL_GetTick>
 8002ff0:	1b40      	subs	r0, r0, r5
 8002ff2:	2864      	cmp	r0, #100	; 0x64
 8002ff4:	d9f5      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002ff6:	2003      	movs	r0, #3
 8002ff8:	e15f      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ffa:	4b62      	ldr	r3, [pc, #392]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003002:	d1a5      	bne.n	8002f50 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003004:	4b5f      	ldr	r3, [pc, #380]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f013 0f02 	tst.w	r3, #2
 800300c:	d003      	beq.n	8003016 <HAL_RCC_OscConfig+0x152>
 800300e:	6923      	ldr	r3, [r4, #16]
 8003010:	2b01      	cmp	r3, #1
 8003012:	f040 814f 	bne.w	80032b4 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	4a5b      	ldr	r2, [pc, #364]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8003018:	6813      	ldr	r3, [r2, #0]
 800301a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800301e:	6961      	ldr	r1, [r4, #20]
 8003020:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003024:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	f013 0f08 	tst.w	r3, #8
 800302c:	d032      	beq.n	8003094 <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800302e:	69a3      	ldr	r3, [r4, #24]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d045      	beq.n	80030c0 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8003034:	4b55      	ldr	r3, [pc, #340]	; (800318c <HAL_RCC_OscConfig+0x2c8>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800303a:	f7fe fb51 	bl	80016e0 <HAL_GetTick>
 800303e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003040:	4b50      	ldr	r3, [pc, #320]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	f013 0f02 	tst.w	r3, #2
 8003048:	d121      	bne.n	800308e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304a:	f7fe fb49 	bl	80016e0 <HAL_GetTick>
 800304e:	1b40      	subs	r0, r0, r5
 8003050:	2802      	cmp	r0, #2
 8003052:	d9f5      	bls.n	8003040 <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 8003054:	2003      	movs	r0, #3
 8003056:	e130      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	4a4a      	ldr	r2, [pc, #296]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 800305a:	6813      	ldr	r3, [r2, #0]
 800305c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003060:	6961      	ldr	r1, [r4, #20]
 8003062:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	e7dd      	b.n	8003026 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800306a:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCC_OscConfig+0x2c4>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003070:	f7fe fb36 	bl	80016e0 <HAL_GetTick>
 8003074:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003076:	4b43      	ldr	r3, [pc, #268]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f013 0f02 	tst.w	r3, #2
 800307e:	d0d2      	beq.n	8003026 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003080:	f7fe fb2e 	bl	80016e0 <HAL_GetTick>
 8003084:	1b40      	subs	r0, r0, r5
 8003086:	2802      	cmp	r0, #2
 8003088:	d9f5      	bls.n	8003076 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 800308a:	2003      	movs	r0, #3
 800308c:	e115      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 800308e:	2001      	movs	r0, #1
 8003090:	f7ff ff02 	bl	8002e98 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	f013 0f04 	tst.w	r3, #4
 800309a:	f000 8097 	beq.w	80031cc <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b39      	ldr	r3, [pc, #228]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80030a6:	d11d      	bne.n	80030e4 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030b0:	61da      	str	r2, [r3, #28]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80030bc:	2501      	movs	r5, #1
 80030be:	e012      	b.n	80030e6 <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 80030c0:	4b32      	ldr	r3, [pc, #200]	; (800318c <HAL_RCC_OscConfig+0x2c8>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80030c6:	f7fe fb0b 	bl	80016e0 <HAL_GetTick>
 80030ca:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	4b2d      	ldr	r3, [pc, #180]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f013 0f02 	tst.w	r3, #2
 80030d4:	d0de      	beq.n	8003094 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d6:	f7fe fb03 	bl	80016e0 <HAL_GetTick>
 80030da:	1b40      	subs	r0, r0, r5
 80030dc:	2802      	cmp	r0, #2
 80030de:	d9f5      	bls.n	80030cc <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 80030e0:	2003      	movs	r0, #3
 80030e2:	e0ea      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 80030e4:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <HAL_RCC_OscConfig+0x2cc>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80030ee:	d011      	beq.n	8003114 <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f0:	68e3      	ldr	r3, [r4, #12]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d022      	beq.n	800313c <HAL_RCC_OscConfig+0x278>
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d138      	bne.n	800316c <HAL_RCC_OscConfig+0x2a8>
 80030fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030fe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003102:	6a1a      	ldr	r2, [r3, #32]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	621a      	str	r2, [r3, #32]
 800310a:	6a1a      	ldr	r2, [r3, #32]
 800310c:	f022 0204 	bic.w	r2, r2, #4
 8003110:	621a      	str	r2, [r3, #32]
 8003112:	e018      	b.n	8003146 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003114:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <HAL_RCC_OscConfig+0x2cc>)
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800311e:	f7fe fadf 	bl	80016e0 <HAL_GetTick>
 8003122:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <HAL_RCC_OscConfig+0x2cc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f413 7f80 	tst.w	r3, #256	; 0x100
 800312c:	d1e0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fe fad7 	bl	80016e0 <HAL_GetTick>
 8003132:	1b80      	subs	r0, r0, r6
 8003134:	2864      	cmp	r0, #100	; 0x64
 8003136:	d9f5      	bls.n	8003124 <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8003138:	2003      	movs	r0, #3
 800313a:	e0be      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800313c:	4a11      	ldr	r2, [pc, #68]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 800313e:	6a13      	ldr	r3, [r2, #32]
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003146:	68e3      	ldr	r3, [r4, #12]
 8003148:	b373      	cbz	r3, 80031a8 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800314a:	f7fe fac9 	bl	80016e0 <HAL_GetTick>
 800314e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f013 0f02 	tst.w	r3, #2
 8003158:	d137      	bne.n	80031ca <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315a:	f7fe fac1 	bl	80016e0 <HAL_GetTick>
 800315e:	1b80      	subs	r0, r0, r6
 8003160:	f241 3388 	movw	r3, #5000	; 0x1388
 8003164:	4298      	cmp	r0, r3
 8003166:	d9f3      	bls.n	8003150 <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 8003168:	2003      	movs	r0, #3
 800316a:	e0a6      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316c:	2b05      	cmp	r3, #5
 800316e:	d011      	beq.n	8003194 <HAL_RCC_OscConfig+0x2d0>
 8003170:	4b04      	ldr	r3, [pc, #16]	; (8003184 <HAL_RCC_OscConfig+0x2c0>)
 8003172:	6a1a      	ldr	r2, [r3, #32]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	621a      	str	r2, [r3, #32]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	f022 0204 	bic.w	r2, r2, #4
 8003180:	621a      	str	r2, [r3, #32]
 8003182:	e7e0      	b.n	8003146 <HAL_RCC_OscConfig+0x282>
 8003184:	40021000 	.word	0x40021000
 8003188:	42420000 	.word	0x42420000
 800318c:	42420480 	.word	0x42420480
 8003190:	40007000 	.word	0x40007000
 8003194:	4b4d      	ldr	r3, [pc, #308]	; (80032cc <HAL_RCC_OscConfig+0x408>)
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	f042 0204 	orr.w	r2, r2, #4
 800319c:	621a      	str	r2, [r3, #32]
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	f042 0201 	orr.w	r2, r2, #1
 80031a4:	621a      	str	r2, [r3, #32]
 80031a6:	e7ce      	b.n	8003146 <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 80031a8:	f7fe fa9a 	bl	80016e0 <HAL_GetTick>
 80031ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ae:	4b47      	ldr	r3, [pc, #284]	; (80032cc <HAL_RCC_OscConfig+0x408>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f013 0f02 	tst.w	r3, #2
 80031b6:	d008      	beq.n	80031ca <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7fe fa92 	bl	80016e0 <HAL_GetTick>
 80031bc:	1b80      	subs	r0, r0, r6
 80031be:	f241 3388 	movw	r3, #5000	; 0x1388
 80031c2:	4298      	cmp	r0, r3
 80031c4:	d9f3      	bls.n	80031ae <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 80031c6:	2003      	movs	r0, #3
 80031c8:	e077      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 80031ca:	b9e5      	cbnz	r5, 8003206 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031cc:	69e3      	ldr	r3, [r4, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d072      	beq.n	80032b8 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031d2:	4a3e      	ldr	r2, [pc, #248]	; (80032cc <HAL_RCC_OscConfig+0x408>)
 80031d4:	6852      	ldr	r2, [r2, #4]
 80031d6:	f002 020c 	and.w	r2, r2, #12
 80031da:	2a08      	cmp	r2, #8
 80031dc:	d056      	beq.n	800328c <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d017      	beq.n	8003212 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80031e2:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCC_OscConfig+0x40c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031e8:	f7fe fa7a 	bl	80016e0 <HAL_GetTick>
 80031ec:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ee:	4b37      	ldr	r3, [pc, #220]	; (80032cc <HAL_RCC_OscConfig+0x408>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80031f6:	d047      	beq.n	8003288 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f8:	f7fe fa72 	bl	80016e0 <HAL_GetTick>
 80031fc:	1b00      	subs	r0, r0, r4
 80031fe:	2802      	cmp	r0, #2
 8003200:	d9f5      	bls.n	80031ee <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8003202:	2003      	movs	r0, #3
 8003204:	e059      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003206:	4a31      	ldr	r2, [pc, #196]	; (80032cc <HAL_RCC_OscConfig+0x408>)
 8003208:	69d3      	ldr	r3, [r2, #28]
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320e:	61d3      	str	r3, [r2, #28]
 8003210:	e7dc      	b.n	80031cc <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8003212:	4b2f      	ldr	r3, [pc, #188]	; (80032d0 <HAL_RCC_OscConfig+0x40c>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003218:	f7fe fa62 	bl	80016e0 <HAL_GetTick>
 800321c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321e:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <HAL_RCC_OscConfig+0x408>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003226:	d006      	beq.n	8003236 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003228:	f7fe fa5a 	bl	80016e0 <HAL_GetTick>
 800322c:	1b40      	subs	r0, r0, r5
 800322e:	2802      	cmp	r0, #2
 8003230:	d9f5      	bls.n	800321e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003232:	2003      	movs	r0, #3
 8003234:	e041      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003236:	6a23      	ldr	r3, [r4, #32]
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323c:	d01a      	beq.n	8003274 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800323e:	4923      	ldr	r1, [pc, #140]	; (80032cc <HAL_RCC_OscConfig+0x408>)
 8003240:	684b      	ldr	r3, [r1, #4]
 8003242:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8003246:	6a22      	ldr	r2, [r4, #32]
 8003248:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800324a:	4302      	orrs	r2, r0
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003250:	4b1f      	ldr	r3, [pc, #124]	; (80032d0 <HAL_RCC_OscConfig+0x40c>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003256:	f7fe fa43 	bl	80016e0 <HAL_GetTick>
 800325a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x408>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003264:	d10e      	bne.n	8003284 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003266:	f7fe fa3b 	bl	80016e0 <HAL_GetTick>
 800326a:	1b00      	subs	r0, r0, r4
 800326c:	2802      	cmp	r0, #2
 800326e:	d9f5      	bls.n	800325c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8003270:	2003      	movs	r0, #3
 8003272:	e022      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003274:	4a15      	ldr	r2, [pc, #84]	; (80032cc <HAL_RCC_OscConfig+0x408>)
 8003276:	6853      	ldr	r3, [r2, #4]
 8003278:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800327c:	68a1      	ldr	r1, [r4, #8]
 800327e:	430b      	orrs	r3, r1
 8003280:	6053      	str	r3, [r2, #4]
 8003282:	e7dc      	b.n	800323e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8003284:	2000      	movs	r0, #0
 8003286:	e018      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
 8003288:	2000      	movs	r0, #0
 800328a:	e016      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800328c:	2b01      	cmp	r3, #1
 800328e:	d016      	beq.n	80032be <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8003290:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <HAL_RCC_OscConfig+0x408>)
 8003292:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003294:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003298:	6a22      	ldr	r2, [r4, #32]
 800329a:	4291      	cmp	r1, r2
 800329c:	d111      	bne.n	80032c2 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800329e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d10e      	bne.n	80032c6 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 80032a8:	2000      	movs	r0, #0
 80032aa:	e006      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 80032ac:	2001      	movs	r0, #1
}
 80032ae:	4770      	bx	lr
        return HAL_ERROR;
 80032b0:	2001      	movs	r0, #1
 80032b2:	e002      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80032b4:	2001      	movs	r0, #1
 80032b6:	e000      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80032b8:	2000      	movs	r0, #0
}
 80032ba:	b002      	add	sp, #8
 80032bc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80032be:	2001      	movs	r0, #1
 80032c0:	e7fb      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 80032c2:	2001      	movs	r0, #1
 80032c4:	e7f9      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
 80032c6:	2001      	movs	r0, #1
 80032c8:	e7f7      	b.n	80032ba <HAL_RCC_OscConfig+0x3f6>
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	42420060 	.word	0x42420060

080032d4 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80032d4:	4b01      	ldr	r3, [pc, #4]	; (80032dc <HAL_RCC_EnableCSS+0x8>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
}
 80032da:	4770      	bx	lr
 80032dc:	4242004c 	.word	0x4242004c

080032e0 <HAL_RCC_GetSysClockFreq>:
{
 80032e0:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032e2:	4b16      	ldr	r3, [pc, #88]	; (800333c <HAL_RCC_GetSysClockFreq+0x5c>)
 80032e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032e6:	f10d 0c18 	add.w	ip, sp, #24
 80032ea:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032ee:	f240 2301 	movw	r3, #513	; 0x201
 80032f2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80032f6:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_RCC_GetSysClockFreq+0x60>)
 80032f8:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80032fa:	f003 020c 	and.w	r2, r3, #12
 80032fe:	2a08      	cmp	r2, #8
 8003300:	d002      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8003302:	4810      	ldr	r0, [pc, #64]	; (8003344 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003304:	b006      	add	sp, #24
 8003306:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003308:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800330c:	4462      	add	r2, ip
 800330e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003312:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003316:	d00c      	beq.n	8003332 <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003318:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCC_GetSysClockFreq+0x60>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003320:	4463      	add	r3, ip
 8003322:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003326:	4807      	ldr	r0, [pc, #28]	; (8003344 <HAL_RCC_GetSysClockFreq+0x64>)
 8003328:	fb00 f002 	mul.w	r0, r0, r2
 800332c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003330:	e7e8      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003332:	4805      	ldr	r0, [pc, #20]	; (8003348 <HAL_RCC_GetSysClockFreq+0x68>)
 8003334:	fb00 f002 	mul.w	r0, r0, r2
 8003338:	e7e4      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x24>
 800333a:	bf00      	nop
 800333c:	0800459c 	.word	0x0800459c
 8003340:	40021000 	.word	0x40021000
 8003344:	007a1200 	.word	0x007a1200
 8003348:	003d0900 	.word	0x003d0900

0800334c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800334c:	2800      	cmp	r0, #0
 800334e:	f000 80a0 	beq.w	8003492 <HAL_RCC_ClockConfig+0x146>
{
 8003352:	b570      	push	{r4, r5, r6, lr}
 8003354:	460d      	mov	r5, r1
 8003356:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b52      	ldr	r3, [pc, #328]	; (80034a4 <HAL_RCC_ClockConfig+0x158>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	428b      	cmp	r3, r1
 8003362:	d20b      	bcs.n	800337c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003364:	4a4f      	ldr	r2, [pc, #316]	; (80034a4 <HAL_RCC_ClockConfig+0x158>)
 8003366:	6813      	ldr	r3, [r2, #0]
 8003368:	f023 0307 	bic.w	r3, r3, #7
 800336c:	430b      	orrs	r3, r1
 800336e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003370:	6813      	ldr	r3, [r2, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	428b      	cmp	r3, r1
 8003378:	f040 808d 	bne.w	8003496 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	f013 0f02 	tst.w	r3, #2
 8003382:	d017      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	f013 0f04 	tst.w	r3, #4
 8003388:	d004      	beq.n	8003394 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800338a:	4a47      	ldr	r2, [pc, #284]	; (80034a8 <HAL_RCC_ClockConfig+0x15c>)
 800338c:	6853      	ldr	r3, [r2, #4]
 800338e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003392:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	f013 0f08 	tst.w	r3, #8
 800339a:	d004      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800339c:	4a42      	ldr	r2, [pc, #264]	; (80034a8 <HAL_RCC_ClockConfig+0x15c>)
 800339e:	6853      	ldr	r3, [r2, #4]
 80033a0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033a4:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a6:	4a40      	ldr	r2, [pc, #256]	; (80034a8 <HAL_RCC_ClockConfig+0x15c>)
 80033a8:	6853      	ldr	r3, [r2, #4]
 80033aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ae:	68a1      	ldr	r1, [r4, #8]
 80033b0:	430b      	orrs	r3, r1
 80033b2:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	f013 0f01 	tst.w	r3, #1
 80033ba:	d031      	beq.n	8003420 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033bc:	6863      	ldr	r3, [r4, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d020      	beq.n	8003404 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d025      	beq.n	8003412 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c6:	4a38      	ldr	r2, [pc, #224]	; (80034a8 <HAL_RCC_ClockConfig+0x15c>)
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	f012 0f02 	tst.w	r2, #2
 80033ce:	d064      	beq.n	800349a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d0:	4935      	ldr	r1, [pc, #212]	; (80034a8 <HAL_RCC_ClockConfig+0x15c>)
 80033d2:	684a      	ldr	r2, [r1, #4]
 80033d4:	f022 0203 	bic.w	r2, r2, #3
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80033dc:	f7fe f980 	bl	80016e0 <HAL_GetTick>
 80033e0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	4b31      	ldr	r3, [pc, #196]	; (80034a8 <HAL_RCC_ClockConfig+0x15c>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	6862      	ldr	r2, [r4, #4]
 80033ec:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80033f0:	d016      	beq.n	8003420 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f2:	f7fe f975 	bl	80016e0 <HAL_GetTick>
 80033f6:	1b80      	subs	r0, r0, r6
 80033f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80033fc:	4298      	cmp	r0, r3
 80033fe:	d9f0      	bls.n	80033e2 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8003400:	2003      	movs	r0, #3
 8003402:	e045      	b.n	8003490 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003404:	4a28      	ldr	r2, [pc, #160]	; (80034a8 <HAL_RCC_ClockConfig+0x15c>)
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800340c:	d1e0      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800340e:	2001      	movs	r0, #1
 8003410:	e03e      	b.n	8003490 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003412:	4a25      	ldr	r2, [pc, #148]	; (80034a8 <HAL_RCC_ClockConfig+0x15c>)
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800341a:	d1d9      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800341c:	2001      	movs	r0, #1
 800341e:	e037      	b.n	8003490 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003420:	4b20      	ldr	r3, [pc, #128]	; (80034a4 <HAL_RCC_ClockConfig+0x158>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	42ab      	cmp	r3, r5
 800342a:	d90a      	bls.n	8003442 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342c:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <HAL_RCC_ClockConfig+0x158>)
 800342e:	6813      	ldr	r3, [r2, #0]
 8003430:	f023 0307 	bic.w	r3, r3, #7
 8003434:	432b      	orrs	r3, r5
 8003436:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003438:	6813      	ldr	r3, [r2, #0]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	42ab      	cmp	r3, r5
 8003440:	d12d      	bne.n	800349e <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	f013 0f04 	tst.w	r3, #4
 8003448:	d006      	beq.n	8003458 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800344a:	4a17      	ldr	r2, [pc, #92]	; (80034a8 <HAL_RCC_ClockConfig+0x15c>)
 800344c:	6853      	ldr	r3, [r2, #4]
 800344e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003452:	68e1      	ldr	r1, [r4, #12]
 8003454:	430b      	orrs	r3, r1
 8003456:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	f013 0f08 	tst.w	r3, #8
 800345e:	d007      	beq.n	8003470 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003460:	4a11      	ldr	r2, [pc, #68]	; (80034a8 <HAL_RCC_ClockConfig+0x15c>)
 8003462:	6853      	ldr	r3, [r2, #4]
 8003464:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003468:	6921      	ldr	r1, [r4, #16]
 800346a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800346e:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003470:	f7ff ff36 	bl	80032e0 <HAL_RCC_GetSysClockFreq>
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <HAL_RCC_ClockConfig+0x15c>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800347c:	4a0b      	ldr	r2, [pc, #44]	; (80034ac <HAL_RCC_ClockConfig+0x160>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	40d8      	lsrs	r0, r3
 8003482:	4b0b      	ldr	r3, [pc, #44]	; (80034b0 <HAL_RCC_ClockConfig+0x164>)
 8003484:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_ClockConfig+0x168>)
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	f7fe f8e5 	bl	8001658 <HAL_InitTick>
  return HAL_OK;
 800348e:	2000      	movs	r0, #0
}
 8003490:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003492:	2001      	movs	r0, #1
}
 8003494:	4770      	bx	lr
    return HAL_ERROR;
 8003496:	2001      	movs	r0, #1
 8003498:	e7fa      	b.n	8003490 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800349a:	2001      	movs	r0, #1
 800349c:	e7f8      	b.n	8003490 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800349e:	2001      	movs	r0, #1
 80034a0:	e7f6      	b.n	8003490 <HAL_RCC_ClockConfig+0x144>
 80034a2:	bf00      	nop
 80034a4:	40022000 	.word	0x40022000
 80034a8:	40021000 	.word	0x40021000
 80034ac:	08004544 	.word	0x08004544
 80034b0:	20000004 	.word	0x20000004
 80034b4:	20000104 	.word	0x20000104

080034b8 <HAL_RCC_GetHCLKFreq>:
}
 80034b8:	4b01      	ldr	r3, [pc, #4]	; (80034c0 <HAL_RCC_GetHCLKFreq+0x8>)
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000004 	.word	0x20000004

080034c4 <HAL_RCC_GetPCLK2Freq>:
{
 80034c4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034c6:	f7ff fff7 	bl	80034b8 <HAL_RCC_GetHCLKFreq>
 80034ca:	4b04      	ldr	r3, [pc, #16]	; (80034dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80034d2:	4a03      	ldr	r2, [pc, #12]	; (80034e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80034d4:	5cd3      	ldrb	r3, [r2, r3]
}
 80034d6:	40d8      	lsrs	r0, r3
 80034d8:	bd08      	pop	{r3, pc}
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	08004554 	.word	0x08004554

080034e4 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_RCC_NMI_IRQHandler>:
{
 80034e8:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80034f2:	d100      	bne.n	80034f6 <HAL_RCC_NMI_IRQHandler+0xe>
}
 80034f4:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 80034f6:	f7ff fff5 	bl	80034e4 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80034fa:	4b03      	ldr	r3, [pc, #12]	; (8003508 <HAL_RCC_NMI_IRQHandler+0x20>)
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	701a      	strb	r2, [r3, #0]
}
 8003500:	e7f8      	b.n	80034f4 <HAL_RCC_NMI_IRQHandler+0xc>
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	4002100a 	.word	0x4002100a

0800350c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800350c:	b570      	push	{r4, r5, r6, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003512:	6803      	ldr	r3, [r0, #0]
 8003514:	f013 0f01 	tst.w	r3, #1
 8003518:	d034      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351a:	4b3e      	ldr	r3, [pc, #248]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003522:	d147      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003524:	4b3b      	ldr	r3, [pc, #236]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800352c:	61da      	str	r2, [r3, #28]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003534:	9301      	str	r3, [sp, #4]
 8003536:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003538:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353a:	4b37      	ldr	r3, [pc, #220]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003542:	d039      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003544:	4b33      	ldr	r3, [pc, #204]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003546:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003548:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800354c:	d011      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x66>
 800354e:	6862      	ldr	r2, [r4, #4]
 8003550:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003554:	429a      	cmp	r2, r3
 8003556:	d00c      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003558:	4a2e      	ldr	r2, [pc, #184]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800355a:	6a13      	ldr	r3, [r2, #32]
 800355c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003560:	492e      	ldr	r1, [pc, #184]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003562:	2601      	movs	r6, #1
 8003564:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003566:	2600      	movs	r6, #0
 8003568:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800356a:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800356c:	f013 0f01 	tst.w	r3, #1
 8003570:	d136      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003572:	4a28      	ldr	r2, [pc, #160]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003574:	6a13      	ldr	r3, [r2, #32]
 8003576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357a:	6861      	ldr	r1, [r4, #4]
 800357c:	430b      	orrs	r3, r1
 800357e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003580:	2d00      	cmp	r5, #0
 8003582:	d13e      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	f013 0f02 	tst.w	r3, #2
 800358a:	d006      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800358c:	4a21      	ldr	r2, [pc, #132]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800358e:	6853      	ldr	r3, [r2, #4]
 8003590:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003594:	68a1      	ldr	r1, [r4, #8]
 8003596:	430b      	orrs	r3, r1
 8003598:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	f013 0f10 	tst.w	r3, #16
 80035a0:	d034      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035a2:	4a1c      	ldr	r2, [pc, #112]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80035a4:	6853      	ldr	r3, [r2, #4]
 80035a6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80035aa:	68e1      	ldr	r1, [r4, #12]
 80035ac:	430b      	orrs	r3, r1
 80035ae:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035b0:	2000      	movs	r0, #0
 80035b2:	e02c      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x102>
    FlagStatus pwrclkchanged = RESET;
 80035b4:	2500      	movs	r5, #0
 80035b6:	e7c0      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035b8:	4a17      	ldr	r2, [pc, #92]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80035ba:	6813      	ldr	r3, [r2, #0]
 80035bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80035c2:	f7fe f88d 	bl	80016e0 <HAL_GetTick>
 80035c6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4b13      	ldr	r3, [pc, #76]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80035d0:	d1b8      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d2:	f7fe f885 	bl	80016e0 <HAL_GetTick>
 80035d6:	1b80      	subs	r0, r0, r6
 80035d8:	2864      	cmp	r0, #100	; 0x64
 80035da:	d9f5      	bls.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 80035dc:	2003      	movs	r0, #3
 80035de:	e016      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x102>
        tickstart = HAL_GetTick();
 80035e0:	f7fe f87e 	bl	80016e0 <HAL_GetTick>
 80035e4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e6:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f013 0f02 	tst.w	r3, #2
 80035ee:	d1c0      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f0:	f7fe f876 	bl	80016e0 <HAL_GetTick>
 80035f4:	1b80      	subs	r0, r0, r6
 80035f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80035fa:	4298      	cmp	r0, r3
 80035fc:	d9f3      	bls.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
 80035fe:	2003      	movs	r0, #3
 8003600:	e005      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x102>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003602:	69d3      	ldr	r3, [r2, #28]
 8003604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003608:	61d3      	str	r3, [r2, #28]
 800360a:	e7bb      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 800360c:	2000      	movs	r0, #0
}
 800360e:	b002      	add	sp, #8
 8003610:	bd70      	pop	{r4, r5, r6, pc}
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	40007000 	.word	0x40007000
 800361c:	42420440 	.word	0x42420440

08003620 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003620:	b510      	push	{r4, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003626:	4b36      	ldr	r3, [pc, #216]	; (8003700 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8003628:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800362a:	f10d 0c18 	add.w	ip, sp, #24
 800362e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003632:	f240 2301 	movw	r3, #513	; 0x201
 8003636:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800363a:	2c02      	cmp	r4, #2
 800363c:	d052      	beq.n	80036e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 800363e:	2c10      	cmp	r4, #16
 8003640:	d004      	beq.n	800364c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 8003642:	2c01      	cmp	r4, #1
 8003644:	d02c      	beq.n	80036a0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8003646:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8003648:	b006      	add	sp, #24
 800364a:	bd10      	pop	{r4, pc}
      temp_reg = RCC->CFGR;
 800364c:	4b2d      	ldr	r3, [pc, #180]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 800364e:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003656:	d0f7      	beq.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003658:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800365c:	a906      	add	r1, sp, #24
 800365e:	440b      	add	r3, r1
 8003660:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003664:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003668:	d016      	beq.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800366a:	4b26      	ldr	r3, [pc, #152]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003672:	440b      	add	r3, r1
 8003674:	f813 2c14 	ldrb.w	r2, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003678:	4b23      	ldr	r3, [pc, #140]	; (8003708 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 800367a:	fbb3 f3f2 	udiv	r3, r3, r2
 800367e:	fb00 f003 	mul.w	r0, r0, r3
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800368a:	d1dd      	bne.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
          frequency = (pllclk * 2) / 3;
 800368c:	0040      	lsls	r0, r0, #1
 800368e:	4b1f      	ldr	r3, [pc, #124]	; (800370c <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8003690:	fba3 3000 	umull	r3, r0, r3, r0
 8003694:	0840      	lsrs	r0, r0, #1
 8003696:	e7d7      	b.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003698:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 800369a:	fb03 f000 	mul.w	r0, r3, r0
 800369e:	e7f0      	b.n	8003682 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
      temp_reg = RCC->BDCR;
 80036a0:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80036a4:	f240 3202 	movw	r2, #770	; 0x302
 80036a8:	401a      	ands	r2, r3
 80036aa:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80036ae:	d024      	beq.n	80036fa <HAL_RCCEx_GetPeriphCLKFreq+0xda>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80036b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b8:	d004      	beq.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80036ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036be:	d009      	beq.n	80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  uint32_t temp_reg = 0U, frequency = 0U;
 80036c0:	2000      	movs	r0, #0
 80036c2:	e7c1      	b.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80036c4:	4a0f      	ldr	r2, [pc, #60]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 80036c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036c8:	f012 0f02 	tst.w	r2, #2
 80036cc:	d0f5      	beq.n	80036ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        frequency = LSI_VALUE;
 80036ce:	f649 4040 	movw	r0, #40000	; 0x9c40
 80036d2:	e7b9      	b.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80036dc:	d0b4      	beq.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = HSE_VALUE / 128U;
 80036de:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 80036e2:	e7b1      	b.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80036e4:	f7ff feee 	bl	80034c4 <HAL_RCC_GetPCLK2Freq>
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80036f0:	3301      	adds	r3, #1
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80036f8:	e7a6      	b.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = LSE_VALUE;
 80036fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80036fe:	e7a3      	b.n	8003648 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8003700:	0800459c 	.word	0x0800459c
 8003704:	40021000 	.word	0x40021000
 8003708:	007a1200 	.word	0x007a1200
 800370c:	aaaaaaab 	.word	0xaaaaaaab
 8003710:	003d0900 	.word	0x003d0900

08003714 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003714:	b084      	sub	sp, #16
 8003716:	a801      	add	r0, sp, #4
 8003718:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800371c:	2000      	movs	r0, #0
 800371e:	b004      	add	sp, #16
 8003720:	4770      	bx	lr

08003722 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003722:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003724:	2000      	movs	r0, #0
 8003726:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800372a:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 800372e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8003732:	4770      	bx	lr

08003734 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003734:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003738:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800373c:	045b      	lsls	r3, r3, #17
 800373e:	0c5b      	lsrs	r3, r3, #17
 8003740:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003744:	2000      	movs	r0, #0
 8003746:	4770      	bx	lr

08003748 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003748:	2000      	movs	r0, #0
 800374a:	4770      	bx	lr

0800374c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800374c:	b084      	sub	sp, #16
 800374e:	b410      	push	{r4}
 8003750:	4604      	mov	r4, r0
 8003752:	a802      	add	r0, sp, #8
 8003754:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003758:	2301      	movs	r3, #1
 800375a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800375e:	2000      	movs	r0, #0
 8003760:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003764:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003768:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 800376c:	bc10      	pop	{r4}
 800376e:	b004      	add	sp, #16
 8003770:	4770      	bx	lr

08003772 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003772:	b430      	push	{r4, r5}
 8003774:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003776:	780c      	ldrb	r4, [r1, #0]
 8003778:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800377c:	b292      	uxth	r2, r2
 800377e:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8003782:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003786:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8003788:	78c8      	ldrb	r0, [r1, #3]
 800378a:	2803      	cmp	r0, #3
 800378c:	d85a      	bhi.n	8003844 <USB_ActivateEndpoint+0xd2>
 800378e:	e8df f000 	tbb	[pc, r0]
 8003792:	554e      	.short	0x554e
 8003794:	5102      	.short	0x5102
 8003796:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003798:	f248 0580 	movw	r5, #32896	; 0x8080
 800379c:	432a      	orrs	r2, r5
 800379e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80037a2:	780c      	ldrb	r4, [r1, #0]
 80037a4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80037a8:	b292      	uxth	r2, r2
 80037aa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80037ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037b2:	4322      	orrs	r2, r4
 80037b4:	432a      	orrs	r2, r5
 80037b6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 80037ba:	7b0a      	ldrb	r2, [r1, #12]
 80037bc:	2a00      	cmp	r2, #0
 80037be:	f040 80b6 	bne.w	800392e <USB_ActivateEndpoint+0x1bc>
  {
    if (ep->is_in != 0U)
 80037c2:	784a      	ldrb	r2, [r1, #1]
 80037c4:	2a00      	cmp	r2, #0
 80037c6:	d04e      	beq.n	8003866 <USB_ActivateEndpoint+0xf4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037c8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80037cc:	b292      	uxth	r2, r2
 80037ce:	441a      	add	r2, r3
 80037d0:	780c      	ldrb	r4, [r1, #0]
 80037d2:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80037d6:	88cc      	ldrh	r4, [r1, #6]
 80037d8:	0864      	lsrs	r4, r4, #1
 80037da:	0064      	lsls	r4, r4, #1
 80037dc:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80037e0:	780c      	ldrb	r4, [r1, #0]
 80037e2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80037e6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80037ea:	d00c      	beq.n	8003806 <USB_ActivateEndpoint+0x94>
 80037ec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80037f0:	b292      	uxth	r2, r2
 80037f2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80037f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037fe:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003802:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003806:	78ca      	ldrb	r2, [r1, #3]
 8003808:	2a01      	cmp	r2, #1
 800380a:	d01d      	beq.n	8003848 <USB_ActivateEndpoint+0xd6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800380c:	7809      	ldrb	r1, [r1, #0]
 800380e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003812:	b292      	uxth	r2, r2
 8003814:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381c:	f082 0220 	eor.w	r2, r2, #32
 8003820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003824:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003828:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800382c:	e064      	b.n	80038f8 <USB_ActivateEndpoint+0x186>
      wEpRegVal |= USB_EP_CONTROL;
 800382e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8003832:	e7b1      	b.n	8003798 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003834:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003838:	2000      	movs	r0, #0
      break;
 800383a:	e7ad      	b.n	8003798 <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800383c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8003840:	2000      	movs	r0, #0
      break;
 8003842:	e7a9      	b.n	8003798 <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 8003844:	2001      	movs	r0, #1
 8003846:	e7a7      	b.n	8003798 <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003848:	7809      	ldrb	r1, [r1, #0]
 800384a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800384e:	b292      	uxth	r2, r2
 8003850:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003858:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800385c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003860:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003864:	e048      	b.n	80038f8 <USB_ActivateEndpoint+0x186>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003866:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800386a:	b292      	uxth	r2, r2
 800386c:	441a      	add	r2, r3
 800386e:	780c      	ldrb	r4, [r1, #0]
 8003870:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003874:	88cc      	ldrh	r4, [r1, #6]
 8003876:	0864      	lsrs	r4, r4, #1
 8003878:	0064      	lsls	r4, r4, #1
 800387a:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800387e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003882:	b292      	uxth	r2, r2
 8003884:	441a      	add	r2, r3
 8003886:	780c      	ldrb	r4, [r1, #0]
 8003888:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800388c:	690c      	ldr	r4, [r1, #16]
 800388e:	bbac      	cbnz	r4, 80038fc <USB_ActivateEndpoint+0x18a>
 8003890:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8003894:	b2a4      	uxth	r4, r4
 8003896:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 800389a:	b2a4      	uxth	r4, r4
 800389c:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 80038a0:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 80038a4:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 80038a8:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 80038ac:	b2a4      	uxth	r4, r4
 80038ae:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038b2:	780c      	ldrb	r4, [r1, #0]
 80038b4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80038b8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80038bc:	d00c      	beq.n	80038d8 <USB_ActivateEndpoint+0x166>
 80038be:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80038c2:	b292      	uxth	r2, r2
 80038c4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80038c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038cc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80038d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038d4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80038d8:	7809      	ldrb	r1, [r1, #0]
 80038da:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80038de:	b292      	uxth	r2, r2
 80038e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038e8:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80038ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038f4:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 80038f8:	bc30      	pop	{r4, r5}
 80038fa:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80038fc:	2c3e      	cmp	r4, #62	; 0x3e
 80038fe:	d809      	bhi.n	8003914 <USB_ActivateEndpoint+0x1a2>
 8003900:	0865      	lsrs	r5, r4, #1
 8003902:	f014 0f01 	tst.w	r4, #1
 8003906:	d000      	beq.n	800390a <USB_ActivateEndpoint+0x198>
 8003908:	3501      	adds	r5, #1
 800390a:	02ad      	lsls	r5, r5, #10
 800390c:	b2ad      	uxth	r5, r5
 800390e:	f8a2 540c 	strh.w	r5, [r2, #1036]	; 0x40c
 8003912:	e7ce      	b.n	80038b2 <USB_ActivateEndpoint+0x140>
 8003914:	0965      	lsrs	r5, r4, #5
 8003916:	f014 0f1f 	tst.w	r4, #31
 800391a:	d100      	bne.n	800391e <USB_ActivateEndpoint+0x1ac>
 800391c:	3d01      	subs	r5, #1
 800391e:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 8003922:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003926:	b2a4      	uxth	r4, r4
 8003928:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 800392c:	e7c1      	b.n	80038b2 <USB_ActivateEndpoint+0x140>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800392e:	780c      	ldrb	r4, [r1, #0]
 8003930:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003934:	b292      	uxth	r2, r2
 8003936:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800393a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800393e:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003942:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003946:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800394a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800394e:	b292      	uxth	r2, r2
 8003950:	441a      	add	r2, r3
 8003952:	780c      	ldrb	r4, [r1, #0]
 8003954:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003958:	890c      	ldrh	r4, [r1, #8]
 800395a:	0864      	lsrs	r4, r4, #1
 800395c:	0064      	lsls	r4, r4, #1
 800395e:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 8003962:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003966:	b292      	uxth	r2, r2
 8003968:	441a      	add	r2, r3
 800396a:	780c      	ldrb	r4, [r1, #0]
 800396c:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8003970:	894c      	ldrh	r4, [r1, #10]
 8003972:	0864      	lsrs	r4, r4, #1
 8003974:	0064      	lsls	r4, r4, #1
 8003976:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 800397a:	784a      	ldrb	r2, [r1, #1]
 800397c:	2a00      	cmp	r2, #0
 800397e:	d140      	bne.n	8003a02 <USB_ActivateEndpoint+0x290>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003980:	780c      	ldrb	r4, [r1, #0]
 8003982:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003986:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800398a:	d00c      	beq.n	80039a6 <USB_ActivateEndpoint+0x234>
 800398c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003990:	b292      	uxth	r2, r2
 8003992:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003996:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800399a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800399e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039a2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039a6:	780c      	ldrb	r4, [r1, #0]
 80039a8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80039ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80039b0:	d00c      	beq.n	80039cc <USB_ActivateEndpoint+0x25a>
 80039b2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80039b6:	b292      	uxth	r2, r2
 80039b8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80039bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039c4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80039c8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039cc:	780d      	ldrb	r5, [r1, #0]
 80039ce:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80039d2:	b292      	uxth	r2, r2
 80039d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039dc:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80039e0:	f248 0480 	movw	r4, #32896	; 0x8080
 80039e4:	4322      	orrs	r2, r4
 80039e6:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039ea:	7809      	ldrb	r1, [r1, #0]
 80039ec:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80039f0:	b292      	uxth	r2, r2
 80039f2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80039f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fa:	4322      	orrs	r2, r4
 80039fc:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003a00:	e77a      	b.n	80038f8 <USB_ActivateEndpoint+0x186>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a02:	780c      	ldrb	r4, [r1, #0]
 8003a04:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003a08:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003a0c:	d00c      	beq.n	8003a28 <USB_ActivateEndpoint+0x2b6>
 8003a0e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003a12:	b292      	uxth	r2, r2
 8003a14:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003a18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a1c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003a20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a24:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a28:	780c      	ldrb	r4, [r1, #0]
 8003a2a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003a2e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a32:	d00c      	beq.n	8003a4e <USB_ActivateEndpoint+0x2dc>
 8003a34:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003a38:	b292      	uxth	r2, r2
 8003a3a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003a3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a46:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003a4a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8003a4e:	78ca      	ldrb	r2, [r1, #3]
 8003a50:	2a01      	cmp	r2, #1
 8003a52:	d01e      	beq.n	8003a92 <USB_ActivateEndpoint+0x320>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a54:	780c      	ldrb	r4, [r1, #0]
 8003a56:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003a5a:	b292      	uxth	r2, r2
 8003a5c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a64:	f082 0220 	eor.w	r2, r2, #32
 8003a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a70:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a74:	7809      	ldrb	r1, [r1, #0]
 8003a76:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003a7a:	b292      	uxth	r2, r2
 8003a7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a8c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003a90:	e732      	b.n	80038f8 <USB_ActivateEndpoint+0x186>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a92:	780c      	ldrb	r4, [r1, #0]
 8003a94:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003a98:	b292      	uxth	r2, r2
 8003a9a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aaa:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8003aae:	e7e1      	b.n	8003a74 <USB_ActivateEndpoint+0x302>

08003ab0 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003ab0:	784b      	ldrb	r3, [r1, #1]
 8003ab2:	b18b      	cbz	r3, 8003ad8 <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003ab4:	780a      	ldrb	r2, [r1, #0]
 8003ab6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac4:	f083 0310 	eor.w	r3, r3, #16
 8003ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003ad8:	780a      	ldrb	r2, [r1, #0]
 8003ada:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003af8:	e7ec      	b.n	8003ad4 <USB_EPSetStall+0x24>

08003afa <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003afa:	7b0b      	ldrb	r3, [r1, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d14b      	bne.n	8003b98 <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8003b00:	784b      	ldrb	r3, [r1, #1]
 8003b02:	b333      	cbz	r3, 8003b52 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b04:	780a      	ldrb	r2, [r1, #0]
 8003b06:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b0a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003b0e:	d00c      	beq.n	8003b2a <USB_EPClearStall+0x30>
 8003b10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b26:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003b2a:	78cb      	ldrb	r3, [r1, #3]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d033      	beq.n	8003b98 <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b30:	780a      	ldrb	r2, [r1, #0]
 8003b32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b40:	f083 0320 	eor.w	r3, r3, #32
 8003b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003b50:	e022      	b.n	8003b98 <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b52:	780a      	ldrb	r2, [r1, #0]
 8003b54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b58:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003b5c:	d00c      	beq.n	8003b78 <USB_EPClearStall+0x7e>
 8003b5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b74:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b78:	780a      	ldrb	r2, [r1, #0]
 8003b7a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b88:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b94:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8003b98:	2000      	movs	r0, #0
 8003b9a:	4770      	bx	lr

08003b9c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8003b9c:	b911      	cbnz	r1, 8003ba4 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	4770      	bx	lr

08003ba8 <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003ba8:	2000      	movs	r0, #0
 8003baa:	4770      	bx	lr

08003bac <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8003bac:	2000      	movs	r0, #0
 8003bae:	4770      	bx	lr

08003bb0 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003bb0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003bb4:	b280      	uxth	r0, r0
 8003bb6:	4770      	bx	lr

08003bb8 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003bb8:	2000      	movs	r0, #0
 8003bba:	4770      	bx	lr

08003bbc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003bbc:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003bbe:	1c5c      	adds	r4, r3, #1
 8003bc0:	0864      	lsrs	r4, r4, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003bc2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003bc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8003bca:	b144      	cbz	r4, 8003bde <USB_WritePMA+0x22>
  {
    temp1 = *pBuf;
 8003bcc:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003bce:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8003bd0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003bd4:	f822 3b04 	strh.w	r3, [r2], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8003bd8:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8003bda:	3c01      	subs	r4, #1
 8003bdc:	e7f5      	b.n	8003bca <USB_WritePMA+0xe>
  }
}
 8003bde:	bc10      	pop	{r4}
 8003be0:	4770      	bx	lr

08003be2 <USB_EPStartXfer>:
{
 8003be2:	b570      	push	{r4, r5, r6, lr}
 8003be4:	4605      	mov	r5, r0
 8003be6:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 8003be8:	784b      	ldrb	r3, [r1, #1]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d037      	beq.n	8003c5e <USB_EPStartXfer+0x7c>
    if (ep->doublebuffer == 0U)
 8003bee:	7b0a      	ldrb	r2, [r1, #12]
 8003bf0:	2a00      	cmp	r2, #0
 8003bf2:	f040 8326 	bne.w	8004242 <USB_EPStartXfer+0x660>
      if (ep->xfer_len > ep->maxpacket)
 8003bf6:	698b      	ldr	r3, [r1, #24]
 8003bf8:	690a      	ldr	r2, [r1, #16]
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	f240 8304 	bls.w	8004208 <USB_EPStartXfer+0x626>
        ep->xfer_len -= len;
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003c04:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	442b      	add	r3, r5
 8003c0c:	7821      	ldrb	r1, [r4, #0]
 8003c0e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003c12:	2a00      	cmp	r2, #0
 8003c14:	f040 82fc 	bne.w	8004210 <USB_EPStartXfer+0x62e>
 8003c18:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003c1c:	b292      	uxth	r2, r2
 8003c1e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003c22:	b292      	uxth	r2, r2
 8003c24:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003c28:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003c2c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003c30:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003c34:	b292      	uxth	r2, r2
 8003c36:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c3a:	7822      	ldrb	r2, [r4, #0]
 8003c3c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c56:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8003c5a:	2000      	movs	r0, #0
}
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8003c5e:	698e      	ldr	r6, [r1, #24]
 8003c60:	690a      	ldr	r2, [r1, #16]
 8003c62:	4296      	cmp	r6, r2
 8003c64:	d900      	bls.n	8003c68 <USB_EPStartXfer+0x86>
      len = ep->maxpacket;
 8003c66:	4616      	mov	r6, r2
    if (ep->doublebuffer == 0U)
 8003c68:	7b23      	ldrb	r3, [r4, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d039      	beq.n	8003ce2 <USB_EPStartXfer+0x100>
      if (ep->type == EP_TYPE_BULK)
 8003c6e:	78e3      	ldrb	r3, [r4, #3]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d058      	beq.n	8003d26 <USB_EPStartXfer+0x144>
        PCD_SET_EP_DBUF(USBx, ep->num);
 8003c74:	7822      	ldrb	r2, [r4, #0]
 8003c76:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c84:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c8c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
        ep->xfer_len_db -= len;
 8003c90:	6a23      	ldr	r3, [r4, #32]
 8003c92:	1b9b      	subs	r3, r3, r6
 8003c94:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003c96:	7823      	ldrb	r3, [r4, #0]
 8003c98:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8003c9c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003ca0:	f000 8226 	beq.w	80040f0 <USB_EPStartXfer+0x50e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ca4:	7862      	ldrb	r2, [r4, #1]
 8003ca6:	2a00      	cmp	r2, #0
 8003ca8:	f040 81ca 	bne.w	8004040 <USB_EPStartXfer+0x45e>
 8003cac:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003cb0:	b292      	uxth	r2, r2
 8003cb2:	442a      	add	r2, r5
 8003cb4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8003cb8:	2e00      	cmp	r6, #0
 8003cba:	f040 81a8 	bne.w	800400e <USB_EPStartXfer+0x42c>
 8003cbe:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003cc2:	b292      	uxth	r2, r2
 8003cc4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003cc8:	b292      	uxth	r2, r2
 8003cca:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003cce:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003cd2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003cd6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003cda:	b292      	uxth	r2, r2
 8003cdc:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003ce0:	e1b0      	b.n	8004044 <USB_EPStartXfer+0x462>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003ce2:	b2b6      	uxth	r6, r6
 8003ce4:	4633      	mov	r3, r6
 8003ce6:	88e2      	ldrh	r2, [r4, #6]
 8003ce8:	6961      	ldr	r1, [r4, #20]
 8003cea:	4628      	mov	r0, r5
 8003cec:	f7ff ff66 	bl	8003bbc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003cf0:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	442b      	add	r3, r5
 8003cf8:	7822      	ldrb	r2, [r4, #0]
 8003cfa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003cfe:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003d02:	7822      	ldrb	r2, [r4, #0]
 8003d04:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d12:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d1e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8003d22:	2000      	movs	r0, #0
 8003d24:	e79a      	b.n	8003c5c <USB_EPStartXfer+0x7a>
        if (ep->xfer_len_db > ep->maxpacket)
 8003d26:	6a23      	ldr	r3, [r4, #32]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	f080 8152 	bcs.w	8003fd2 <USB_EPStartXfer+0x3f0>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003d2e:	7822      	ldrb	r2, [r4, #0]
 8003d30:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d46:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8003d4a:	6a23      	ldr	r3, [r4, #32]
 8003d4c:	1b9b      	subs	r3, r3, r6
 8003d4e:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003d50:	7823      	ldrb	r3, [r4, #0]
 8003d52:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8003d56:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d5a:	f000 809d 	beq.w	8003e98 <USB_EPStartXfer+0x2b6>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d5e:	7862      	ldrb	r2, [r4, #1]
 8003d60:	bb8a      	cbnz	r2, 8003dc6 <USB_EPStartXfer+0x1e4>
 8003d62:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003d66:	b292      	uxth	r2, r2
 8003d68:	442a      	add	r2, r5
 8003d6a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8003d6e:	b98e      	cbnz	r6, 8003d94 <USB_EPStartXfer+0x1b2>
 8003d70:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003d74:	b292      	uxth	r2, r2
 8003d76:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003d7a:	b292      	uxth	r2, r2
 8003d7c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003d80:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003d84:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003d88:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003d8c:	b292      	uxth	r2, r2
 8003d8e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003d92:	e01a      	b.n	8003dca <USB_EPStartXfer+0x1e8>
 8003d94:	2e3e      	cmp	r6, #62	; 0x3e
 8003d96:	d809      	bhi.n	8003dac <USB_EPStartXfer+0x1ca>
 8003d98:	0872      	lsrs	r2, r6, #1
 8003d9a:	f016 0f01 	tst.w	r6, #1
 8003d9e:	d000      	beq.n	8003da2 <USB_EPStartXfer+0x1c0>
 8003da0:	3201      	adds	r2, #1
 8003da2:	0292      	lsls	r2, r2, #10
 8003da4:	b292      	uxth	r2, r2
 8003da6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003daa:	e00e      	b.n	8003dca <USB_EPStartXfer+0x1e8>
 8003dac:	0972      	lsrs	r2, r6, #5
 8003dae:	f016 0f1f 	tst.w	r6, #31
 8003db2:	d100      	bne.n	8003db6 <USB_EPStartXfer+0x1d4>
 8003db4:	3a01      	subs	r2, #1
 8003db6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003dba:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003dbe:	b292      	uxth	r2, r2
 8003dc0:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003dc4:	e001      	b.n	8003dca <USB_EPStartXfer+0x1e8>
 8003dc6:	2a01      	cmp	r2, #1
 8003dc8:	d02b      	beq.n	8003e22 <USB_EPStartXfer+0x240>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dca:	b2b3      	uxth	r3, r6
 8003dcc:	8962      	ldrh	r2, [r4, #10]
 8003dce:	6961      	ldr	r1, [r4, #20]
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f7ff fef3 	bl	8003bbc <USB_WritePMA>
            ep->xfer_buff += len;
 8003dd6:	6963      	ldr	r3, [r4, #20]
 8003dd8:	4433      	add	r3, r6
 8003dda:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003ddc:	6a23      	ldr	r3, [r4, #32]
 8003dde:	6922      	ldr	r2, [r4, #16]
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d928      	bls.n	8003e36 <USB_EPStartXfer+0x254>
              ep->xfer_len_db -= len;
 8003de4:	1b9b      	subs	r3, r3, r6
 8003de6:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003de8:	7863      	ldrb	r3, [r4, #1]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d140      	bne.n	8003e70 <USB_EPStartXfer+0x28e>
 8003dee:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	442b      	add	r3, r5
 8003df6:	7822      	ldrb	r2, [r4, #0]
 8003df8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003dfc:	b9fe      	cbnz	r6, 8003e3e <USB_EPStartXfer+0x25c>
 8003dfe:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8003e02:	b292      	uxth	r2, r2
 8003e04:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003e08:	b292      	uxth	r2, r2
 8003e0a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003e0e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8003e12:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003e16:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003e1a:	b292      	uxth	r2, r2
 8003e1c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003e20:	e028      	b.n	8003e74 <USB_EPStartXfer+0x292>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e22:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003e26:	b292      	uxth	r2, r2
 8003e28:	442a      	add	r2, r5
 8003e2a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8003e2e:	b2b2      	uxth	r2, r6
 8003e30:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003e34:	e7c9      	b.n	8003dca <USB_EPStartXfer+0x1e8>
              ep->xfer_len_db = 0U;
 8003e36:	2200      	movs	r2, #0
 8003e38:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8003e3a:	461e      	mov	r6, r3
 8003e3c:	e7d4      	b.n	8003de8 <USB_EPStartXfer+0x206>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003e3e:	2e3e      	cmp	r6, #62	; 0x3e
 8003e40:	d809      	bhi.n	8003e56 <USB_EPStartXfer+0x274>
 8003e42:	0872      	lsrs	r2, r6, #1
 8003e44:	f016 0f01 	tst.w	r6, #1
 8003e48:	d000      	beq.n	8003e4c <USB_EPStartXfer+0x26a>
 8003e4a:	3201      	adds	r2, #1
 8003e4c:	0292      	lsls	r2, r2, #10
 8003e4e:	b292      	uxth	r2, r2
 8003e50:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003e54:	e00e      	b.n	8003e74 <USB_EPStartXfer+0x292>
 8003e56:	0972      	lsrs	r2, r6, #5
 8003e58:	f016 0f1f 	tst.w	r6, #31
 8003e5c:	d100      	bne.n	8003e60 <USB_EPStartXfer+0x27e>
 8003e5e:	3a01      	subs	r2, #1
 8003e60:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003e64:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003e68:	b292      	uxth	r2, r2
 8003e6a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003e6e:	e001      	b.n	8003e74 <USB_EPStartXfer+0x292>
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d006      	beq.n	8003e82 <USB_EPStartXfer+0x2a0>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e74:	b2b3      	uxth	r3, r6
 8003e76:	8922      	ldrh	r2, [r4, #8]
 8003e78:	6961      	ldr	r1, [r4, #20]
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f7ff fe9e 	bl	8003bbc <USB_WritePMA>
 8003e80:	e73f      	b.n	8003d02 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003e82:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	442b      	add	r3, r5
 8003e8a:	7822      	ldrb	r2, [r4, #0]
 8003e8c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003e90:	b2b2      	uxth	r2, r6
 8003e92:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003e96:	e7ed      	b.n	8003e74 <USB_EPStartXfer+0x292>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003e98:	7862      	ldrb	r2, [r4, #1]
 8003e9a:	bb8a      	cbnz	r2, 8003f00 <USB_EPStartXfer+0x31e>
 8003e9c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003ea0:	b292      	uxth	r2, r2
 8003ea2:	442a      	add	r2, r5
 8003ea4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8003ea8:	b98e      	cbnz	r6, 8003ece <USB_EPStartXfer+0x2ec>
 8003eaa:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8003eae:	b292      	uxth	r2, r2
 8003eb0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003eb4:	b292      	uxth	r2, r2
 8003eb6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003eba:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8003ebe:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003ec2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003ec6:	b292      	uxth	r2, r2
 8003ec8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003ecc:	e01a      	b.n	8003f04 <USB_EPStartXfer+0x322>
 8003ece:	2e3e      	cmp	r6, #62	; 0x3e
 8003ed0:	d809      	bhi.n	8003ee6 <USB_EPStartXfer+0x304>
 8003ed2:	0872      	lsrs	r2, r6, #1
 8003ed4:	f016 0f01 	tst.w	r6, #1
 8003ed8:	d000      	beq.n	8003edc <USB_EPStartXfer+0x2fa>
 8003eda:	3201      	adds	r2, #1
 8003edc:	0292      	lsls	r2, r2, #10
 8003ede:	b292      	uxth	r2, r2
 8003ee0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003ee4:	e00e      	b.n	8003f04 <USB_EPStartXfer+0x322>
 8003ee6:	0972      	lsrs	r2, r6, #5
 8003ee8:	f016 0f1f 	tst.w	r6, #31
 8003eec:	d100      	bne.n	8003ef0 <USB_EPStartXfer+0x30e>
 8003eee:	3a01      	subs	r2, #1
 8003ef0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003ef4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003ef8:	b292      	uxth	r2, r2
 8003efa:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003efe:	e001      	b.n	8003f04 <USB_EPStartXfer+0x322>
 8003f00:	2a01      	cmp	r2, #1
 8003f02:	d02b      	beq.n	8003f5c <USB_EPStartXfer+0x37a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f04:	b2b3      	uxth	r3, r6
 8003f06:	8922      	ldrh	r2, [r4, #8]
 8003f08:	6961      	ldr	r1, [r4, #20]
 8003f0a:	4628      	mov	r0, r5
 8003f0c:	f7ff fe56 	bl	8003bbc <USB_WritePMA>
            ep->xfer_buff += len;
 8003f10:	6963      	ldr	r3, [r4, #20]
 8003f12:	4433      	add	r3, r6
 8003f14:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8003f16:	6a23      	ldr	r3, [r4, #32]
 8003f18:	6922      	ldr	r2, [r4, #16]
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d928      	bls.n	8003f70 <USB_EPStartXfer+0x38e>
              ep->xfer_len_db -= len;
 8003f1e:	1b9b      	subs	r3, r3, r6
 8003f20:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f22:	7863      	ldrb	r3, [r4, #1]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d140      	bne.n	8003faa <USB_EPStartXfer+0x3c8>
 8003f28:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	442b      	add	r3, r5
 8003f30:	7822      	ldrb	r2, [r4, #0]
 8003f32:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003f36:	b9fe      	cbnz	r6, 8003f78 <USB_EPStartXfer+0x396>
 8003f38:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003f3c:	b292      	uxth	r2, r2
 8003f3e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8003f42:	b292      	uxth	r2, r2
 8003f44:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003f48:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8003f4c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003f50:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003f54:	b292      	uxth	r2, r2
 8003f56:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003f5a:	e028      	b.n	8003fae <USB_EPStartXfer+0x3cc>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f5c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003f60:	b292      	uxth	r2, r2
 8003f62:	442a      	add	r2, r5
 8003f64:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8003f68:	b2b2      	uxth	r2, r6
 8003f6a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8003f6e:	e7c9      	b.n	8003f04 <USB_EPStartXfer+0x322>
              ep->xfer_len_db = 0U;
 8003f70:	2200      	movs	r2, #0
 8003f72:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8003f74:	461e      	mov	r6, r3
 8003f76:	e7d4      	b.n	8003f22 <USB_EPStartXfer+0x340>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f78:	2e3e      	cmp	r6, #62	; 0x3e
 8003f7a:	d809      	bhi.n	8003f90 <USB_EPStartXfer+0x3ae>
 8003f7c:	0872      	lsrs	r2, r6, #1
 8003f7e:	f016 0f01 	tst.w	r6, #1
 8003f82:	d000      	beq.n	8003f86 <USB_EPStartXfer+0x3a4>
 8003f84:	3201      	adds	r2, #1
 8003f86:	0292      	lsls	r2, r2, #10
 8003f88:	b292      	uxth	r2, r2
 8003f8a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003f8e:	e00e      	b.n	8003fae <USB_EPStartXfer+0x3cc>
 8003f90:	0972      	lsrs	r2, r6, #5
 8003f92:	f016 0f1f 	tst.w	r6, #31
 8003f96:	d100      	bne.n	8003f9a <USB_EPStartXfer+0x3b8>
 8003f98:	3a01      	subs	r2, #1
 8003f9a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003f9e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003fa2:	b292      	uxth	r2, r2
 8003fa4:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003fa8:	e001      	b.n	8003fae <USB_EPStartXfer+0x3cc>
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d006      	beq.n	8003fbc <USB_EPStartXfer+0x3da>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003fae:	b2b3      	uxth	r3, r6
 8003fb0:	8962      	ldrh	r2, [r4, #10]
 8003fb2:	6961      	ldr	r1, [r4, #20]
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	f7ff fe01 	bl	8003bbc <USB_WritePMA>
 8003fba:	e6a2      	b.n	8003d02 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003fbc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	442b      	add	r3, r5
 8003fc4:	7822      	ldrb	r2, [r4, #0]
 8003fc6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8003fca:	b2b2      	uxth	r2, r6
 8003fcc:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8003fd0:	e7ed      	b.n	8003fae <USB_EPStartXfer+0x3cc>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003fd2:	7821      	ldrb	r1, [r4, #0]
 8003fd4:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 8003fd8:	b292      	uxth	r2, r2
 8003fda:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8003fde:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fe6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fea:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003fee:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8003ff2:	b292      	uxth	r2, r2
 8003ff4:	442a      	add	r2, r5
 8003ff6:	7821      	ldrb	r1, [r4, #0]
 8003ff8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f8a2 3404 	strh.w	r3, [r2, #1028]	; 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004002:	8922      	ldrh	r2, [r4, #8]
 8004004:	6961      	ldr	r1, [r4, #20]
 8004006:	4628      	mov	r0, r5
 8004008:	f7ff fdd8 	bl	8003bbc <USB_WritePMA>
 800400c:	e679      	b.n	8003d02 <USB_EPStartXfer+0x120>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800400e:	2e3e      	cmp	r6, #62	; 0x3e
 8004010:	d809      	bhi.n	8004026 <USB_EPStartXfer+0x444>
 8004012:	0872      	lsrs	r2, r6, #1
 8004014:	f016 0f01 	tst.w	r6, #1
 8004018:	d000      	beq.n	800401c <USB_EPStartXfer+0x43a>
 800401a:	3201      	adds	r2, #1
 800401c:	0292      	lsls	r2, r2, #10
 800401e:	b292      	uxth	r2, r2
 8004020:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004024:	e00e      	b.n	8004044 <USB_EPStartXfer+0x462>
 8004026:	0972      	lsrs	r2, r6, #5
 8004028:	f016 0f1f 	tst.w	r6, #31
 800402c:	d100      	bne.n	8004030 <USB_EPStartXfer+0x44e>
 800402e:	3a01      	subs	r2, #1
 8004030:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8004034:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004038:	b292      	uxth	r2, r2
 800403a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800403e:	e001      	b.n	8004044 <USB_EPStartXfer+0x462>
 8004040:	2a01      	cmp	r2, #1
 8004042:	d026      	beq.n	8004092 <USB_EPStartXfer+0x4b0>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004044:	b2b3      	uxth	r3, r6
 8004046:	8962      	ldrh	r2, [r4, #10]
 8004048:	6961      	ldr	r1, [r4, #20]
 800404a:	4628      	mov	r0, r5
 800404c:	f7ff fdb6 	bl	8003bbc <USB_WritePMA>
          ep->xfer_buff += len;
 8004050:	6963      	ldr	r3, [r4, #20]
 8004052:	4433      	add	r3, r6
 8004054:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 8004056:	6a23      	ldr	r3, [r4, #32]
 8004058:	6922      	ldr	r2, [r4, #16]
 800405a:	4293      	cmp	r3, r2
 800405c:	d923      	bls.n	80040a6 <USB_EPStartXfer+0x4c4>
            ep->xfer_len_db -= len;
 800405e:	1b9b      	subs	r3, r3, r6
 8004060:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 8004062:	2e00      	cmp	r6, #0
 8004064:	f43f ae4d 	beq.w	8003d02 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004068:	7863      	ldrb	r3, [r4, #1]
 800406a:	bb6b      	cbnz	r3, 80040c8 <USB_EPStartXfer+0x4e6>
 800406c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8004070:	b29b      	uxth	r3, r3
 8004072:	442b      	add	r3, r5
 8004074:	7822      	ldrb	r2, [r4, #0]
 8004076:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800407a:	2e3e      	cmp	r6, #62	; 0x3e
 800407c:	d817      	bhi.n	80040ae <USB_EPStartXfer+0x4cc>
 800407e:	0872      	lsrs	r2, r6, #1
 8004080:	f016 0f01 	tst.w	r6, #1
 8004084:	d000      	beq.n	8004088 <USB_EPStartXfer+0x4a6>
 8004086:	3201      	adds	r2, #1
 8004088:	0292      	lsls	r2, r2, #10
 800408a:	b292      	uxth	r2, r2
 800408c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004090:	e01c      	b.n	80040cc <USB_EPStartXfer+0x4ea>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004092:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004096:	b292      	uxth	r2, r2
 8004098:	442a      	add	r2, r5
 800409a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800409e:	b2b2      	uxth	r2, r6
 80040a0:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80040a4:	e7ce      	b.n	8004044 <USB_EPStartXfer+0x462>
            ep->xfer_len_db = 0U;
 80040a6:	2200      	movs	r2, #0
 80040a8:	6222      	str	r2, [r4, #32]
            len = ep->xfer_len_db;
 80040aa:	461e      	mov	r6, r3
 80040ac:	e7d9      	b.n	8004062 <USB_EPStartXfer+0x480>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80040ae:	0972      	lsrs	r2, r6, #5
 80040b0:	f016 0f1f 	tst.w	r6, #31
 80040b4:	d100      	bne.n	80040b8 <USB_EPStartXfer+0x4d6>
 80040b6:	3a01      	subs	r2, #1
 80040b8:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80040bc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80040c0:	b292      	uxth	r2, r2
 80040c2:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80040c6:	e001      	b.n	80040cc <USB_EPStartXfer+0x4ea>
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d006      	beq.n	80040da <USB_EPStartXfer+0x4f8>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040cc:	b2b3      	uxth	r3, r6
 80040ce:	8922      	ldrh	r2, [r4, #8]
 80040d0:	6961      	ldr	r1, [r4, #20]
 80040d2:	4628      	mov	r0, r5
 80040d4:	f7ff fd72 	bl	8003bbc <USB_WritePMA>
 80040d8:	e613      	b.n	8003d02 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80040da:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80040de:	b29b      	uxth	r3, r3
 80040e0:	442b      	add	r3, r5
 80040e2:	7822      	ldrb	r2, [r4, #0]
 80040e4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80040e8:	b2b2      	uxth	r2, r6
 80040ea:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80040ee:	e7ed      	b.n	80040cc <USB_EPStartXfer+0x4ea>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80040f0:	7862      	ldrb	r2, [r4, #1]
 80040f2:	bb8a      	cbnz	r2, 8004158 <USB_EPStartXfer+0x576>
 80040f4:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80040f8:	b292      	uxth	r2, r2
 80040fa:	442a      	add	r2, r5
 80040fc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8004100:	b98e      	cbnz	r6, 8004126 <USB_EPStartXfer+0x544>
 8004102:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8004106:	b292      	uxth	r2, r2
 8004108:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800410c:	b292      	uxth	r2, r2
 800410e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004112:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8004116:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800411a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800411e:	b292      	uxth	r2, r2
 8004120:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004124:	e01a      	b.n	800415c <USB_EPStartXfer+0x57a>
 8004126:	2e3e      	cmp	r6, #62	; 0x3e
 8004128:	d809      	bhi.n	800413e <USB_EPStartXfer+0x55c>
 800412a:	0872      	lsrs	r2, r6, #1
 800412c:	f016 0f01 	tst.w	r6, #1
 8004130:	d000      	beq.n	8004134 <USB_EPStartXfer+0x552>
 8004132:	3201      	adds	r2, #1
 8004134:	0292      	lsls	r2, r2, #10
 8004136:	b292      	uxth	r2, r2
 8004138:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800413c:	e00e      	b.n	800415c <USB_EPStartXfer+0x57a>
 800413e:	0972      	lsrs	r2, r6, #5
 8004140:	f016 0f1f 	tst.w	r6, #31
 8004144:	d100      	bne.n	8004148 <USB_EPStartXfer+0x566>
 8004146:	3a01      	subs	r2, #1
 8004148:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800414c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004150:	b292      	uxth	r2, r2
 8004152:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004156:	e001      	b.n	800415c <USB_EPStartXfer+0x57a>
 8004158:	2a01      	cmp	r2, #1
 800415a:	d026      	beq.n	80041aa <USB_EPStartXfer+0x5c8>
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800415c:	b2b3      	uxth	r3, r6
 800415e:	8922      	ldrh	r2, [r4, #8]
 8004160:	6961      	ldr	r1, [r4, #20]
 8004162:	4628      	mov	r0, r5
 8004164:	f7ff fd2a 	bl	8003bbc <USB_WritePMA>
          ep->xfer_buff += len;
 8004168:	6963      	ldr	r3, [r4, #20]
 800416a:	4433      	add	r3, r6
 800416c:	6163      	str	r3, [r4, #20]
          if (ep->xfer_len_db > ep->maxpacket)
 800416e:	6a23      	ldr	r3, [r4, #32]
 8004170:	6922      	ldr	r2, [r4, #16]
 8004172:	4293      	cmp	r3, r2
 8004174:	d923      	bls.n	80041be <USB_EPStartXfer+0x5dc>
            ep->xfer_len_db -= len;
 8004176:	1b9b      	subs	r3, r3, r6
 8004178:	6223      	str	r3, [r4, #32]
          if (len > 0U)
 800417a:	2e00      	cmp	r6, #0
 800417c:	f43f adc1 	beq.w	8003d02 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004180:	7863      	ldrb	r3, [r4, #1]
 8004182:	bb6b      	cbnz	r3, 80041e0 <USB_EPStartXfer+0x5fe>
 8004184:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8004188:	b29b      	uxth	r3, r3
 800418a:	442b      	add	r3, r5
 800418c:	7822      	ldrb	r2, [r4, #0]
 800418e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004192:	2e3e      	cmp	r6, #62	; 0x3e
 8004194:	d817      	bhi.n	80041c6 <USB_EPStartXfer+0x5e4>
 8004196:	0872      	lsrs	r2, r6, #1
 8004198:	f016 0f01 	tst.w	r6, #1
 800419c:	d000      	beq.n	80041a0 <USB_EPStartXfer+0x5be>
 800419e:	3201      	adds	r2, #1
 80041a0:	0292      	lsls	r2, r2, #10
 80041a2:	b292      	uxth	r2, r2
 80041a4:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80041a8:	e01c      	b.n	80041e4 <USB_EPStartXfer+0x602>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80041aa:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80041ae:	b292      	uxth	r2, r2
 80041b0:	442a      	add	r2, r5
 80041b2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80041b6:	b2b2      	uxth	r2, r6
 80041b8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80041bc:	e7ce      	b.n	800415c <USB_EPStartXfer+0x57a>
            ep->xfer_len_db = 0U;
 80041be:	2200      	movs	r2, #0
 80041c0:	6222      	str	r2, [r4, #32]
            len = ep->xfer_len_db;
 80041c2:	461e      	mov	r6, r3
 80041c4:	e7d9      	b.n	800417a <USB_EPStartXfer+0x598>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80041c6:	0972      	lsrs	r2, r6, #5
 80041c8:	f016 0f1f 	tst.w	r6, #31
 80041cc:	d100      	bne.n	80041d0 <USB_EPStartXfer+0x5ee>
 80041ce:	3a01      	subs	r2, #1
 80041d0:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80041d4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80041d8:	b292      	uxth	r2, r2
 80041da:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80041de:	e001      	b.n	80041e4 <USB_EPStartXfer+0x602>
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d006      	beq.n	80041f2 <USB_EPStartXfer+0x610>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041e4:	b2b3      	uxth	r3, r6
 80041e6:	8962      	ldrh	r2, [r4, #10]
 80041e8:	6961      	ldr	r1, [r4, #20]
 80041ea:	4628      	mov	r0, r5
 80041ec:	f7ff fce6 	bl	8003bbc <USB_WritePMA>
 80041f0:	e587      	b.n	8003d02 <USB_EPStartXfer+0x120>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80041f2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	442b      	add	r3, r5
 80041fa:	7822      	ldrb	r2, [r4, #0]
 80041fc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8004200:	b2b2      	uxth	r2, r6
 8004202:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004206:	e7ed      	b.n	80041e4 <USB_EPStartXfer+0x602>
        ep->xfer_len = 0U;
 8004208:	2200      	movs	r2, #0
 800420a:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 800420c:	461a      	mov	r2, r3
 800420e:	e4f9      	b.n	8003c04 <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004210:	2a3e      	cmp	r2, #62	; 0x3e
 8004212:	d809      	bhi.n	8004228 <USB_EPStartXfer+0x646>
 8004214:	0851      	lsrs	r1, r2, #1
 8004216:	f012 0f01 	tst.w	r2, #1
 800421a:	d000      	beq.n	800421e <USB_EPStartXfer+0x63c>
 800421c:	3101      	adds	r1, #1
 800421e:	0289      	lsls	r1, r1, #10
 8004220:	b289      	uxth	r1, r1
 8004222:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8004226:	e508      	b.n	8003c3a <USB_EPStartXfer+0x58>
 8004228:	0951      	lsrs	r1, r2, #5
 800422a:	f012 0f1f 	tst.w	r2, #31
 800422e:	d100      	bne.n	8004232 <USB_EPStartXfer+0x650>
 8004230:	3901      	subs	r1, #1
 8004232:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8004236:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800423a:	b289      	uxth	r1, r1
 800423c:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8004240:	e4fb      	b.n	8003c3a <USB_EPStartXfer+0x58>
      if (ep->type == EP_TYPE_BULK)
 8004242:	78ca      	ldrb	r2, [r1, #3]
 8004244:	2a02      	cmp	r2, #2
 8004246:	d045      	beq.n	80042d4 <USB_EPStartXfer+0x6f2>
      else if (ep->type == EP_TYPE_ISOC)
 8004248:	2a01      	cmp	r2, #1
 800424a:	f040 8120 	bne.w	800448e <USB_EPStartXfer+0x8ac>
        if (ep->xfer_len > ep->maxpacket)
 800424e:	6989      	ldr	r1, [r1, #24]
 8004250:	6922      	ldr	r2, [r4, #16]
 8004252:	4291      	cmp	r1, r2
 8004254:	f240 80d4 	bls.w	8004400 <USB_EPStartXfer+0x81e>
          ep->xfer_len -= len;
 8004258:	1a89      	subs	r1, r1, r2
 800425a:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800425c:	b9d3      	cbnz	r3, 8004294 <USB_EPStartXfer+0x6b2>
 800425e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8004262:	b29b      	uxth	r3, r3
 8004264:	442b      	add	r3, r5
 8004266:	7821      	ldrb	r1, [r4, #0]
 8004268:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800426c:	2a00      	cmp	r2, #0
 800426e:	f040 80cb 	bne.w	8004408 <USB_EPStartXfer+0x826>
 8004272:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	; 0x404
 8004276:	b289      	uxth	r1, r1
 8004278:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 800427c:	b289      	uxth	r1, r1
 800427e:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 8004282:	f8b3 1404 	ldrh.w	r1, [r3, #1028]	; 0x404
 8004286:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800428a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800428e:	b289      	uxth	r1, r1
 8004290:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 8004294:	7863      	ldrb	r3, [r4, #1]
 8004296:	2b00      	cmp	r3, #0
 8004298:	f040 80ea 	bne.w	8004470 <USB_EPStartXfer+0x88e>
 800429c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	442b      	add	r3, r5
 80042a4:	7821      	ldrb	r1, [r4, #0]
 80042a6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	f040 80c5 	bne.w	800443a <USB_EPStartXfer+0x858>
 80042b0:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80042b4:	b292      	uxth	r2, r2
 80042b6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80042ba:	b292      	uxth	r2, r2
 80042bc:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80042c0:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80042c4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80042c8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80042cc:	b292      	uxth	r2, r2
 80042ce:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80042d2:	e4b2      	b.n	8003c3a <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80042d4:	b9cb      	cbnz	r3, 800430a <USB_EPStartXfer+0x728>
 80042d6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80042da:	b29b      	uxth	r3, r3
 80042dc:	4403      	add	r3, r0
 80042de:	780a      	ldrb	r2, [r1, #0]
 80042e0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80042e4:	690a      	ldr	r2, [r1, #16]
 80042e6:	bb72      	cbnz	r2, 8004346 <USB_EPStartXfer+0x764>
 80042e8:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80042ec:	b292      	uxth	r2, r2
 80042ee:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80042f2:	b292      	uxth	r2, r2
 80042f4:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 80042f8:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 80042fc:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004300:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004304:	b292      	uxth	r2, r2
 8004306:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800430a:	7863      	ldrb	r3, [r4, #1]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d14c      	bne.n	80043aa <USB_EPStartXfer+0x7c8>
 8004310:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8004314:	b29b      	uxth	r3, r3
 8004316:	442b      	add	r3, r5
 8004318:	7822      	ldrb	r2, [r4, #0]
 800431a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800431e:	6922      	ldr	r2, [r4, #16]
 8004320:	bb52      	cbnz	r2, 8004378 <USB_EPStartXfer+0x796>
 8004322:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8004326:	b292      	uxth	r2, r2
 8004328:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800432c:	b292      	uxth	r2, r2
 800432e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004332:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8004336:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800433a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800433e:	b292      	uxth	r2, r2
 8004340:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004344:	e033      	b.n	80043ae <USB_EPStartXfer+0x7cc>
 8004346:	2a3e      	cmp	r2, #62	; 0x3e
 8004348:	d809      	bhi.n	800435e <USB_EPStartXfer+0x77c>
 800434a:	0851      	lsrs	r1, r2, #1
 800434c:	f012 0f01 	tst.w	r2, #1
 8004350:	d000      	beq.n	8004354 <USB_EPStartXfer+0x772>
 8004352:	3101      	adds	r1, #1
 8004354:	028a      	lsls	r2, r1, #10
 8004356:	b292      	uxth	r2, r2
 8004358:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 800435c:	e7d5      	b.n	800430a <USB_EPStartXfer+0x728>
 800435e:	0951      	lsrs	r1, r2, #5
 8004360:	f012 0f1f 	tst.w	r2, #31
 8004364:	d100      	bne.n	8004368 <USB_EPStartXfer+0x786>
 8004366:	3901      	subs	r1, #1
 8004368:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 800436c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004370:	b292      	uxth	r2, r2
 8004372:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8004376:	e7c8      	b.n	800430a <USB_EPStartXfer+0x728>
 8004378:	2a3e      	cmp	r2, #62	; 0x3e
 800437a:	d809      	bhi.n	8004390 <USB_EPStartXfer+0x7ae>
 800437c:	0851      	lsrs	r1, r2, #1
 800437e:	f012 0f01 	tst.w	r2, #1
 8004382:	d000      	beq.n	8004386 <USB_EPStartXfer+0x7a4>
 8004384:	3101      	adds	r1, #1
 8004386:	028a      	lsls	r2, r1, #10
 8004388:	b292      	uxth	r2, r2
 800438a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800438e:	e00e      	b.n	80043ae <USB_EPStartXfer+0x7cc>
 8004390:	0951      	lsrs	r1, r2, #5
 8004392:	f012 0f1f 	tst.w	r2, #31
 8004396:	d100      	bne.n	800439a <USB_EPStartXfer+0x7b8>
 8004398:	3901      	subs	r1, #1
 800439a:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 800439e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80043a2:	b292      	uxth	r2, r2
 80043a4:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80043a8:	e001      	b.n	80043ae <USB_EPStartXfer+0x7cc>
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d01d      	beq.n	80043ea <USB_EPStartXfer+0x808>
        if (ep->xfer_count != 0U)
 80043ae:	69e3      	ldr	r3, [r4, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f43f ac42 	beq.w	8003c3a <USB_EPStartXfer+0x58>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80043b6:	7822      	ldrb	r2, [r4, #0]
 80043b8:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80043bc:	f244 0340 	movw	r3, #16448	; 0x4040
 80043c0:	ea03 0001 	and.w	r0, r3, r1
 80043c4:	438b      	bics	r3, r1
 80043c6:	d002      	beq.n	80043ce <USB_EPStartXfer+0x7ec>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	f47f ac36 	bne.w	8003c3a <USB_EPStartXfer+0x58>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80043ce:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043e4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80043e8:	e427      	b.n	8003c3a <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80043ea:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	442b      	add	r3, r5
 80043f2:	7822      	ldrb	r2, [r4, #0]
 80043f4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80043f8:	8a22      	ldrh	r2, [r4, #16]
 80043fa:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80043fe:	e7d6      	b.n	80043ae <USB_EPStartXfer+0x7cc>
          ep->xfer_len = 0U;
 8004400:	2200      	movs	r2, #0
 8004402:	61a2      	str	r2, [r4, #24]
          len = ep->xfer_len;
 8004404:	460a      	mov	r2, r1
 8004406:	e729      	b.n	800425c <USB_EPStartXfer+0x67a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004408:	2a3e      	cmp	r2, #62	; 0x3e
 800440a:	d809      	bhi.n	8004420 <USB_EPStartXfer+0x83e>
 800440c:	0851      	lsrs	r1, r2, #1
 800440e:	f012 0f01 	tst.w	r2, #1
 8004412:	d000      	beq.n	8004416 <USB_EPStartXfer+0x834>
 8004414:	3101      	adds	r1, #1
 8004416:	0289      	lsls	r1, r1, #10
 8004418:	b289      	uxth	r1, r1
 800441a:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 800441e:	e739      	b.n	8004294 <USB_EPStartXfer+0x6b2>
 8004420:	0951      	lsrs	r1, r2, #5
 8004422:	f012 0f1f 	tst.w	r2, #31
 8004426:	d100      	bne.n	800442a <USB_EPStartXfer+0x848>
 8004428:	3901      	subs	r1, #1
 800442a:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800442e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004432:	b289      	uxth	r1, r1
 8004434:	f8a3 1404 	strh.w	r1, [r3, #1028]	; 0x404
 8004438:	e72c      	b.n	8004294 <USB_EPStartXfer+0x6b2>
 800443a:	2a3e      	cmp	r2, #62	; 0x3e
 800443c:	d80a      	bhi.n	8004454 <USB_EPStartXfer+0x872>
 800443e:	0851      	lsrs	r1, r2, #1
 8004440:	f012 0f01 	tst.w	r2, #1
 8004444:	d000      	beq.n	8004448 <USB_EPStartXfer+0x866>
 8004446:	3101      	adds	r1, #1
 8004448:	028a      	lsls	r2, r1, #10
 800444a:	b292      	uxth	r2, r2
 800444c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8004450:	f7ff bbf3 	b.w	8003c3a <USB_EPStartXfer+0x58>
 8004454:	0951      	lsrs	r1, r2, #5
 8004456:	f012 0f1f 	tst.w	r2, #31
 800445a:	d100      	bne.n	800445e <USB_EPStartXfer+0x87c>
 800445c:	3901      	subs	r1, #1
 800445e:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8004462:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004466:	b292      	uxth	r2, r2
 8004468:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800446c:	f7ff bbe5 	b.w	8003c3a <USB_EPStartXfer+0x58>
 8004470:	2b01      	cmp	r3, #1
 8004472:	f47f abe2 	bne.w	8003c3a <USB_EPStartXfer+0x58>
 8004476:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800447a:	b29b      	uxth	r3, r3
 800447c:	442b      	add	r3, r5
 800447e:	7821      	ldrb	r1, [r4, #0]
 8004480:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004484:	b292      	uxth	r2, r2
 8004486:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800448a:	f7ff bbd6 	b.w	8003c3a <USB_EPStartXfer+0x58>
        return HAL_ERROR;
 800448e:	2001      	movs	r0, #1
 8004490:	f7ff bbe4 	b.w	8003c5c <USB_EPStartXfer+0x7a>

08004494 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004494:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004496:	085c      	lsrs	r4, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004498:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 800449c:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80044a0:	b144      	cbz	r4, 80044b4 <USB_ReadPMA+0x20>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80044a2:	f830 2b04 	ldrh.w	r2, [r0], #4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80044a6:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80044a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80044ac:	704a      	strb	r2, [r1, #1]
    pBuf++;
 80044ae:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 80044b0:	3c01      	subs	r4, #1
 80044b2:	e7f5      	b.n	80044a0 <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80044b4:	f013 0f01 	tst.w	r3, #1
 80044b8:	d001      	beq.n	80044be <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 80044ba:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80044bc:	700b      	strb	r3, [r1, #0]
  }
}
 80044be:	bc10      	pop	{r4}
 80044c0:	4770      	bx	lr
	...

080044c4 <__libc_init_array>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	2600      	movs	r6, #0
 80044c8:	4d0c      	ldr	r5, [pc, #48]	; (80044fc <__libc_init_array+0x38>)
 80044ca:	4c0d      	ldr	r4, [pc, #52]	; (8004500 <__libc_init_array+0x3c>)
 80044cc:	1b64      	subs	r4, r4, r5
 80044ce:	10a4      	asrs	r4, r4, #2
 80044d0:	42a6      	cmp	r6, r4
 80044d2:	d109      	bne.n	80044e8 <__libc_init_array+0x24>
 80044d4:	f000 f81a 	bl	800450c <_init>
 80044d8:	2600      	movs	r6, #0
 80044da:	4d0a      	ldr	r5, [pc, #40]	; (8004504 <__libc_init_array+0x40>)
 80044dc:	4c0a      	ldr	r4, [pc, #40]	; (8004508 <__libc_init_array+0x44>)
 80044de:	1b64      	subs	r4, r4, r5
 80044e0:	10a4      	asrs	r4, r4, #2
 80044e2:	42a6      	cmp	r6, r4
 80044e4:	d105      	bne.n	80044f2 <__libc_init_array+0x2e>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ec:	4798      	blx	r3
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7ee      	b.n	80044d0 <__libc_init_array+0xc>
 80044f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f6:	4798      	blx	r3
 80044f8:	3601      	adds	r6, #1
 80044fa:	e7f2      	b.n	80044e2 <__libc_init_array+0x1e>
 80044fc:	080045b0 	.word	0x080045b0
 8004500:	080045b0 	.word	0x080045b0
 8004504:	080045b0 	.word	0x080045b0
 8004508:	080045b4 	.word	0x080045b4

0800450c <_init>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	bf00      	nop
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr

08004518 <_fini>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	bf00      	nop
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr
